-- UEHelpers = require("UEHelpers")
-- local UWorld = UEHelpers.GetWorld()

GameState = nil
World = nil
GameMode = nil
IsServer = false


function DisableCullingForAllActors(World)
    World.StreamingLevels:ForEach(function (index, param)
        local streamLevel = param:get()
        local levelName = tostring(streamLevel:GetFullName())
        print("Iterating Level: " .. levelName)

        if string.find(levelName, "32") then
            goto continue
        end

        -- enable these levels
        streamLevel.bShouldBeLoaded = true;
        streamLevel.bShouldBeVisible = true;
        streamLevel.bDisableDistanceStreaming = true;
        streamLevel.bShouldBlockOnLoad = true;
        ::continue::
    end)
end

function Init()
    print("Test!")
    RegisterInitGameStatePostHook(function(GameState)
        local world = FindFirstOf("World")
        local stat = StaticFindObject("/Script/Engine.GameplayStatics")
        print(tostring(world) .. ", name=" .. tostring(world:GetFullName()))

        LoopAsync(100, function()
            -- print(tostring(world.GameState:GetFullName()))
            if world.GameState:GetFullName() == nil then
                print("Waiting for GameState to be valid...")
                return false
            else

                print("state= " .. tostring(world.GameState:GetFullName()))
                world.GameState.RemainingTime = 3600

                -- Init the gamestate
                GameState = world.GameState
                World = world

                GameMode = FindFirstOf("TSLGameMode_C")
                print("GameMode: " .. tostring(GameMode:GetFullName()))
                -- print("Try call K2_OnRestartPlayer, type= " .. tostring(GameMode.K2_OnRestartPlayer:GetFullName()))
                -- GameMode:K2_OnRestartPlayer(nil)

                -- RegisterHook("/Script/TslGame.TslGameMode:K2_OnSetMatchState", function (Context)
                --     print("K2_OnSetMatchState::before")
                -- end,        
                -- function (Context)
                --     print("K2_OnSetMatchState::after")
                -- end)

                local serverPlayer = FindFirstOf("TslPlayerController")
                if serverPlayer:IsValid() and serverPlayer:HasAuthority() then
                    print("We are a server, continue to do our stuff")
                    IsServer = true
                    DisableCullingForAllActors(world)
                    -- serverPlayer:K2_GetPawn():K2_TeleportTo({
                    --     ["X"] = 338062.06,
                    --     ["Y"] = 170761.37,
                    --     ["Z"] = 2200.10
                    --     },
                    --     {
                    --         ["Pitch"] = 0.0,
                    --         ["Yaw"] = 0.0,
                    --         ["Roll"] = 0.0
                    --     })
                    NotifyOnNewObject("/Script/Engine.PlayerController", function(PlayerController)
                        print("get new player, full name: " .. tostring(PlayerController:GetFullName()))
                        
                        LoopAsync(100, function() 
                            if PlayerController:K2_GetPawn():GetFullName() == nil then
                                print("Waiting for Pawn to be spawned...")
                                return false
                            else
                                print("Teleporting player pawn " .. tostring(PlayerController:K2_GetPawn():GetFullName()) .. " to location")
                                PlayerController:K2_GetPawn():K2_TeleportTo({
                                    ["X"] = 338062.06,
                                    ["Y"] = 170761.37,
                                    ["Z"] = 2200.10
                                    },
                                    {
                                        ["Pitch"] = 0.0,
                                        ["Yaw"] = 0.0,
                                        ["Roll"] = 0.0
                                    })
                                -- PlayerController:K2_GetPawn().HealthMax = 10000
                                -- PlayerController:K2_GetPawn().Health = 10000
                                -- LoopAsync(100, function()
                                --     GameState.PoisonGasWarningPosition.X = 338062.06
                                --     GameState.PoisonGasWarningPosition.Y = 170761.37
                                --     GameState.PoisonGasWarningPosition.Z = 2200.10
                                --     GameState.PoisonGasWarningRadius = 20000
                                --     return false
                                -- end)
                                return true
                            end
                        end)
                    end)
                else
                    print("We are a client")
                end

                return true
            end
        end)
    end)
end

-- local function MyCallback(Context, Str, Ar, Executor, bForceCallWithNonExec)
--     print("MyCallback: " .. Str)
--     return nil
-- end

-- RegisterCallFunctionByNameWithArgumentsPreHook(MyCallback)

-- RegisterHook("/Script/Engine.GameModeBase:K2_OnRestartPlayer", function ()
--     print("K2_OnRestartPlayer::before")
-- end)

-- RegisterHook("/Script/Engine.KismetMathLibrary:Add_IntInt", function()
-- 	print("/Script/Engine.KismetMathLibrary:Add_IntInt\n")
-- end)

-- local Math = StaticFindObject("/Script/Engine.Default__KismetMathLibrary")
-- local Val = Math:Add_IntInt(2, 3)
-- print(string.format("Val: %s\n", Val))

Init()