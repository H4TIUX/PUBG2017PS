#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Class MovieScene.MovieScene
// 0x0080 (0x00A8 - 0x0028)
class UMovieScene final : public UObject
{
public:
	TArray<struct FMovieSceneSpawnable>           Spawnables;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieScenePossessable>         Possessables;                                      // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneBinding>             ObjectBindings;                                    // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               MasterTracks;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMovieSceneTrack*                       CameraCutTrack;                                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFloatRange                            SelectionRange;                                    // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFloatRange                            PlaybackRange;                                     // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bForceFixedFrameIntervalPlayback;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedFrameInterval;                                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InTime;                                            // 0x0098(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OutTime;                                           // 0x009C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x00A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndTime;                                           // 0x00A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene">();
	}
	static class UMovieScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene>();
	}
};
static_assert(alignof(UMovieScene) == 0x000008, "Wrong alignment on UMovieScene");
static_assert(sizeof(UMovieScene) == 0x0000A8, "Wrong size on UMovieScene");
static_assert(offsetof(UMovieScene, Spawnables) == 0x000028, "Member 'UMovieScene::Spawnables' has a wrong offset!");
static_assert(offsetof(UMovieScene, Possessables) == 0x000038, "Member 'UMovieScene::Possessables' has a wrong offset!");
static_assert(offsetof(UMovieScene, ObjectBindings) == 0x000048, "Member 'UMovieScene::ObjectBindings' has a wrong offset!");
static_assert(offsetof(UMovieScene, MasterTracks) == 0x000058, "Member 'UMovieScene::MasterTracks' has a wrong offset!");
static_assert(offsetof(UMovieScene, CameraCutTrack) == 0x000068, "Member 'UMovieScene::CameraCutTrack' has a wrong offset!");
static_assert(offsetof(UMovieScene, SelectionRange) == 0x000070, "Member 'UMovieScene::SelectionRange' has a wrong offset!");
static_assert(offsetof(UMovieScene, PlaybackRange) == 0x000080, "Member 'UMovieScene::PlaybackRange' has a wrong offset!");
static_assert(offsetof(UMovieScene, bForceFixedFrameIntervalPlayback) == 0x000090, "Member 'UMovieScene::bForceFixedFrameIntervalPlayback' has a wrong offset!");
static_assert(offsetof(UMovieScene, FixedFrameInterval) == 0x000094, "Member 'UMovieScene::FixedFrameInterval' has a wrong offset!");
static_assert(offsetof(UMovieScene, InTime) == 0x000098, "Member 'UMovieScene::InTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, OutTime) == 0x00009C, "Member 'UMovieScene::OutTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, StartTime) == 0x0000A0, "Member 'UMovieScene::StartTime' has a wrong offset!");
static_assert(offsetof(UMovieScene, EndTime) == 0x0000A4, "Member 'UMovieScene::EndTime' has a wrong offset!");

// Class MovieScene.MovieSceneFolder
// 0x0048 (0x0070 - 0x0028)
class UMovieSceneFolder final : public UObject
{
public:
	struct FName                                   FolderName;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneFolder*>              ChildFolders;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               ChildMasterTracks;                                 // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ChildObjectBindingStrings;                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFolder">();
	}
	static class UMovieSceneFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFolder>();
	}
};
static_assert(alignof(UMovieSceneFolder) == 0x000008, "Wrong alignment on UMovieSceneFolder");
static_assert(sizeof(UMovieSceneFolder) == 0x000070, "Wrong size on UMovieSceneFolder");
static_assert(offsetof(UMovieSceneFolder, FolderName) == 0x000028, "Member 'UMovieSceneFolder::FolderName' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildFolders) == 0x000030, "Member 'UMovieSceneFolder::ChildFolders' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildMasterTracks) == 0x000040, "Member 'UMovieSceneFolder::ChildMasterTracks' has a wrong offset!");
static_assert(offsetof(UMovieSceneFolder, ChildObjectBindingStrings) == 0x000050, "Member 'UMovieSceneFolder::ChildObjectBindingStrings' has a wrong offset!");

// Class MovieScene.MovieSceneSection
// 0x0018 (0x0040 - 0x0028)
class UMovieSceneSection : public UObject
{
public:
	float                                         StartTime;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndTime;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RowIndex;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OverlapPriority;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsActive : 1;                                     // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsLocked : 1;                                     // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsInfinite : 1;                                   // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSection">();
	}
	static class UMovieSceneSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSection>();
	}
};
static_assert(alignof(UMovieSceneSection) == 0x000008, "Wrong alignment on UMovieSceneSection");
static_assert(sizeof(UMovieSceneSection) == 0x000040, "Wrong size on UMovieSceneSection");
static_assert(offsetof(UMovieSceneSection, StartTime) == 0x000028, "Member 'UMovieSceneSection::StartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, EndTime) == 0x00002C, "Member 'UMovieSceneSection::EndTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, RowIndex) == 0x000030, "Member 'UMovieSceneSection::RowIndex' has a wrong offset!");
static_assert(offsetof(UMovieSceneSection, OverlapPriority) == 0x000034, "Member 'UMovieSceneSection::OverlapPriority' has a wrong offset!");

// Class MovieScene.MovieSceneSequence
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneSequence : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSequence">();
	}
	static class UMovieSceneSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSequence>();
	}
};
static_assert(alignof(UMovieSceneSequence) == 0x000008, "Wrong alignment on UMovieSceneSequence");
static_assert(sizeof(UMovieSceneSequence) == 0x000028, "Wrong size on UMovieSceneSequence");

// Class MovieScene.MovieSceneTrack
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneTrack : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTrack">();
	}
	static class UMovieSceneTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTrack>();
	}
};
static_assert(alignof(UMovieSceneTrack) == 0x000008, "Wrong alignment on UMovieSceneTrack");
static_assert(sizeof(UMovieSceneTrack) == 0x000028, "Wrong size on UMovieSceneTrack");

// Class MovieScene.MovieSceneNameableTrack
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneNameableTrack : public UMovieSceneTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneNameableTrack">();
	}
	static class UMovieSceneNameableTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneNameableTrack>();
	}
};
static_assert(alignof(UMovieSceneNameableTrack) == 0x000008, "Wrong alignment on UMovieSceneNameableTrack");
static_assert(sizeof(UMovieSceneNameableTrack) == 0x000028, "Wrong size on UMovieSceneNameableTrack");

}

