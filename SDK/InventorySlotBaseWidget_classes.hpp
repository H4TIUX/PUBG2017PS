#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventorySlotBaseWidget

#include "Basic.hpp"

#include "TslGame_structs.hpp"
#include "Engine_structs.hpp"
#include "SlotBaseWidget_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass InventorySlotBaseWidget.InventorySlotBaseWidget_C
// 0x00A0 (0x02F0 - 0x0250)
class UInventorySlotBaseWidget_C : public USlotBaseWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_InventorySlotBaseWidget_C;          // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EEquipSlotID                                  EquipSlotID;                                       // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponSlotIndex;                                   // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               SlotBackground_NormalEmpty;                        // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               SlotBackground_Normal;                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               SlotBackground_On;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               SlotBackGround_SubOn;                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               SlotBackground_Over;                               // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMouseOver;                                        // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SlotDynamicMaterial;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FName                                   TexParm;                                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UImage*                                 ItemIcon;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         IconSize;                                          // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEquipment*                             Equipment;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AWeaponProcessor*                       WeaponProcessor;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UItem*                                  Item;                                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTslItemDragDropOperation_C*            TslItemDragDropOperation;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ToolTipShowDelaytime;                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryWidget_C*                     InventoryWidget;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   RefreshFocus;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_InventorySlotBaseWidget(int32 EntryPoint);
	void OnInputWidgetInputB();
	void OnWidgetInputX();
	void UI_Gamepad_B();
	void Construct();
	void SetInventory(class UInventoryWidget_C* InventoryWidget_0);
	void UpdateDragDropObject(class UTslItemDragDropOperation_C* DragDropObject);
	void ShowToolTip();
	void Destruct();
	void OnUpdateItem(class UItem* Item_0);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void UpdateDragDroppingItem(class UItem* DroppingItem);
	void GetBackgroundTexture_Bp(class UTexture** BackgroundTexture);
	void IsSlotOn_Bp(bool* IsOn);
	void IsSlotSubOn_Bp(bool* SubOn);
	void GetTslItemDragDropOperation_Bp(class UTslItemDragDropOperation_C** TslItemDragDropOperation_0);
	void UpdateSlotBackground_Bp(class UWidget* BoundWidget);
	void IsSlotMouseOver_Bp(bool* IsMouseOver);
	void UpdateIconVisibility_Bp(class UWidget* BoundWidget);
	void UpdateItemIcon_Bp(class UWidget* BoundWidget);
	struct FSlateBrush GetIcon_Bp();
	void UpdateItem_Bp(class UWidget* BoundWidget);
	void GetItem_Bp(class UItem** Item_0);
	void CreateTslDragDropOperation_Bp(class UTslItemDragDropOperation_C** OutOperation);
	void GetOptions_Bp(class FString* Options);
	void GetOperationSpawnValue_Bp(class UItem** Item_0, class UEquipableItem** EquipableItem, class UWeaponItem** WeaponItem, class UThrowableItem** ThrowableItem, class UAttachableItem** AttachmentItem, TScriptInterface<class ISlotInterface>* SlotItem, TScriptInterface<class ISlotContainerInterface>* Container);
	void GetInventoryWidget(class UInventoryWidget_C** InventoryWidget_0);
	void GetBackgroundState(float* State);
	bool Up();
	bool SetFocus(bool NewFocus);
	bool Right();
	bool Left();
	bool InputY();
	bool InputX();
	bool InputRT();
	bool InputRB();
	bool InputLT();
	bool InputLB();
	bool InputB();
	bool InputA();
	bool Down();

	bool IsFocus() const;
	class UUserWidget* GetUpWidget() const;
	class UUserWidget* GetRightWidget() const;
	class UUserWidget* GetLeftWidget() const;
	class UUserWidget* GetFocusingChildWidget() const;
	class UUserWidget* GetDownWidget() const;
	bool IsFocusable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InventorySlotBaseWidget_C">();
	}
	static class UInventorySlotBaseWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventorySlotBaseWidget_C>();
	}
};
static_assert(alignof(UInventorySlotBaseWidget_C) == 0x000008, "Wrong alignment on UInventorySlotBaseWidget_C");
static_assert(sizeof(UInventorySlotBaseWidget_C) == 0x0002F0, "Wrong size on UInventorySlotBaseWidget_C");
static_assert(offsetof(UInventorySlotBaseWidget_C, UberGraphFrame_InventorySlotBaseWidget_C) == 0x000250, "Member 'UInventorySlotBaseWidget_C::UberGraphFrame_InventorySlotBaseWidget_C' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, EquipSlotID) == 0x000258, "Member 'UInventorySlotBaseWidget_C::EquipSlotID' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, WeaponSlotIndex) == 0x00025C, "Member 'UInventorySlotBaseWidget_C::WeaponSlotIndex' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotBackground_NormalEmpty) == 0x000260, "Member 'UInventorySlotBaseWidget_C::SlotBackground_NormalEmpty' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotBackground_Normal) == 0x000268, "Member 'UInventorySlotBaseWidget_C::SlotBackground_Normal' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotBackground_On) == 0x000270, "Member 'UInventorySlotBaseWidget_C::SlotBackground_On' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotBackGround_SubOn) == 0x000278, "Member 'UInventorySlotBaseWidget_C::SlotBackGround_SubOn' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotBackground_Over) == 0x000280, "Member 'UInventorySlotBaseWidget_C::SlotBackground_Over' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, bMouseOver) == 0x000288, "Member 'UInventorySlotBaseWidget_C::bMouseOver' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, SlotDynamicMaterial) == 0x000290, "Member 'UInventorySlotBaseWidget_C::SlotDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, TexParm) == 0x000298, "Member 'UInventorySlotBaseWidget_C::TexParm' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, ItemIcon) == 0x0002A0, "Member 'UInventorySlotBaseWidget_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, IconSize) == 0x0002A8, "Member 'UInventorySlotBaseWidget_C::IconSize' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, Equipment) == 0x0002B0, "Member 'UInventorySlotBaseWidget_C::Equipment' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, WeaponProcessor) == 0x0002B8, "Member 'UInventorySlotBaseWidget_C::WeaponProcessor' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, Item) == 0x0002C0, "Member 'UInventorySlotBaseWidget_C::Item' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, TslItemDragDropOperation) == 0x0002C8, "Member 'UInventorySlotBaseWidget_C::TslItemDragDropOperation' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, ToolTipShowDelaytime) == 0x0002D0, "Member 'UInventorySlotBaseWidget_C::ToolTipShowDelaytime' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, InventoryWidget) == 0x0002D8, "Member 'UInventorySlotBaseWidget_C::InventoryWidget' has a wrong offset!");
static_assert(offsetof(UInventorySlotBaseWidget_C, RefreshFocus) == 0x0002E0, "Member 'UInventorySlotBaseWidget_C::RefreshFocus' has a wrong offset!");

}

