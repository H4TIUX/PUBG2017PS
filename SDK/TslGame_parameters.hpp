#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TslGame

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "TslGame_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TslGame.InteractionComponent.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_AllowInteractBy) == 0x000008, "Wrong alignment on InteractionComponent_AllowInteractBy");
static_assert(sizeof(InteractionComponent_AllowInteractBy) == 0x000010, "Wrong size on InteractionComponent_AllowInteractBy");
static_assert(offsetof(InteractionComponent_AllowInteractBy, Character) == 0x000000, "Member 'InteractionComponent_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(InteractionComponent_AllowInteractBy, ReturnValue) == 0x000008, "Member 'InteractionComponent_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.InteractionComponent.GetInteractionVerb
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_GetInteractionVerb final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetInteractionVerb) == 0x000008, "Wrong alignment on InteractionComponent_GetInteractionVerb");
static_assert(sizeof(InteractionComponent_GetInteractionVerb) == 0x000018, "Wrong size on InteractionComponent_GetInteractionVerb");
static_assert(offsetof(InteractionComponent_GetInteractionVerb, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetInteractionVerb::ReturnValue' has a wrong offset!");

// Function TslGame.InteractionComponent.GetInteractiveObjectName
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_GetInteractiveObjectName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetInteractiveObjectName) == 0x000008, "Wrong alignment on InteractionComponent_GetInteractiveObjectName");
static_assert(sizeof(InteractionComponent_GetInteractiveObjectName) == 0x000018, "Wrong size on InteractionComponent_GetInteractiveObjectName");
static_assert(offsetof(InteractionComponent_GetInteractiveObjectName, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetInteractiveObjectName::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.ClientJoinGlobalChannel
// 0x0010 (0x0010 - 0x0000)
struct VivoxBaseComponent_ClientJoinGlobalChannel final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_ClientJoinGlobalChannel) == 0x000008, "Wrong alignment on VivoxBaseComponent_ClientJoinGlobalChannel");
static_assert(sizeof(VivoxBaseComponent_ClientJoinGlobalChannel) == 0x000010, "Wrong size on VivoxBaseComponent_ClientJoinGlobalChannel");
static_assert(offsetof(VivoxBaseComponent_ClientJoinGlobalChannel, AccessToken) == 0x000000, "Member 'VivoxBaseComponent_ClientJoinGlobalChannel::AccessToken' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.ClientJoinTeamChannel
// 0x0010 (0x0010 - 0x0000)
struct VivoxBaseComponent_ClientJoinTeamChannel final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_ClientJoinTeamChannel) == 0x000008, "Wrong alignment on VivoxBaseComponent_ClientJoinTeamChannel");
static_assert(sizeof(VivoxBaseComponent_ClientJoinTeamChannel) == 0x000010, "Wrong size on VivoxBaseComponent_ClientJoinTeamChannel");
static_assert(offsetof(VivoxBaseComponent_ClientJoinTeamChannel, AccessToken) == 0x000000, "Member 'VivoxBaseComponent_ClientJoinTeamChannel::AccessToken' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.ClientLogin
// 0x0010 (0x0010 - 0x0000)
struct VivoxBaseComponent_ClientLogin final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_ClientLogin) == 0x000008, "Wrong alignment on VivoxBaseComponent_ClientLogin");
static_assert(sizeof(VivoxBaseComponent_ClientLogin) == 0x000010, "Wrong size on VivoxBaseComponent_ClientLogin");
static_assert(offsetof(VivoxBaseComponent_ClientLogin, AccessToken) == 0x000000, "Member 'VivoxBaseComponent_ClientLogin::AccessToken' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.SetLocalVoiceInputMuted
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_SetLocalVoiceInputMuted final
{
public:
	bool                                          bIsMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_SetLocalVoiceInputMuted) == 0x000001, "Wrong alignment on VivoxBaseComponent_SetLocalVoiceInputMuted");
static_assert(sizeof(VivoxBaseComponent_SetLocalVoiceInputMuted) == 0x000001, "Wrong size on VivoxBaseComponent_SetLocalVoiceInputMuted");
static_assert(offsetof(VivoxBaseComponent_SetLocalVoiceInputMuted, bIsMuted) == 0x000000, "Member 'VivoxBaseComponent_SetLocalVoiceInputMuted::bIsMuted' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.SetLocalVoiceInputVolume
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_SetLocalVoiceInputVolume final
{
public:
	int32                                         UserSettingVolume;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_SetLocalVoiceInputVolume) == 0x000004, "Wrong alignment on VivoxBaseComponent_SetLocalVoiceInputVolume");
static_assert(sizeof(VivoxBaseComponent_SetLocalVoiceInputVolume) == 0x000004, "Wrong size on VivoxBaseComponent_SetLocalVoiceInputVolume");
static_assert(offsetof(VivoxBaseComponent_SetLocalVoiceInputVolume, UserSettingVolume) == 0x000000, "Member 'VivoxBaseComponent_SetLocalVoiceInputVolume::UserSettingVolume' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.SetLocalVoiceOutputMuted
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_SetLocalVoiceOutputMuted final
{
public:
	bool                                          bIsMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_SetLocalVoiceOutputMuted) == 0x000001, "Wrong alignment on VivoxBaseComponent_SetLocalVoiceOutputMuted");
static_assert(sizeof(VivoxBaseComponent_SetLocalVoiceOutputMuted) == 0x000001, "Wrong size on VivoxBaseComponent_SetLocalVoiceOutputMuted");
static_assert(offsetof(VivoxBaseComponent_SetLocalVoiceOutputMuted, bIsMuted) == 0x000000, "Member 'VivoxBaseComponent_SetLocalVoiceOutputMuted::bIsMuted' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.SetLocalVoiceOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_SetLocalVoiceOutputVolume final
{
public:
	int32                                         UserSettingVolume;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_SetLocalVoiceOutputVolume) == 0x000004, "Wrong alignment on VivoxBaseComponent_SetLocalVoiceOutputVolume");
static_assert(sizeof(VivoxBaseComponent_SetLocalVoiceOutputVolume) == 0x000004, "Wrong size on VivoxBaseComponent_SetLocalVoiceOutputVolume");
static_assert(offsetof(VivoxBaseComponent_SetLocalVoiceOutputVolume, UserSettingVolume) == 0x000000, "Member 'VivoxBaseComponent_SetLocalVoiceOutputVolume::UserSettingVolume' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.SetVoiceChannelType
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_SetVoiceChannelType final
{
public:
	EVivoxChannelType                             ChannelType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_SetVoiceChannelType) == 0x000001, "Wrong alignment on VivoxBaseComponent_SetVoiceChannelType");
static_assert(sizeof(VivoxBaseComponent_SetVoiceChannelType) == 0x000001, "Wrong size on VivoxBaseComponent_SetVoiceChannelType");
static_assert(offsetof(VivoxBaseComponent_SetVoiceChannelType, ChannelType) == 0x000000, "Member 'VivoxBaseComponent_SetVoiceChannelType::ChannelType' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.CalculateInputVolumeFromModifiers
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_CalculateInputVolumeFromModifiers final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_CalculateInputVolumeFromModifiers) == 0x000004, "Wrong alignment on VivoxBaseComponent_CalculateInputVolumeFromModifiers");
static_assert(sizeof(VivoxBaseComponent_CalculateInputVolumeFromModifiers) == 0x000004, "Wrong size on VivoxBaseComponent_CalculateInputVolumeFromModifiers");
static_assert(offsetof(VivoxBaseComponent_CalculateInputVolumeFromModifiers, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_CalculateInputVolumeFromModifiers::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.CalculateOutputVolumeFromModifiers
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_CalculateOutputVolumeFromModifiers final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_CalculateOutputVolumeFromModifiers) == 0x000004, "Wrong alignment on VivoxBaseComponent_CalculateOutputVolumeFromModifiers");
static_assert(sizeof(VivoxBaseComponent_CalculateOutputVolumeFromModifiers) == 0x000004, "Wrong size on VivoxBaseComponent_CalculateOutputVolumeFromModifiers");
static_assert(offsetof(VivoxBaseComponent_CalculateOutputVolumeFromModifiers, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_CalculateOutputVolumeFromModifiers::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.GetLocalVoiceInputMuted
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_GetLocalVoiceInputMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_GetLocalVoiceInputMuted) == 0x000001, "Wrong alignment on VivoxBaseComponent_GetLocalVoiceInputMuted");
static_assert(sizeof(VivoxBaseComponent_GetLocalVoiceInputMuted) == 0x000001, "Wrong size on VivoxBaseComponent_GetLocalVoiceInputMuted");
static_assert(offsetof(VivoxBaseComponent_GetLocalVoiceInputMuted, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_GetLocalVoiceInputMuted::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.GetLocalVoiceInputVolume
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_GetLocalVoiceInputVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_GetLocalVoiceInputVolume) == 0x000004, "Wrong alignment on VivoxBaseComponent_GetLocalVoiceInputVolume");
static_assert(sizeof(VivoxBaseComponent_GetLocalVoiceInputVolume) == 0x000004, "Wrong size on VivoxBaseComponent_GetLocalVoiceInputVolume");
static_assert(offsetof(VivoxBaseComponent_GetLocalVoiceInputVolume, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_GetLocalVoiceInputVolume::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.GetLocalVoiceOutputMuted
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_GetLocalVoiceOutputMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_GetLocalVoiceOutputMuted) == 0x000001, "Wrong alignment on VivoxBaseComponent_GetLocalVoiceOutputMuted");
static_assert(sizeof(VivoxBaseComponent_GetLocalVoiceOutputMuted) == 0x000001, "Wrong size on VivoxBaseComponent_GetLocalVoiceOutputMuted");
static_assert(offsetof(VivoxBaseComponent_GetLocalVoiceOutputMuted, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_GetLocalVoiceOutputMuted::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.GetLocalVoiceOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct VivoxBaseComponent_GetLocalVoiceOutputVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_GetLocalVoiceOutputVolume) == 0x000004, "Wrong alignment on VivoxBaseComponent_GetLocalVoiceOutputVolume");
static_assert(sizeof(VivoxBaseComponent_GetLocalVoiceOutputVolume) == 0x000004, "Wrong size on VivoxBaseComponent_GetLocalVoiceOutputVolume");
static_assert(offsetof(VivoxBaseComponent_GetLocalVoiceOutputVolume, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_GetLocalVoiceOutputVolume::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxBaseComponent.GetVoiceChannelType
// 0x0001 (0x0001 - 0x0000)
struct VivoxBaseComponent_GetVoiceChannelType final
{
public:
	EVivoxChannelType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxBaseComponent_GetVoiceChannelType) == 0x000001, "Wrong alignment on VivoxBaseComponent_GetVoiceChannelType");
static_assert(sizeof(VivoxBaseComponent_GetVoiceChannelType) == 0x000001, "Wrong size on VivoxBaseComponent_GetVoiceChannelType");
static_assert(offsetof(VivoxBaseComponent_GetVoiceChannelType, ReturnValue) == 0x000000, "Member 'VivoxBaseComponent_GetVoiceChannelType::ReturnValue' has a wrong offset!");

// Function TslGame.AnimDB.GetAnimSpeed
// 0x0018 (0x0018 - 0x0000)
struct AnimDB_GetAnimSpeed final
{
public:
	EAnimStanceType                               AnimStance;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintAlpha;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimDB_GetAnimSpeed) == 0x000004, "Wrong alignment on AnimDB_GetAnimSpeed");
static_assert(sizeof(AnimDB_GetAnimSpeed) == 0x000018, "Wrong size on AnimDB_GetAnimSpeed");
static_assert(offsetof(AnimDB_GetAnimSpeed, AnimStance) == 0x000000, "Member 'AnimDB_GetAnimSpeed::AnimStance' has a wrong offset!");
static_assert(offsetof(AnimDB_GetAnimSpeed, Direction) == 0x000004, "Member 'AnimDB_GetAnimSpeed::Direction' has a wrong offset!");
static_assert(offsetof(AnimDB_GetAnimSpeed, InSpeed) == 0x000008, "Member 'AnimDB_GetAnimSpeed::InSpeed' has a wrong offset!");
static_assert(offsetof(AnimDB_GetAnimSpeed, PlayRate) == 0x00000C, "Member 'AnimDB_GetAnimSpeed::PlayRate' has a wrong offset!");
static_assert(offsetof(AnimDB_GetAnimSpeed, SprintAlpha) == 0x000010, "Member 'AnimDB_GetAnimSpeed::SprintAlpha' has a wrong offset!");
static_assert(offsetof(AnimDB_GetAnimSpeed, ReturnValue) == 0x000014, "Member 'AnimDB_GetAnimSpeed::ReturnValue' has a wrong offset!");

// Function TslGame.AnimDB.GetBlendSpace
// 0x0010 (0x0010 - 0x0000)
struct AnimDB_GetBlendSpace final
{
public:
	EAnimStanceType                               AnimStance;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFPP;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimDB_GetBlendSpace) == 0x000008, "Wrong alignment on AnimDB_GetBlendSpace");
static_assert(sizeof(AnimDB_GetBlendSpace) == 0x000010, "Wrong size on AnimDB_GetBlendSpace");
static_assert(offsetof(AnimDB_GetBlendSpace, AnimStance) == 0x000000, "Member 'AnimDB_GetBlendSpace::AnimStance' has a wrong offset!");
static_assert(offsetof(AnimDB_GetBlendSpace, bIsFPP) == 0x000001, "Member 'AnimDB_GetBlendSpace::bIsFPP' has a wrong offset!");
static_assert(offsetof(AnimDB_GetBlendSpace, ReturnValue) == 0x000008, "Member 'AnimDB_GetBlendSpace::ReturnValue' has a wrong offset!");

// Function TslGame.AnimDB.GetBlendSpaceRelaxed
// 0x0010 (0x0010 - 0x0000)
struct AnimDB_GetBlendSpaceRelaxed final
{
public:
	EAnimStanceType                               AnimStance;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFPP;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimDB_GetBlendSpaceRelaxed) == 0x000008, "Wrong alignment on AnimDB_GetBlendSpaceRelaxed");
static_assert(sizeof(AnimDB_GetBlendSpaceRelaxed) == 0x000010, "Wrong size on AnimDB_GetBlendSpaceRelaxed");
static_assert(offsetof(AnimDB_GetBlendSpaceRelaxed, AnimStance) == 0x000000, "Member 'AnimDB_GetBlendSpaceRelaxed::AnimStance' has a wrong offset!");
static_assert(offsetof(AnimDB_GetBlendSpaceRelaxed, bIsFPP) == 0x000001, "Member 'AnimDB_GetBlendSpaceRelaxed::bIsFPP' has a wrong offset!");
static_assert(offsetof(AnimDB_GetBlendSpaceRelaxed, ReturnValue) == 0x000008, "Member 'AnimDB_GetBlendSpaceRelaxed::ReturnValue' has a wrong offset!");

// Function TslGame.FlashBangCaptureActor.CaptureINIT
// 0x0510 (0x0510 - 0x0000)
struct FlashBangCaptureActor_CaptureINIT final
{
public:
	bool                                          bDoDelay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureDelay;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PlayerRef;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTexture;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PP_Settings;                                       // 0x0020(0x04E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHidePawn;                                         // 0x0500(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_501[0xF];                                      // 0x0501(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlashBangCaptureActor_CaptureINIT) == 0x000010, "Wrong alignment on FlashBangCaptureActor_CaptureINIT");
static_assert(sizeof(FlashBangCaptureActor_CaptureINIT) == 0x000510, "Wrong size on FlashBangCaptureActor_CaptureINIT");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, bDoDelay) == 0x000000, "Member 'FlashBangCaptureActor_CaptureINIT::bDoDelay' has a wrong offset!");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, CaptureDelay) == 0x000004, "Member 'FlashBangCaptureActor_CaptureINIT::CaptureDelay' has a wrong offset!");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, PlayerRef) == 0x000008, "Member 'FlashBangCaptureActor_CaptureINIT::PlayerRef' has a wrong offset!");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, RenderTexture) == 0x000010, "Member 'FlashBangCaptureActor_CaptureINIT::RenderTexture' has a wrong offset!");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, PP_Settings) == 0x000020, "Member 'FlashBangCaptureActor_CaptureINIT::PP_Settings' has a wrong offset!");
static_assert(offsetof(FlashBangCaptureActor_CaptureINIT, bHidePawn) == 0x000500, "Member 'FlashBangCaptureActor_CaptureINIT::bHidePawn' has a wrong offset!");

// Function TslGame.VehicleSeatActor.AllowInteract
// 0x0010 (0x0010 - 0x0000)
struct VehicleSeatActor_AllowInteract final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSeatActor_AllowInteract) == 0x000008, "Wrong alignment on VehicleSeatActor_AllowInteract");
static_assert(sizeof(VehicleSeatActor_AllowInteract) == 0x000010, "Wrong size on VehicleSeatActor_AllowInteract");
static_assert(offsetof(VehicleSeatActor_AllowInteract, OtherCharacter) == 0x000000, "Member 'VehicleSeatActor_AllowInteract::OtherCharacter' has a wrong offset!");
static_assert(offsetof(VehicleSeatActor_AllowInteract, ReturnValue) == 0x000008, "Member 'VehicleSeatActor_AllowInteract::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetAdditionalMessage
// 0x0020 (0x0020 - 0x0000)
struct VehicleSeatActor_GetAdditionalMessage final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetAdditionalMessage) == 0x000008, "Wrong alignment on VehicleSeatActor_GetAdditionalMessage");
static_assert(sizeof(VehicleSeatActor_GetAdditionalMessage) == 0x000020, "Wrong size on VehicleSeatActor_GetAdditionalMessage");
static_assert(offsetof(VehicleSeatActor_GetAdditionalMessage, Character) == 0x000000, "Member 'VehicleSeatActor_GetAdditionalMessage::Character' has a wrong offset!");
static_assert(offsetof(VehicleSeatActor_GetAdditionalMessage, ReturnValue) == 0x000008, "Member 'VehicleSeatActor_GetAdditionalMessage::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetMaxPitchByYaw
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetMaxPitchByYaw final
{
public:
	float                                         CurrentYaw;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetMaxPitchByYaw) == 0x000004, "Wrong alignment on VehicleSeatActor_GetMaxPitchByYaw");
static_assert(sizeof(VehicleSeatActor_GetMaxPitchByYaw) == 0x000008, "Wrong size on VehicleSeatActor_GetMaxPitchByYaw");
static_assert(offsetof(VehicleSeatActor_GetMaxPitchByYaw, CurrentYaw) == 0x000000, "Member 'VehicleSeatActor_GetMaxPitchByYaw::CurrentYaw' has a wrong offset!");
static_assert(offsetof(VehicleSeatActor_GetMaxPitchByYaw, ReturnValue) == 0x000004, "Member 'VehicleSeatActor_GetMaxPitchByYaw::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetMinPitchByYaw
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetMinPitchByYaw final
{
public:
	float                                         CurrentYaw;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetMinPitchByYaw) == 0x000004, "Wrong alignment on VehicleSeatActor_GetMinPitchByYaw");
static_assert(sizeof(VehicleSeatActor_GetMinPitchByYaw) == 0x000008, "Wrong size on VehicleSeatActor_GetMinPitchByYaw");
static_assert(offsetof(VehicleSeatActor_GetMinPitchByYaw, CurrentYaw) == 0x000000, "Member 'VehicleSeatActor_GetMinPitchByYaw::CurrentYaw' has a wrong offset!");
static_assert(offsetof(VehicleSeatActor_GetMinPitchByYaw, ReturnValue) == 0x000004, "Member 'VehicleSeatActor_GetMinPitchByYaw::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetCanFireOnlyWhileAimed
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatActor_GetCanFireOnlyWhileAimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetCanFireOnlyWhileAimed) == 0x000001, "Wrong alignment on VehicleSeatActor_GetCanFireOnlyWhileAimed");
static_assert(sizeof(VehicleSeatActor_GetCanFireOnlyWhileAimed) == 0x000001, "Wrong size on VehicleSeatActor_GetCanFireOnlyWhileAimed");
static_assert(offsetof(VehicleSeatActor_GetCanFireOnlyWhileAimed, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetCanFireOnlyWhileAimed::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetRider
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetRider final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetRider) == 0x000008, "Wrong alignment on VehicleSeatActor_GetRider");
static_assert(sizeof(VehicleSeatActor_GetRider) == 0x000008, "Wrong size on VehicleSeatActor_GetRider");
static_assert(offsetof(VehicleSeatActor_GetRider, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetRider::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetSeatAimingBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetSeatAimingBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetSeatAimingBlendspace) == 0x000008, "Wrong alignment on VehicleSeatActor_GetSeatAimingBlendspace");
static_assert(sizeof(VehicleSeatActor_GetSeatAimingBlendspace) == 0x000008, "Wrong size on VehicleSeatActor_GetSeatAimingBlendspace");
static_assert(offsetof(VehicleSeatActor_GetSeatAimingBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetSeatAimingBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetSeatIdleAnimation
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetSeatIdleAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetSeatIdleAnimation) == 0x000008, "Wrong alignment on VehicleSeatActor_GetSeatIdleAnimation");
static_assert(sizeof(VehicleSeatActor_GetSeatIdleAnimation) == 0x000008, "Wrong size on VehicleSeatActor_GetSeatIdleAnimation");
static_assert(offsetof(VehicleSeatActor_GetSeatIdleAnimation, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetSeatIdleAnimation::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetSeatIdleAO
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetSeatIdleAO final
{
public:
	class UAimOffsetBlendSpace*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetSeatIdleAO) == 0x000008, "Wrong alignment on VehicleSeatActor_GetSeatIdleAO");
static_assert(sizeof(VehicleSeatActor_GetSeatIdleAO) == 0x000008, "Wrong size on VehicleSeatActor_GetSeatIdleAO");
static_assert(offsetof(VehicleSeatActor_GetSeatIdleAO, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetSeatIdleAO::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetTransitionInBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetTransitionInBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetTransitionInBlendspace) == 0x000008, "Wrong alignment on VehicleSeatActor_GetTransitionInBlendspace");
static_assert(sizeof(VehicleSeatActor_GetTransitionInBlendspace) == 0x000008, "Wrong size on VehicleSeatActor_GetTransitionInBlendspace");
static_assert(offsetof(VehicleSeatActor_GetTransitionInBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetTransitionInBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetTransitionOutBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetTransitionOutBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetTransitionOutBlendspace) == 0x000008, "Wrong alignment on VehicleSeatActor_GetTransitionOutBlendspace");
static_assert(sizeof(VehicleSeatActor_GetTransitionOutBlendspace) == 0x000008, "Wrong size on VehicleSeatActor_GetTransitionOutBlendspace");
static_assert(offsetof(VehicleSeatActor_GetTransitionOutBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetTransitionOutBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetVehicleAnimType
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatActor_GetVehicleAnimType final
{
public:
	EVehicleAnimType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetVehicleAnimType) == 0x000001, "Wrong alignment on VehicleSeatActor_GetVehicleAnimType");
static_assert(sizeof(VehicleSeatActor_GetVehicleAnimType) == 0x000001, "Wrong size on VehicleSeatActor_GetVehicleAnimType");
static_assert(offsetof(VehicleSeatActor_GetVehicleAnimType, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetVehicleAnimType::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetVehicleInterface
// 0x0010 (0x0010 - 0x0000)
struct VehicleSeatActor_GetVehicleInterface final
{
public:
	TScriptInterface<class ITslVehicleInterface>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetVehicleInterface) == 0x000008, "Wrong alignment on VehicleSeatActor_GetVehicleInterface");
static_assert(sizeof(VehicleSeatActor_GetVehicleInterface) == 0x000010, "Wrong size on VehicleSeatActor_GetVehicleInterface");
static_assert(offsetof(VehicleSeatActor_GetVehicleInterface, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetVehicleInterface::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetVehiclePawn
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetVehiclePawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetVehiclePawn) == 0x000008, "Wrong alignment on VehicleSeatActor_GetVehiclePawn");
static_assert(sizeof(VehicleSeatActor_GetVehiclePawn) == 0x000008, "Wrong size on VehicleSeatActor_GetVehiclePawn");
static_assert(offsetof(VehicleSeatActor_GetVehiclePawn, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetVehiclePawn::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.GetVehicleSeatComponent
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatActor_GetVehicleSeatComponent final
{
public:
	class UTslVehicleSeatComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_GetVehicleSeatComponent) == 0x000008, "Wrong alignment on VehicleSeatActor_GetVehicleSeatComponent");
static_assert(sizeof(VehicleSeatActor_GetVehicleSeatComponent) == 0x000008, "Wrong size on VehicleSeatActor_GetVehicleSeatComponent");
static_assert(offsetof(VehicleSeatActor_GetVehicleSeatComponent, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_GetVehicleSeatComponent::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.IsEntryAllowedByVelocity
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatActor_IsEntryAllowedByVelocity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_IsEntryAllowedByVelocity) == 0x000001, "Wrong alignment on VehicleSeatActor_IsEntryAllowedByVelocity");
static_assert(sizeof(VehicleSeatActor_IsEntryAllowedByVelocity) == 0x000001, "Wrong size on VehicleSeatActor_IsEntryAllowedByVelocity");
static_assert(offsetof(VehicleSeatActor_IsEntryAllowedByVelocity, ReturnValue) == 0x000000, "Member 'VehicleSeatActor_IsEntryAllowedByVelocity::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatActor.IsWeaponClassAllowed
// 0x0002 (0x0002 - 0x0000)
struct VehicleSeatActor_IsWeaponClassAllowed final
{
public:
	EWeaponClass                                  InClass;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatActor_IsWeaponClassAllowed) == 0x000001, "Wrong alignment on VehicleSeatActor_IsWeaponClassAllowed");
static_assert(sizeof(VehicleSeatActor_IsWeaponClassAllowed) == 0x000002, "Wrong size on VehicleSeatActor_IsWeaponClassAllowed");
static_assert(offsetof(VehicleSeatActor_IsWeaponClassAllowed, InClass) == 0x000000, "Member 'VehicleSeatActor_IsWeaponClassAllowed::InClass' has a wrong offset!");
static_assert(offsetof(VehicleSeatActor_IsWeaponClassAllowed, ReturnValue) == 0x000001, "Member 'VehicleSeatActor_IsWeaponClassAllowed::ReturnValue' has a wrong offset!");

// Function TslGame.TslPopupInterface.SetPopup
// 0x0030 (0x0030 - 0x0000)
struct TslPopupInterface_SetPopup final
{
public:
	EPopupStyle                                   PopupStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EPopupButtonID ButtonID)>      PressedDelegate;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPopupInterface_SetPopup) == 0x000008, "Wrong alignment on TslPopupInterface_SetPopup");
static_assert(sizeof(TslPopupInterface_SetPopup) == 0x000030, "Wrong size on TslPopupInterface_SetPopup");
static_assert(offsetof(TslPopupInterface_SetPopup, PopupStyle) == 0x000000, "Member 'TslPopupInterface_SetPopup::PopupStyle' has a wrong offset!");
static_assert(offsetof(TslPopupInterface_SetPopup, Message) == 0x000008, "Member 'TslPopupInterface_SetPopup::Message' has a wrong offset!");
static_assert(offsetof(TslPopupInterface_SetPopup, PressedDelegate) == 0x000020, "Member 'TslPopupInterface_SetPopup::PressedDelegate' has a wrong offset!");

// Function TslGame.HackReporterComponent.ServerOnWallHackDetected
// 0x0004 (0x0004 - 0x0000)
struct HackReporterComponent_ServerOnWallHackDetected final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HackReporterComponent_ServerOnWallHackDetected) == 0x000004, "Wrong alignment on HackReporterComponent_ServerOnWallHackDetected");
static_assert(sizeof(HackReporterComponent_ServerOnWallHackDetected) == 0x000004, "Wrong size on HackReporterComponent_ServerOnWallHackDetected");
static_assert(offsetof(HackReporterComponent_ServerOnWallHackDetected, Distance) == 0x000000, "Member 'HackReporterComponent_ServerOnWallHackDetected::Distance' has a wrong offset!");

// Function TslGame.TslBaseHUD.BindActionKeyDelegateEvent
// 0x0020 (0x0020 - 0x0000)
struct TslBaseHUD_BindActionKeyDelegateEvent final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             ActionKeyDelegate;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_BindActionKeyDelegateEvent) == 0x000004, "Wrong alignment on TslBaseHUD_BindActionKeyDelegateEvent");
static_assert(sizeof(TslBaseHUD_BindActionKeyDelegateEvent) == 0x000020, "Wrong size on TslBaseHUD_BindActionKeyDelegateEvent");
static_assert(offsetof(TslBaseHUD_BindActionKeyDelegateEvent, ActionName) == 0x000000, "Member 'TslBaseHUD_BindActionKeyDelegateEvent::ActionName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_BindActionKeyDelegateEvent, InputEvent) == 0x000008, "Member 'TslBaseHUD_BindActionKeyDelegateEvent::InputEvent' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_BindActionKeyDelegateEvent, ActionKeyDelegate) == 0x000010, "Member 'TslBaseHUD_BindActionKeyDelegateEvent::ActionKeyDelegate' has a wrong offset!");

// Function TslGame.TslBaseHUD.GetMainUMGHud
// 0x0008 (0x0008 - 0x0000)
struct TslBaseHUD_GetMainUMGHud final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_GetMainUMGHud) == 0x000008, "Wrong alignment on TslBaseHUD_GetMainUMGHud");
static_assert(sizeof(TslBaseHUD_GetMainUMGHud) == 0x000008, "Wrong size on TslBaseHUD_GetMainUMGHud");
static_assert(offsetof(TslBaseHUD_GetMainUMGHud, ReturnValue) == 0x000000, "Member 'TslBaseHUD_GetMainUMGHud::ReturnValue' has a wrong offset!");

// Function TslGame.TslBaseHUD.HidePopupDialog
// 0x0010 (0x0010 - 0x0000)
struct TslBaseHUD_HidePopupDialog final
{
public:
	class FString                                 PopupWidgetName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_HidePopupDialog) == 0x000008, "Wrong alignment on TslBaseHUD_HidePopupDialog");
static_assert(sizeof(TslBaseHUD_HidePopupDialog) == 0x000010, "Wrong size on TslBaseHUD_HidePopupDialog");
static_assert(offsetof(TslBaseHUD_HidePopupDialog, PopupWidgetName) == 0x000000, "Member 'TslBaseHUD_HidePopupDialog::PopupWidgetName' has a wrong offset!");

// Function TslGame.TslBaseHUD.HideWidgetByEscape
// 0x0001 (0x0001 - 0x0000)
struct TslBaseHUD_HideWidgetByEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_HideWidgetByEscape) == 0x000001, "Wrong alignment on TslBaseHUD_HideWidgetByEscape");
static_assert(sizeof(TslBaseHUD_HideWidgetByEscape) == 0x000001, "Wrong size on TslBaseHUD_HideWidgetByEscape");
static_assert(offsetof(TslBaseHUD_HideWidgetByEscape, ReturnValue) == 0x000000, "Member 'TslBaseHUD_HideWidgetByEscape::ReturnValue' has a wrong offset!");

// Function TslGame.TslBaseHUD.ShowPopupDialog
// 0x0040 (0x0040 - 0x0000)
struct TslBaseHUD_ShowPopupDialog final
{
public:
	class FString                                 PopupWidgetName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupStyle                                   PopupStyle;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(EPopupButtonID ButtonID)>      PressedDelegate;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_ShowPopupDialog) == 0x000008, "Wrong alignment on TslBaseHUD_ShowPopupDialog");
static_assert(sizeof(TslBaseHUD_ShowPopupDialog) == 0x000040, "Wrong size on TslBaseHUD_ShowPopupDialog");
static_assert(offsetof(TslBaseHUD_ShowPopupDialog, PopupWidgetName) == 0x000000, "Member 'TslBaseHUD_ShowPopupDialog::PopupWidgetName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_ShowPopupDialog, PopupStyle) == 0x000010, "Member 'TslBaseHUD_ShowPopupDialog::PopupStyle' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_ShowPopupDialog, Message) == 0x000018, "Member 'TslBaseHUD_ShowPopupDialog::Message' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_ShowPopupDialog, PressedDelegate) == 0x000030, "Member 'TslBaseHUD_ShowPopupDialog::PressedDelegate' has a wrong offset!");

// Function TslGame.TslBaseHUD.UnbindActionKeyDelegateEvent
// 0x0010 (0x0010 - 0x0000)
struct TslBaseHUD_UnbindActionKeyDelegateEvent final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslBaseHUD_UnbindActionKeyDelegateEvent) == 0x000004, "Wrong alignment on TslBaseHUD_UnbindActionKeyDelegateEvent");
static_assert(sizeof(TslBaseHUD_UnbindActionKeyDelegateEvent) == 0x000010, "Wrong size on TslBaseHUD_UnbindActionKeyDelegateEvent");
static_assert(offsetof(TslBaseHUD_UnbindActionKeyDelegateEvent, ActionName) == 0x000000, "Member 'TslBaseHUD_UnbindActionKeyDelegateEvent::ActionName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_UnbindActionKeyDelegateEvent, InputEvent) == 0x000008, "Member 'TslBaseHUD_UnbindActionKeyDelegateEvent::InputEvent' has a wrong offset!");

// Function TslGame.TslBaseHUD.WidgetCreate
// 0x0020 (0x0020 - 0x0000)
struct TslBaseHUD_WidgetCreate final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTslWidgetConfig                       Config;                                            // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_WidgetCreate) == 0x000008, "Wrong alignment on TslBaseHUD_WidgetCreate");
static_assert(sizeof(TslBaseHUD_WidgetCreate) == 0x000020, "Wrong size on TslBaseHUD_WidgetCreate");
static_assert(offsetof(TslBaseHUD_WidgetCreate, WidgetName) == 0x000000, "Member 'TslBaseHUD_WidgetCreate::WidgetName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_WidgetCreate, Config) == 0x000010, "Member 'TslBaseHUD_WidgetCreate::Config' has a wrong offset!");

// Function TslGame.TslBaseHUD.WidgetShow
// 0x0020 (0x0020 - 0x0000)
struct TslBaseHUD_WidgetShow final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetShowType                               ShowType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalParam;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_WidgetShow) == 0x000008, "Wrong alignment on TslBaseHUD_WidgetShow");
static_assert(sizeof(TslBaseHUD_WidgetShow) == 0x000020, "Wrong size on TslBaseHUD_WidgetShow");
static_assert(offsetof(TslBaseHUD_WidgetShow, WidgetName) == 0x000000, "Member 'TslBaseHUD_WidgetShow::WidgetName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_WidgetShow, ShowType) == 0x000010, "Member 'TslBaseHUD_WidgetShow::ShowType' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_WidgetShow, OptionalParam) == 0x000018, "Member 'TslBaseHUD_WidgetShow::OptionalParam' has a wrong offset!");

// Function TslGame.TslBaseHUD.WidgetToggle
// 0x0010 (0x0010 - 0x0000)
struct TslBaseHUD_WidgetToggle final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_WidgetToggle) == 0x000008, "Wrong alignment on TslBaseHUD_WidgetToggle");
static_assert(sizeof(TslBaseHUD_WidgetToggle) == 0x000010, "Wrong size on TslBaseHUD_WidgetToggle");
static_assert(offsetof(TslBaseHUD_WidgetToggle, WidgetName) == 0x000000, "Member 'TslBaseHUD_WidgetToggle::WidgetName' has a wrong offset!");

// Function TslGame.TslBaseHUD.GetWidget
// 0x0018 (0x0018 - 0x0000)
struct TslBaseHUD_GetWidget final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseHUD_GetWidget) == 0x000008, "Wrong alignment on TslBaseHUD_GetWidget");
static_assert(sizeof(TslBaseHUD_GetWidget) == 0x000018, "Wrong size on TslBaseHUD_GetWidget");
static_assert(offsetof(TslBaseHUD_GetWidget, WidgetName) == 0x000000, "Member 'TslBaseHUD_GetWidget::WidgetName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_GetWidget, ReturnValue) == 0x000010, "Member 'TslBaseHUD_GetWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslBaseHUD.IsWidgetShow
// 0x0018 (0x0018 - 0x0000)
struct TslBaseHUD_IsWidgetShow final
{
public:
	class FString                                 WidgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslBaseHUD_IsWidgetShow) == 0x000008, "Wrong alignment on TslBaseHUD_IsWidgetShow");
static_assert(sizeof(TslBaseHUD_IsWidgetShow) == 0x000018, "Wrong size on TslBaseHUD_IsWidgetShow");
static_assert(offsetof(TslBaseHUD_IsWidgetShow, WidgetName) == 0x000000, "Member 'TslBaseHUD_IsWidgetShow::WidgetName' has a wrong offset!");
static_assert(offsetof(TslBaseHUD_IsWidgetShow, ReturnValue) == 0x000010, "Member 'TslBaseHUD_IsWidgetShow::ReturnValue' has a wrong offset!");

// Function TslGame.HighlightSession.Die
// 0x0001 (0x0001 - 0x0000)
struct HighlightSession_Die final
{
public:
	bool                                          bGroggy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightSession_Die) == 0x000001, "Wrong alignment on HighlightSession_Die");
static_assert(sizeof(HighlightSession_Die) == 0x000001, "Wrong size on HighlightSession_Die");
static_assert(offsetof(HighlightSession_Die, bGroggy) == 0x000000, "Member 'HighlightSession_Die::bGroggy' has a wrong offset!");

// Function TslGame.HighlightSession.KillOtherPlayer
// 0x0001 (0x0001 - 0x0000)
struct HighlightSession_KillOtherPlayer final
{
public:
	bool                                          bGroggy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightSession_KillOtherPlayer) == 0x000001, "Wrong alignment on HighlightSession_KillOtherPlayer");
static_assert(sizeof(HighlightSession_KillOtherPlayer) == 0x000001, "Wrong size on HighlightSession_KillOtherPlayer");
static_assert(offsetof(HighlightSession_KillOtherPlayer, bGroggy) == 0x000000, "Member 'HighlightSession_KillOtherPlayer::bGroggy' has a wrong offset!");

// Function TslGame.DroppedItemActorComponent.AllowInteractDelegate
// 0x0010 (0x0010 - 0x0000)
struct DroppedItemActorComponent_AllowInteractDelegate final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DroppedItemActorComponent_AllowInteractDelegate) == 0x000008, "Wrong alignment on DroppedItemActorComponent_AllowInteractDelegate");
static_assert(sizeof(DroppedItemActorComponent_AllowInteractDelegate) == 0x000010, "Wrong size on DroppedItemActorComponent_AllowInteractDelegate");
static_assert(offsetof(DroppedItemActorComponent_AllowInteractDelegate, OtherCharacter) == 0x000000, "Member 'DroppedItemActorComponent_AllowInteractDelegate::OtherCharacter' has a wrong offset!");
static_assert(offsetof(DroppedItemActorComponent_AllowInteractDelegate, ReturnValue) == 0x000008, "Member 'DroppedItemActorComponent_AllowInteractDelegate::ReturnValue' has a wrong offset!");

// Function TslGame.DroppedItemActorComponent.OnInteractDelegate
// 0x0008 (0x0008 - 0x0000)
struct DroppedItemActorComponent_OnInteractDelegate final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedItemActorComponent_OnInteractDelegate) == 0x000008, "Wrong alignment on DroppedItemActorComponent_OnInteractDelegate");
static_assert(sizeof(DroppedItemActorComponent_OnInteractDelegate) == 0x000008, "Wrong size on DroppedItemActorComponent_OnInteractDelegate");
static_assert(offsetof(DroppedItemActorComponent_OnInteractDelegate, OtherCharacter) == 0x000000, "Member 'DroppedItemActorComponent_OnInteractDelegate::OtherCharacter' has a wrong offset!");

// Function TslGame.Item.GetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct Item_GetIconTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetIconTexture) == 0x000008, "Wrong alignment on Item_GetIconTexture");
static_assert(sizeof(Item_GetIconTexture) == 0x000008, "Wrong size on Item_GetIconTexture");
static_assert(offsetof(Item_GetIconTexture, ReturnValue) == 0x000000, "Member 'Item_GetIconTexture::ReturnValue' has a wrong offset!");

// Function TslGame.Item.PickUpBy
// 0x0028 (0x0028 - 0x0000)
struct Item_PickUpBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   TargetContainer;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Item_PickUpBy) == 0x000008, "Wrong alignment on Item_PickUpBy");
static_assert(sizeof(Item_PickUpBy) == 0x000028, "Wrong size on Item_PickUpBy");
static_assert(offsetof(Item_PickUpBy, Character) == 0x000000, "Member 'Item_PickUpBy::Character' has a wrong offset!");
static_assert(offsetof(Item_PickUpBy, TargetContainer) == 0x000008, "Member 'Item_PickUpBy::TargetContainer' has a wrong offset!");
static_assert(offsetof(Item_PickUpBy, Options) == 0x000010, "Member 'Item_PickUpBy::Options' has a wrong offset!");
static_assert(offsetof(Item_PickUpBy, ReturnValue) == 0x000020, "Member 'Item_PickUpBy::ReturnValue' has a wrong offset!");

// Function TslGame.Item.UseBy
// 0x0010 (0x0010 - 0x0000)
struct Item_UseBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Item_UseBy) == 0x000008, "Wrong alignment on Item_UseBy");
static_assert(sizeof(Item_UseBy) == 0x000010, "Wrong size on Item_UseBy");
static_assert(offsetof(Item_UseBy, Character) == 0x000000, "Member 'Item_UseBy::Character' has a wrong offset!");
static_assert(offsetof(Item_UseBy, ReturnValue) == 0x000008, "Member 'Item_UseBy::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsAttachment
// 0x0001 (0x0001 - 0x0000)
struct Item_IsAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsAttachment) == 0x000001, "Wrong alignment on Item_IsAttachment");
static_assert(sizeof(Item_IsAttachment) == 0x000001, "Wrong size on Item_IsAttachment");
static_assert(offsetof(Item_IsAttachment, ReturnValue) == 0x000000, "Member 'Item_IsAttachment::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsCastableItem
// 0x0001 (0x0001 - 0x0000)
struct Item_IsCastableItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsCastableItem) == 0x000001, "Wrong alignment on Item_IsCastableItem");
static_assert(sizeof(Item_IsCastableItem) == 0x000001, "Wrong size on Item_IsCastableItem");
static_assert(offsetof(Item_IsCastableItem, ReturnValue) == 0x000000, "Member 'Item_IsCastableItem::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsEquipable
// 0x0001 (0x0001 - 0x0000)
struct Item_IsEquipable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsEquipable) == 0x000001, "Wrong alignment on Item_IsEquipable");
static_assert(sizeof(Item_IsEquipable) == 0x000001, "Wrong size on Item_IsEquipable");
static_assert(offsetof(Item_IsEquipable, ReturnValue) == 0x000000, "Member 'Item_IsEquipable::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsPackageItem
// 0x0001 (0x0001 - 0x0000)
struct Item_IsPackageItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsPackageItem) == 0x000001, "Wrong alignment on Item_IsPackageItem");
static_assert(sizeof(Item_IsPackageItem) == 0x000001, "Wrong size on Item_IsPackageItem");
static_assert(offsetof(Item_IsPackageItem, ReturnValue) == 0x000000, "Member 'Item_IsPackageItem::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsToy
// 0x0001 (0x0001 - 0x0000)
struct Item_IsToy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsToy) == 0x000001, "Wrong alignment on Item_IsToy");
static_assert(sizeof(Item_IsToy) == 0x000001, "Wrong size on Item_IsToy");
static_assert(offsetof(Item_IsToy, ReturnValue) == 0x000000, "Member 'Item_IsToy::ReturnValue' has a wrong offset!");

// Function TslGame.Item.IsWeapon
// 0x0001 (0x0001 - 0x0000)
struct Item_IsWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsWeapon) == 0x000001, "Wrong alignment on Item_IsWeapon");
static_assert(sizeof(Item_IsWeapon) == 0x000001, "Wrong size on Item_IsWeapon");
static_assert(offsetof(Item_IsWeapon, ReturnValue) == 0x000000, "Member 'Item_IsWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.EquipableItem.CanEquipTo
// 0x0010 (0x0010 - 0x0000)
struct EquipableItem_CanEquipTo final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipableItem_CanEquipTo) == 0x000008, "Wrong alignment on EquipableItem_CanEquipTo");
static_assert(sizeof(EquipableItem_CanEquipTo) == 0x000010, "Wrong size on EquipableItem_CanEquipTo");
static_assert(offsetof(EquipableItem_CanEquipTo, Character) == 0x000000, "Member 'EquipableItem_CanEquipTo::Character' has a wrong offset!");
static_assert(offsetof(EquipableItem_CanEquipTo, ReturnValue) == 0x000008, "Member 'EquipableItem_CanEquipTo::ReturnValue' has a wrong offset!");

// Function TslGame.EquipableItem.EquipBy
// 0x0018 (0x0018 - 0x0000)
struct EquipableItem_EquipBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipPosition                         Position;                                          // 0x0008(0x0008)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipableItem_EquipBy) == 0x000008, "Wrong alignment on EquipableItem_EquipBy");
static_assert(sizeof(EquipableItem_EquipBy) == 0x000018, "Wrong size on EquipableItem_EquipBy");
static_assert(offsetof(EquipableItem_EquipBy, Character) == 0x000000, "Member 'EquipableItem_EquipBy::Character' has a wrong offset!");
static_assert(offsetof(EquipableItem_EquipBy, Position) == 0x000008, "Member 'EquipableItem_EquipBy::Position' has a wrong offset!");
static_assert(offsetof(EquipableItem_EquipBy, ReturnValue) == 0x000010, "Member 'EquipableItem_EquipBy::ReturnValue' has a wrong offset!");

// Function TslGame.EquipableItem.UnequipBy
// 0x0008 (0x0008 - 0x0000)
struct EquipableItem_UnequipBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipableItem_UnequipBy) == 0x000008, "Wrong alignment on EquipableItem_UnequipBy");
static_assert(sizeof(EquipableItem_UnequipBy) == 0x000008, "Wrong size on EquipableItem_UnequipBy");
static_assert(offsetof(EquipableItem_UnequipBy, Character) == 0x000000, "Member 'EquipableItem_UnequipBy::Character' has a wrong offset!");

// Function TslGame.AsyncStaticMeshComponent.SetStaticMeshAsset
// 0x0020 (0x0020 - 0x0000)
struct AsyncStaticMeshComponent_SetStaticMeshAsset final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Asset;                                             // 0x0000(0x0020)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncStaticMeshComponent_SetStaticMeshAsset) == 0x000008, "Wrong alignment on AsyncStaticMeshComponent_SetStaticMeshAsset");
static_assert(sizeof(AsyncStaticMeshComponent_SetStaticMeshAsset) == 0x000020, "Wrong size on AsyncStaticMeshComponent_SetStaticMeshAsset");
static_assert(offsetof(AsyncStaticMeshComponent_SetStaticMeshAsset, Asset) == 0x000000, "Member 'AsyncStaticMeshComponent_SetStaticMeshAsset::Asset' has a wrong offset!");

// Function TslGame.AsyncStaticMeshComponent.GetStaticMeshAsset
// 0x0020 (0x0020 - 0x0000)
struct AsyncStaticMeshComponent_GetStaticMeshAsset final
{
public:
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncStaticMeshComponent_GetStaticMeshAsset) == 0x000008, "Wrong alignment on AsyncStaticMeshComponent_GetStaticMeshAsset");
static_assert(sizeof(AsyncStaticMeshComponent_GetStaticMeshAsset) == 0x000020, "Wrong size on AsyncStaticMeshComponent_GetStaticMeshAsset");
static_assert(offsetof(AsyncStaticMeshComponent_GetStaticMeshAsset, ReturnValue) == 0x000000, "Member 'AsyncStaticMeshComponent_GetStaticMeshAsset::ReturnValue' has a wrong offset!");

// Function TslGame.AsyncStaticMeshComponent.IsSameMesh
// 0x0028 (0x0028 - 0x0000)
struct AsyncStaticMeshComponent_IsSameMesh final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Asset;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncStaticMeshComponent_IsSameMesh) == 0x000008, "Wrong alignment on AsyncStaticMeshComponent_IsSameMesh");
static_assert(sizeof(AsyncStaticMeshComponent_IsSameMesh) == 0x000028, "Wrong size on AsyncStaticMeshComponent_IsSameMesh");
static_assert(offsetof(AsyncStaticMeshComponent_IsSameMesh, Asset) == 0x000000, "Member 'AsyncStaticMeshComponent_IsSameMesh::Asset' has a wrong offset!");
static_assert(offsetof(AsyncStaticMeshComponent_IsSameMesh, ReturnValue) == 0x000020, "Member 'AsyncStaticMeshComponent_IsSameMesh::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuff.CanApplyBuff
// 0x0001 (0x0001 - 0x0000)
struct TslBuff_CanApplyBuff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuff_CanApplyBuff) == 0x000001, "Wrong alignment on TslBuff_CanApplyBuff");
static_assert(sizeof(TslBuff_CanApplyBuff) == 0x000001, "Wrong size on TslBuff_CanApplyBuff");
static_assert(offsetof(TslBuff_CanApplyBuff, ReturnValue) == 0x000000, "Member 'TslBuff_CanApplyBuff::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuff.StopBuffBlueprint
// 0x0001 (0x0001 - 0x0000)
struct TslBuff_StopBuffBlueprint final
{
public:
	bool                                          bCanceled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuff_StopBuffBlueprint) == 0x000001, "Wrong alignment on TslBuff_StopBuffBlueprint");
static_assert(sizeof(TslBuff_StopBuffBlueprint) == 0x000001, "Wrong size on TslBuff_StopBuffBlueprint");
static_assert(offsetof(TslBuff_StopBuffBlueprint, bCanceled) == 0x000000, "Member 'TslBuff_StopBuffBlueprint::bCanceled' has a wrong offset!");

// Function TslGame.TslBuff.GetAttackId
// 0x0004 (0x0004 - 0x0000)
struct TslBuff_GetAttackId final
{
public:
	struct FAttackId                              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuff_GetAttackId) == 0x000004, "Wrong alignment on TslBuff_GetAttackId");
static_assert(sizeof(TslBuff_GetAttackId) == 0x000004, "Wrong size on TslBuff_GetAttackId");
static_assert(offsetof(TslBuff_GetAttackId, ReturnValue) == 0x000000, "Member 'TslBuff_GetAttackId::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuff.GetOwnerPawn
// 0x0008 (0x0008 - 0x0000)
struct TslBuff_GetOwnerPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuff_GetOwnerPawn) == 0x000008, "Wrong alignment on TslBuff_GetOwnerPawn");
static_assert(sizeof(TslBuff_GetOwnerPawn) == 0x000008, "Wrong size on TslBuff_GetOwnerPawn");
static_assert(offsetof(TslBuff_GetOwnerPawn, ReturnValue) == 0x000000, "Member 'TslBuff_GetOwnerPawn::ReturnValue' has a wrong offset!");

// Function TslGame.BuffComponet.AddBuff
// 0x0010 (0x0010 - 0x0000)
struct BuffComponet_AddBuff final
{
public:
	TSubclassOf<class ATslBuff>                   TslBuffClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslBuff*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffComponet_AddBuff) == 0x000008, "Wrong alignment on BuffComponet_AddBuff");
static_assert(sizeof(BuffComponet_AddBuff) == 0x000010, "Wrong size on BuffComponet_AddBuff");
static_assert(offsetof(BuffComponet_AddBuff, TslBuffClass) == 0x000000, "Member 'BuffComponet_AddBuff::TslBuffClass' has a wrong offset!");
static_assert(offsetof(BuffComponet_AddBuff, ReturnValue) == 0x000008, "Member 'BuffComponet_AddBuff::ReturnValue' has a wrong offset!");

// Function TslGame.BuffComponet.FindBuffWithOverlapId
// 0x0010 (0x0010 - 0x0000)
struct BuffComponet_FindBuffWithOverlapId final
{
public:
	struct FName                                   BuffOverlapId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslBuff*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffComponet_FindBuffWithOverlapId) == 0x000008, "Wrong alignment on BuffComponet_FindBuffWithOverlapId");
static_assert(sizeof(BuffComponet_FindBuffWithOverlapId) == 0x000010, "Wrong size on BuffComponet_FindBuffWithOverlapId");
static_assert(offsetof(BuffComponet_FindBuffWithOverlapId, BuffOverlapId) == 0x000000, "Member 'BuffComponet_FindBuffWithOverlapId::BuffOverlapId' has a wrong offset!");
static_assert(offsetof(BuffComponet_FindBuffWithOverlapId, ReturnValue) == 0x000008, "Member 'BuffComponet_FindBuffWithOverlapId::ReturnValue' has a wrong offset!");

// Function TslGame.BuffComponet.RemoveBuff
// 0x0008 (0x0008 - 0x0000)
struct BuffComponet_RemoveBuff final
{
public:
	struct FName                                   OverlapId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffComponet_RemoveBuff) == 0x000004, "Wrong alignment on BuffComponet_RemoveBuff");
static_assert(sizeof(BuffComponet_RemoveBuff) == 0x000008, "Wrong size on BuffComponet_RemoveBuff");
static_assert(offsetof(BuffComponet_RemoveBuff, OverlapId) == 0x000000, "Member 'BuffComponet_RemoveBuff::OverlapId' has a wrong offset!");

// Function TslGame.CastableInterface.GetCastConfig
// 0x0030 (0x0030 - 0x0000)
struct CastableInterface_GetCastConfig final
{
public:
	struct FCastConfig                            ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastableInterface_GetCastConfig) == 0x000008, "Wrong alignment on CastableInterface_GetCastConfig");
static_assert(sizeof(CastableInterface_GetCastConfig) == 0x000030, "Wrong size on CastableInterface_GetCastConfig");
static_assert(offsetof(CastableInterface_GetCastConfig, ReturnValue) == 0x000000, "Member 'CastableInterface_GetCastConfig::ReturnValue' has a wrong offset!");

// Function TslGame.CastableInterface.GetCastFailMessage
// 0x0020 (0x0020 - 0x0000)
struct CastableInterface_GetCastFailMessage final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastableInterface_GetCastFailMessage) == 0x000008, "Wrong alignment on CastableInterface_GetCastFailMessage");
static_assert(sizeof(CastableInterface_GetCastFailMessage) == 0x000020, "Wrong size on CastableInterface_GetCastFailMessage");
static_assert(offsetof(CastableInterface_GetCastFailMessage, Character) == 0x000000, "Member 'CastableInterface_GetCastFailMessage::Character' has a wrong offset!");
static_assert(offsetof(CastableInterface_GetCastFailMessage, ReturnValue) == 0x000008, "Member 'CastableInterface_GetCastFailMessage::ReturnValue' has a wrong offset!");

// Function TslGame.CastableInterface.IsCastable
// 0x0010 (0x0010 - 0x0000)
struct CastableInterface_IsCastable final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CastableInterface_IsCastable) == 0x000008, "Wrong alignment on CastableInterface_IsCastable");
static_assert(sizeof(CastableInterface_IsCastable) == 0x000010, "Wrong size on CastableInterface_IsCastable");
static_assert(offsetof(CastableInterface_IsCastable, Character) == 0x000000, "Member 'CastableInterface_IsCastable::Character' has a wrong offset!");
static_assert(offsetof(CastableInterface_IsCastable, ReturnValue) == 0x000008, "Member 'CastableInterface_IsCastable::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.CancelCast
// 0x0001 (0x0001 - 0x0000)
struct CastComponent_CancelCast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_CancelCast) == 0x000001, "Wrong alignment on CastComponent_CancelCast");
static_assert(sizeof(CastComponent_CancelCast) == 0x000001, "Wrong size on CastComponent_CancelCast");
static_assert(offsetof(CastComponent_CancelCast, ReturnValue) == 0x000000, "Member 'CastComponent_CancelCast::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.StartCast
// 0x0018 (0x0018 - 0x0000)
struct CastComponent_StartCast final
{
public:
	TScriptInterface<class ICastableInterface>    CastableInterface;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CastComponent_StartCast) == 0x000008, "Wrong alignment on CastComponent_StartCast");
static_assert(sizeof(CastComponent_StartCast) == 0x000018, "Wrong size on CastComponent_StartCast");
static_assert(offsetof(CastComponent_StartCast, CastableInterface) == 0x000000, "Member 'CastComponent_StartCast::CastableInterface' has a wrong offset!");
static_assert(offsetof(CastComponent_StartCast, ReturnValue) == 0x000010, "Member 'CastComponent_StartCast::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetCastAnim
// 0x0001 (0x0001 - 0x0000)
struct CastComponent_GetCastAnim final
{
public:
	ECastAnim                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetCastAnim) == 0x000001, "Wrong alignment on CastComponent_GetCastAnim");
static_assert(sizeof(CastComponent_GetCastAnim) == 0x000001, "Wrong size on CastComponent_GetCastAnim");
static_assert(offsetof(CastComponent_GetCastAnim, ReturnValue) == 0x000000, "Member 'CastComponent_GetCastAnim::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetCastLevel
// 0x0001 (0x0001 - 0x0000)
struct CastComponent_GetCastLevel final
{
public:
	ECastLevel                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetCastLevel) == 0x000001, "Wrong alignment on CastComponent_GetCastLevel");
static_assert(sizeof(CastComponent_GetCastLevel) == 0x000001, "Wrong size on CastComponent_GetCastLevel");
static_assert(offsetof(CastComponent_GetCastLevel, ReturnValue) == 0x000000, "Member 'CastComponent_GetCastLevel::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetCastName
// 0x0018 (0x0018 - 0x0000)
struct CastComponent_GetCastName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetCastName) == 0x000008, "Wrong alignment on CastComponent_GetCastName");
static_assert(sizeof(CastComponent_GetCastName) == 0x000018, "Wrong size on CastComponent_GetCastName");
static_assert(offsetof(CastComponent_GetCastName, ReturnValue) == 0x000000, "Member 'CastComponent_GetCastName::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetCastObject
// 0x0008 (0x0008 - 0x0000)
struct CastComponent_GetCastObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetCastObject) == 0x000008, "Wrong alignment on CastComponent_GetCastObject");
static_assert(sizeof(CastComponent_GetCastObject) == 0x000008, "Wrong size on CastComponent_GetCastObject");
static_assert(offsetof(CastComponent_GetCastObject, ReturnValue) == 0x000000, "Member 'CastComponent_GetCastObject::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetCastPriority
// 0x0001 (0x0001 - 0x0000)
struct CastComponent_GetCastPriority final
{
public:
	ECastPriority                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetCastPriority) == 0x000001, "Wrong alignment on CastComponent_GetCastPriority");
static_assert(sizeof(CastComponent_GetCastPriority) == 0x000001, "Wrong size on CastComponent_GetCastPriority");
static_assert(offsetof(CastComponent_GetCastPriority, ReturnValue) == 0x000000, "Member 'CastComponent_GetCastPriority::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetElapsedCastTime
// 0x0004 (0x0004 - 0x0000)
struct CastComponent_GetElapsedCastTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetElapsedCastTime) == 0x000004, "Wrong alignment on CastComponent_GetElapsedCastTime");
static_assert(sizeof(CastComponent_GetElapsedCastTime) == 0x000004, "Wrong size on CastComponent_GetElapsedCastTime");
static_assert(offsetof(CastComponent_GetElapsedCastTime, ReturnValue) == 0x000000, "Member 'CastComponent_GetElapsedCastTime::ReturnValue' has a wrong offset!");

// Function TslGame.CastComponent.GetTotalCastTime
// 0x0004 (0x0004 - 0x0000)
struct CastComponent_GetTotalCastTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CastComponent_GetTotalCastTime) == 0x000004, "Wrong alignment on CastComponent_GetTotalCastTime");
static_assert(sizeof(CastComponent_GetTotalCastTime) == 0x000004, "Wrong size on CastComponent_GetTotalCastTime");
static_assert(offsetof(CastComponent_GetTotalCastTime, ReturnValue) == 0x000000, "Member 'CastComponent_GetTotalCastTime::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.AddBreath
// 0x0004 (0x0004 - 0x0000)
struct CharacterBreathComponent_AddBreath final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_AddBreath) == 0x000004, "Wrong alignment on CharacterBreathComponent_AddBreath");
static_assert(sizeof(CharacterBreathComponent_AddBreath) == 0x000004, "Wrong size on CharacterBreathComponent_AddBreath");
static_assert(offsetof(CharacterBreathComponent_AddBreath, Value) == 0x000000, "Member 'CharacterBreathComponent_AddBreath::Value' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.OnRep_Breath
// 0x0004 (0x0004 - 0x0000)
struct CharacterBreathComponent_OnRep_Breath final
{
public:
	float                                         LastBreath;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_OnRep_Breath) == 0x000004, "Wrong alignment on CharacterBreathComponent_OnRep_Breath");
static_assert(sizeof(CharacterBreathComponent_OnRep_Breath) == 0x000004, "Wrong size on CharacterBreathComponent_OnRep_Breath");
static_assert(offsetof(CharacterBreathComponent_OnRep_Breath, LastBreath) == 0x000000, "Member 'CharacterBreathComponent_OnRep_Breath::LastBreath' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.CanStartHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct CharacterBreathComponent_CanStartHoldingBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_CanStartHoldingBreath) == 0x000001, "Wrong alignment on CharacterBreathComponent_CanStartHoldingBreath");
static_assert(sizeof(CharacterBreathComponent_CanStartHoldingBreath) == 0x000001, "Wrong size on CharacterBreathComponent_CanStartHoldingBreath");
static_assert(offsetof(CharacterBreathComponent_CanStartHoldingBreath, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_CanStartHoldingBreath::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.CanStartSprinting
// 0x0001 (0x0001 - 0x0000)
struct CharacterBreathComponent_CanStartSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_CanStartSprinting) == 0x000001, "Wrong alignment on CharacterBreathComponent_CanStartSprinting");
static_assert(sizeof(CharacterBreathComponent_CanStartSprinting) == 0x000001, "Wrong size on CharacterBreathComponent_CanStartSprinting");
static_assert(offsetof(CharacterBreathComponent_CanStartSprinting, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_CanStartSprinting::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.GetBreath
// 0x0004 (0x0004 - 0x0000)
struct CharacterBreathComponent_GetBreath final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_GetBreath) == 0x000004, "Wrong alignment on CharacterBreathComponent_GetBreath");
static_assert(sizeof(CharacterBreathComponent_GetBreath) == 0x000004, "Wrong size on CharacterBreathComponent_GetBreath");
static_assert(offsetof(CharacterBreathComponent_GetBreath, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_GetBreath::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.GetBreathMax
// 0x0004 (0x0004 - 0x0000)
struct CharacterBreathComponent_GetBreathMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_GetBreathMax) == 0x000004, "Wrong alignment on CharacterBreathComponent_GetBreathMax");
static_assert(sizeof(CharacterBreathComponent_GetBreathMax) == 0x000004, "Wrong size on CharacterBreathComponent_GetBreathMax");
static_assert(offsetof(CharacterBreathComponent_GetBreathMax, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_GetBreathMax::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.GetBreathRatio
// 0x0004 (0x0004 - 0x0000)
struct CharacterBreathComponent_GetBreathRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_GetBreathRatio) == 0x000004, "Wrong alignment on CharacterBreathComponent_GetBreathRatio");
static_assert(sizeof(CharacterBreathComponent_GetBreathRatio) == 0x000004, "Wrong size on CharacterBreathComponent_GetBreathRatio");
static_assert(offsetof(CharacterBreathComponent_GetBreathRatio, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_GetBreathRatio::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.IsConsuming
// 0x0001 (0x0001 - 0x0000)
struct CharacterBreathComponent_IsConsuming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_IsConsuming) == 0x000001, "Wrong alignment on CharacterBreathComponent_IsConsuming");
static_assert(sizeof(CharacterBreathComponent_IsConsuming) == 0x000001, "Wrong size on CharacterBreathComponent_IsConsuming");
static_assert(offsetof(CharacterBreathComponent_IsConsuming, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_IsConsuming::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathComponent.IsInApnea
// 0x0001 (0x0001 - 0x0000)
struct CharacterBreathComponent_IsInApnea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathComponent_IsInApnea) == 0x000001, "Wrong alignment on CharacterBreathComponent_IsInApnea");
static_assert(sizeof(CharacterBreathComponent_IsInApnea) == 0x000001, "Wrong size on CharacterBreathComponent_IsInApnea");
static_assert(offsetof(CharacterBreathComponent_IsInApnea, ReturnValue) == 0x000000, "Member 'CharacterBreathComponent_IsInApnea::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterStudio.AddYaw
// 0x0004 (0x0004 - 0x0000)
struct CharacterStudio_AddYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_AddYaw) == 0x000004, "Wrong alignment on CharacterStudio_AddYaw");
static_assert(sizeof(CharacterStudio_AddYaw) == 0x000004, "Wrong size on CharacterStudio_AddYaw");
static_assert(offsetof(CharacterStudio_AddYaw, Yaw) == 0x000000, "Member 'CharacterStudio_AddYaw::Yaw' has a wrong offset!");

// Function TslGame.CharacterStudio.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterStudio_GetCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_GetCharacter) == 0x000008, "Wrong alignment on CharacterStudio_GetCharacter");
static_assert(sizeof(CharacterStudio_GetCharacter) == 0x000008, "Wrong size on CharacterStudio_GetCharacter");
static_assert(offsetof(CharacterStudio_GetCharacter, ReturnValue) == 0x000000, "Member 'CharacterStudio_GetCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterStudio.GetSceneCaptureMaterial
// 0x0008 (0x0008 - 0x0000)
struct CharacterStudio_GetSceneCaptureMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_GetSceneCaptureMaterial) == 0x000008, "Wrong alignment on CharacterStudio_GetSceneCaptureMaterial");
static_assert(sizeof(CharacterStudio_GetSceneCaptureMaterial) == 0x000008, "Wrong size on CharacterStudio_GetSceneCaptureMaterial");
static_assert(offsetof(CharacterStudio_GetSceneCaptureMaterial, ReturnValue) == 0x000000, "Member 'CharacterStudio_GetSceneCaptureMaterial::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterStudio.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterStudio_SetCharacter final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_SetCharacter) == 0x000008, "Wrong alignment on CharacterStudio_SetCharacter");
static_assert(sizeof(CharacterStudio_SetCharacter) == 0x000008, "Wrong size on CharacterStudio_SetCharacter");
static_assert(offsetof(CharacterStudio_SetCharacter, Character) == 0x000000, "Member 'CharacterStudio_SetCharacter::Character' has a wrong offset!");

// Function TslGame.CharacterStudio.SetSceneCaptureMaterial
// 0x0008 (0x0008 - 0x0000)
struct CharacterStudio_SetSceneCaptureMaterial final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_SetSceneCaptureMaterial) == 0x000008, "Wrong alignment on CharacterStudio_SetSceneCaptureMaterial");
static_assert(sizeof(CharacterStudio_SetSceneCaptureMaterial) == 0x000008, "Wrong size on CharacterStudio_SetSceneCaptureMaterial");
static_assert(offsetof(CharacterStudio_SetSceneCaptureMaterial, Mid) == 0x000000, "Member 'CharacterStudio_SetSceneCaptureMaterial::Mid' has a wrong offset!");

// Function TslGame.CharacterStudio.IsCharacterValid
// 0x0001 (0x0001 - 0x0000)
struct CharacterStudio_IsCharacterValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_IsCharacterValid) == 0x000001, "Wrong alignment on CharacterStudio_IsCharacterValid");
static_assert(sizeof(CharacterStudio_IsCharacterValid) == 0x000001, "Wrong size on CharacterStudio_IsCharacterValid");
static_assert(offsetof(CharacterStudio_IsCharacterValid, ReturnValue) == 0x000000, "Member 'CharacterStudio_IsCharacterValid::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterStudio.IsUsingDynamicResolution
// 0x0001 (0x0001 - 0x0000)
struct CharacterStudio_IsUsingDynamicResolution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStudio_IsUsingDynamicResolution) == 0x000001, "Wrong alignment on CharacterStudio_IsUsingDynamicResolution");
static_assert(sizeof(CharacterStudio_IsUsingDynamicResolution) == 0x000001, "Wrong size on CharacterStudio_IsUsingDynamicResolution");
static_assert(offsetof(CharacterStudio_IsUsingDynamicResolution, ReturnValue) == 0x000000, "Member 'CharacterStudio_IsUsingDynamicResolution::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.Admin
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_Admin final
{
public:
	class FString                                 ServerAdminCommand;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_Admin) == 0x000008, "Wrong alignment on TslPlayerController_Admin");
static_assert(sizeof(TslPlayerController_Admin) == 0x000010, "Wrong size on TslPlayerController_Admin");
static_assert(offsetof(TslPlayerController_Admin, ServerAdminCommand) == 0x000000, "Member 'TslPlayerController_Admin::ServerAdminCommand' has a wrong offset!");

// Function TslGame.TslPlayerController.BEClient
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_BEClient final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_BEClient) == 0x000008, "Wrong alignment on TslPlayerController_BEClient");
static_assert(sizeof(TslPlayerController_BEClient) == 0x000010, "Wrong size on TslPlayerController_BEClient");
static_assert(offsetof(TslPlayerController_BEClient, Command) == 0x000000, "Member 'TslPlayerController_BEClient::Command' has a wrong offset!");

// Function TslGame.TslPlayerController.BEServer
// 0x0040 (0x0040 - 0x0000)
struct TslPlayerController_BEServer final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg0;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg1;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg2;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_BEServer) == 0x000008, "Wrong alignment on TslPlayerController_BEServer");
static_assert(sizeof(TslPlayerController_BEServer) == 0x000040, "Wrong size on TslPlayerController_BEServer");
static_assert(offsetof(TslPlayerController_BEServer, Command) == 0x000000, "Member 'TslPlayerController_BEServer::Command' has a wrong offset!");
static_assert(offsetof(TslPlayerController_BEServer, Arg0) == 0x000010, "Member 'TslPlayerController_BEServer::Arg0' has a wrong offset!");
static_assert(offsetof(TslPlayerController_BEServer, Arg1) == 0x000020, "Member 'TslPlayerController_BEServer::Arg1' has a wrong offset!");
static_assert(offsetof(TslPlayerController_BEServer, Arg2) == 0x000030, "Member 'TslPlayerController_BEServer::Arg2' has a wrong offset!");

// Function TslGame.TslPlayerController.BP_Test_SpawnVehicle
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_BP_Test_SpawnVehicle final
{
public:
	int32                                         VehicleIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_BP_Test_SpawnVehicle) == 0x000004, "Wrong alignment on TslPlayerController_BP_Test_SpawnVehicle");
static_assert(sizeof(TslPlayerController_BP_Test_SpawnVehicle) == 0x000004, "Wrong size on TslPlayerController_BP_Test_SpawnVehicle");
static_assert(offsetof(TslPlayerController_BP_Test_SpawnVehicle, VehicleIndex) == 0x000000, "Member 'TslPlayerController_BP_Test_SpawnVehicle::VehicleIndex' has a wrong offset!");

// Function TslGame.TslPlayerController.Cheat_ServerSpawnVehicle
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_Cheat_ServerSpawnVehicle final
{
public:
	int32                                         VehicleIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_Cheat_ServerSpawnVehicle) == 0x000004, "Wrong alignment on TslPlayerController_Cheat_ServerSpawnVehicle");
static_assert(sizeof(TslPlayerController_Cheat_ServerSpawnVehicle) == 0x000004, "Wrong size on TslPlayerController_Cheat_ServerSpawnVehicle");
static_assert(offsetof(TslPlayerController_Cheat_ServerSpawnVehicle, VehicleIndex) == 0x000000, "Member 'TslPlayerController_Cheat_ServerSpawnVehicle::VehicleIndex' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientAdminCopyString
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientAdminCopyString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientAdminCopyString) == 0x000008, "Wrong alignment on TslPlayerController_ClientAdminCopyString");
static_assert(sizeof(TslPlayerController_ClientAdminCopyString) == 0x000010, "Wrong size on TslPlayerController_ClientAdminCopyString");
static_assert(offsetof(TslPlayerController_ClientAdminCopyString, inString) == 0x000000, "Member 'TslPlayerController_ClientAdminCopyString::inString' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientInteract
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ClientInteract final
{
public:
	class AActor*                                 TargetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientInteract) == 0x000008, "Wrong alignment on TslPlayerController_ClientInteract");
static_assert(sizeof(TslPlayerController_ClientInteract) == 0x000008, "Wrong size on TslPlayerController_ClientInteract");
static_assert(offsetof(TslPlayerController_ClientInteract, TargetObject) == 0x000000, "Member 'TslPlayerController_ClientInteract::TargetObject' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientInteractByComponent
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ClientInteractByComponent final
{
public:
	class UActorComponent*                        TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientInteractByComponent) == 0x000008, "Wrong alignment on TslPlayerController_ClientInteractByComponent");
static_assert(sizeof(TslPlayerController_ClientInteractByComponent) == 0x000008, "Wrong size on TslPlayerController_ClientInteractByComponent");
static_assert(offsetof(TslPlayerController_ClientInteractByComponent, TargetComponent) == 0x000000, "Member 'TslPlayerController_ClientInteractByComponent::TargetComponent' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHeal
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ClientNotifyHeal final
{
public:
	float                                         HealthStart;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHeal) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHeal");
static_assert(sizeof(TslPlayerController_ClientNotifyHeal) == 0x00000C, "Wrong size on TslPlayerController_ClientNotifyHeal");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal, HealthStart) == 0x000000, "Member 'TslPlayerController_ClientNotifyHeal::HealthStart' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal, Health) == 0x000004, "Member 'TslPlayerController_ClientNotifyHeal::Health' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal, MaxHealth) == 0x000008, "Member 'TslPlayerController_ClientNotifyHeal::MaxHealth' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHeal_Reliable
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ClientNotifyHeal_Reliable final
{
public:
	float                                         HealthStart;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHeal_Reliable) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHeal_Reliable");
static_assert(sizeof(TslPlayerController_ClientNotifyHeal_Reliable) == 0x00000C, "Wrong size on TslPlayerController_ClientNotifyHeal_Reliable");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Reliable, HealthStart) == 0x000000, "Member 'TslPlayerController_ClientNotifyHeal_Reliable::HealthStart' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Reliable, Health) == 0x000004, "Member 'TslPlayerController_ClientNotifyHeal_Reliable::Health' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Reliable, MaxHealth) == 0x000008, "Member 'TslPlayerController_ClientNotifyHeal_Reliable::MaxHealth' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHeal_Unreliable
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ClientNotifyHeal_Unreliable final
{
public:
	float                                         HealthStart;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHeal_Unreliable) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHeal_Unreliable");
static_assert(sizeof(TslPlayerController_ClientNotifyHeal_Unreliable) == 0x00000C, "Wrong size on TslPlayerController_ClientNotifyHeal_Unreliable");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Unreliable, HealthStart) == 0x000000, "Member 'TslPlayerController_ClientNotifyHeal_Unreliable::HealthStart' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Unreliable, Health) == 0x000004, "Member 'TslPlayerController_ClientNotifyHeal_Unreliable::Health' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyHeal_Unreliable, MaxHealth) == 0x000008, "Member 'TslPlayerController_ClientNotifyHeal_Unreliable::MaxHealth' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHealAmount
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ClientNotifyHealAmount final
{
public:
	float                                         Heal;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHealAmount) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHealAmount");
static_assert(sizeof(TslPlayerController_ClientNotifyHealAmount) == 0x000004, "Wrong size on TslPlayerController_ClientNotifyHealAmount");
static_assert(offsetof(TslPlayerController_ClientNotifyHealAmount, Heal) == 0x000000, "Member 'TslPlayerController_ClientNotifyHealAmount::Heal' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHealAmount_Reliable
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ClientNotifyHealAmount_Reliable final
{
public:
	float                                         Heal;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHealAmount_Reliable) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHealAmount_Reliable");
static_assert(sizeof(TslPlayerController_ClientNotifyHealAmount_Reliable) == 0x000004, "Wrong size on TslPlayerController_ClientNotifyHealAmount_Reliable");
static_assert(offsetof(TslPlayerController_ClientNotifyHealAmount_Reliable, Heal) == 0x000000, "Member 'TslPlayerController_ClientNotifyHealAmount_Reliable::Heal' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyHealAmount_Unreliable
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ClientNotifyHealAmount_Unreliable final
{
public:
	float                                         Heal;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyHealAmount_Unreliable) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyHealAmount_Unreliable");
static_assert(sizeof(TslPlayerController_ClientNotifyHealAmount_Unreliable) == 0x000004, "Wrong size on TslPlayerController_ClientNotifyHealAmount_Unreliable");
static_assert(offsetof(TslPlayerController_ClientNotifyHealAmount_Unreliable, Heal) == 0x000000, "Member 'TslPlayerController_ClientNotifyHealAmount_Unreliable::Heal' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyNextGasIn
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientNotifyNextGasIn final
{
public:
	struct FVector_NetQuantize                    PoisonGasWarningPosition;                          // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         PoisonGasWarningRadius;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifyNextGasIn) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyNextGasIn");
static_assert(sizeof(TslPlayerController_ClientNotifyNextGasIn) == 0x000010, "Wrong size on TslPlayerController_ClientNotifyNextGasIn");
static_assert(offsetof(TslPlayerController_ClientNotifyNextGasIn, PoisonGasWarningPosition) == 0x000000, "Member 'TslPlayerController_ClientNotifyNextGasIn::PoisonGasWarningPosition' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyNextGasIn, PoisonGasWarningRadius) == 0x00000C, "Member 'TslPlayerController_ClientNotifyNextGasIn::PoisonGasWarningRadius' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifySpeedBoost
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ClientNotifySpeedBoost final
{
public:
	float                                         Boost;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientNotifySpeedBoost) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifySpeedBoost");
static_assert(sizeof(TslPlayerController_ClientNotifySpeedBoost) == 0x000004, "Wrong size on TslPlayerController_ClientNotifySpeedBoost");
static_assert(offsetof(TslPlayerController_ClientNotifySpeedBoost, Boost) == 0x000000, "Member 'TslPlayerController_ClientNotifySpeedBoost::Boost' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientNotifyStartBuff
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientNotifyStartBuff final
{
public:
	struct FName                                   BuffName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStart;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ClientNotifyStartBuff) == 0x000004, "Wrong alignment on TslPlayerController_ClientNotifyStartBuff");
static_assert(sizeof(TslPlayerController_ClientNotifyStartBuff) == 0x000010, "Wrong size on TslPlayerController_ClientNotifyStartBuff");
static_assert(offsetof(TslPlayerController_ClientNotifyStartBuff, BuffName) == 0x000000, "Member 'TslPlayerController_ClientNotifyStartBuff::BuffName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientNotifyStartBuff, bStart) == 0x000008, "Member 'TslPlayerController_ClientNotifyStartBuff::bStart' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientOnCharacterDeath
// 0x0038 (0x0038 - 0x0000)
struct TslPlayerController_ClientOnCharacterDeath final
{
public:
	bool                                          bIsTeamMatch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAliveTeamMember;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTslReportedInfo                       InKillerInfo;                                      // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	bool                                          InbCanReport;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ClientOnCharacterDeath) == 0x000008, "Wrong alignment on TslPlayerController_ClientOnCharacterDeath");
static_assert(sizeof(TslPlayerController_ClientOnCharacterDeath) == 0x000038, "Wrong size on TslPlayerController_ClientOnCharacterDeath");
static_assert(offsetof(TslPlayerController_ClientOnCharacterDeath, bIsTeamMatch) == 0x000000, "Member 'TslPlayerController_ClientOnCharacterDeath::bIsTeamMatch' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientOnCharacterDeath, bHasAliveTeamMember) == 0x000001, "Member 'TslPlayerController_ClientOnCharacterDeath::bHasAliveTeamMember' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientOnCharacterDeath, InKillerInfo) == 0x000008, "Member 'TslPlayerController_ClientOnCharacterDeath::InKillerInfo' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientOnCharacterDeath, InbCanReport) == 0x000030, "Member 'TslPlayerController_ClientOnCharacterDeath::InbCanReport' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSendPacketReliable
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientSendPacketReliable final
{
public:
	TArray<uint8>                                 Packet;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSendPacketReliable) == 0x000008, "Wrong alignment on TslPlayerController_ClientSendPacketReliable");
static_assert(sizeof(TslPlayerController_ClientSendPacketReliable) == 0x000010, "Wrong size on TslPlayerController_ClientSendPacketReliable");
static_assert(offsetof(TslPlayerController_ClientSendPacketReliable, Packet) == 0x000000, "Member 'TslPlayerController_ClientSendPacketReliable::Packet' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSendPacketUnreliable
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientSendPacketUnreliable final
{
public:
	TArray<uint8>                                 Packet;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSendPacketUnreliable) == 0x000008, "Wrong alignment on TslPlayerController_ClientSendPacketUnreliable");
static_assert(sizeof(TslPlayerController_ClientSendPacketUnreliable) == 0x000010, "Wrong size on TslPlayerController_ClientSendPacketUnreliable");
static_assert(offsetof(TslPlayerController_ClientSendPacketUnreliable, Packet) == 0x000000, "Member 'TslPlayerController_ClientSendPacketUnreliable::Packet' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSendRoundEndEvent
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ClientSendRoundEndEvent final
{
public:
	bool                                          bIsWinner;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpendedTimeInSeconds;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSendRoundEndEvent) == 0x000004, "Wrong alignment on TslPlayerController_ClientSendRoundEndEvent");
static_assert(sizeof(TslPlayerController_ClientSendRoundEndEvent) == 0x000008, "Wrong size on TslPlayerController_ClientSendRoundEndEvent");
static_assert(offsetof(TslPlayerController_ClientSendRoundEndEvent, bIsWinner) == 0x000000, "Member 'TslPlayerController_ClientSendRoundEndEvent::bIsWinner' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientSendRoundEndEvent, ExpendedTimeInSeconds) == 0x000004, "Member 'TslPlayerController_ClientSendRoundEndEvent::ExpendedTimeInSeconds' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSetCanAllSpectate
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_ClientSetCanAllSpectate final
{
public:
	bool                                          InbCanSpectate;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSetCanAllSpectate) == 0x000001, "Wrong alignment on TslPlayerController_ClientSetCanAllSpectate");
static_assert(sizeof(TslPlayerController_ClientSetCanAllSpectate) == 0x000001, "Wrong size on TslPlayerController_ClientSetCanAllSpectate");
static_assert(offsetof(TslPlayerController_ClientSetCanAllSpectate, InbCanSpectate) == 0x000000, "Member 'TslPlayerController_ClientSetCanAllSpectate::InbCanSpectate' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on TslPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(TslPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on TslPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(TslPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'TslPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'TslPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientSetTslPlayerMatchResultInfos
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientSetTslPlayerMatchResultInfos final
{
public:
	TArray<struct FTslPlayerMatchResultInfo>      InTslPlayerMatchResultInfos;                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ClientSetTslPlayerMatchResultInfos) == 0x000008, "Wrong alignment on TslPlayerController_ClientSetTslPlayerMatchResultInfos");
static_assert(sizeof(TslPlayerController_ClientSetTslPlayerMatchResultInfos) == 0x000010, "Wrong size on TslPlayerController_ClientSetTslPlayerMatchResultInfos");
static_assert(offsetof(TslPlayerController_ClientSetTslPlayerMatchResultInfos, InTslPlayerMatchResultInfos) == 0x000000, "Member 'TslPlayerController_ClientSetTslPlayerMatchResultInfos::InTslPlayerMatchResultInfos' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientShowCastingBar
// 0x0028 (0x0028 - 0x0000)
struct TslPlayerController_ClientShowCastingBar final
{
public:
	float                                         CastTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CastName;                                          // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OnOff;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ClientShowCastingBar) == 0x000008, "Wrong alignment on TslPlayerController_ClientShowCastingBar");
static_assert(sizeof(TslPlayerController_ClientShowCastingBar) == 0x000028, "Wrong size on TslPlayerController_ClientShowCastingBar");
static_assert(offsetof(TslPlayerController_ClientShowCastingBar, CastTime) == 0x000000, "Member 'TslPlayerController_ClientShowCastingBar::CastTime' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientShowCastingBar, CastName) == 0x000008, "Member 'TslPlayerController_ClientShowCastingBar::CastName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientShowCastingBar, OnOff) == 0x000020, "Member 'TslPlayerController_ClientShowCastingBar::OnOff' has a wrong offset!");

// Function TslGame.TslPlayerController.ClientUpdateSpectatorCameraMode
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ClientUpdateSpectatorCameraMode final
{
public:
	struct FName                                   InCameraName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbFirstPerson;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsInVehicle;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsScoping;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ClientUpdateSpectatorCameraMode) == 0x000004, "Wrong alignment on TslPlayerController_ClientUpdateSpectatorCameraMode");
static_assert(sizeof(TslPlayerController_ClientUpdateSpectatorCameraMode) == 0x000010, "Wrong size on TslPlayerController_ClientUpdateSpectatorCameraMode");
static_assert(offsetof(TslPlayerController_ClientUpdateSpectatorCameraMode, InCameraName) == 0x000000, "Member 'TslPlayerController_ClientUpdateSpectatorCameraMode::InCameraName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientUpdateSpectatorCameraMode, InbFirstPerson) == 0x000008, "Member 'TslPlayerController_ClientUpdateSpectatorCameraMode::InbFirstPerson' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientUpdateSpectatorCameraMode, InbIsInVehicle) == 0x000009, "Member 'TslPlayerController_ClientUpdateSpectatorCameraMode::InbIsInVehicle' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ClientUpdateSpectatorCameraMode, InbIsScoping) == 0x00000A, "Member 'TslPlayerController_ClientUpdateSpectatorCameraMode::InbIsScoping' has a wrong offset!");

// Function TslGame.TslPlayerController.DropItem
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_DropItem final
{
public:
	class FString                                 ItemTypeName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_DropItem) == 0x000008, "Wrong alignment on TslPlayerController_DropItem");
static_assert(sizeof(TslPlayerController_DropItem) == 0x000010, "Wrong size on TslPlayerController_DropItem");
static_assert(offsetof(TslPlayerController_DropItem, ItemTypeName) == 0x000000, "Member 'TslPlayerController_DropItem::ItemTypeName' has a wrong offset!");

// Function TslGame.TslPlayerController.GetGearProfile
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_GetGearProfile final
{
public:
	int32                                         ProfileIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UItem>>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetGearProfile) == 0x000008, "Wrong alignment on TslPlayerController_GetGearProfile");
static_assert(sizeof(TslPlayerController_GetGearProfile) == 0x000018, "Wrong size on TslPlayerController_GetGearProfile");
static_assert(offsetof(TslPlayerController_GetGearProfile, ProfileIndex) == 0x000000, "Member 'TslPlayerController_GetGearProfile::ProfileIndex' has a wrong offset!");
static_assert(offsetof(TslPlayerController_GetGearProfile, ReturnValue) == 0x000008, "Member 'TslPlayerController_GetGearProfile::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetHudDebugText
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_GetHudDebugText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetHudDebugText) == 0x000008, "Wrong alignment on TslPlayerController_GetHudDebugText");
static_assert(sizeof(TslPlayerController_GetHudDebugText) == 0x000018, "Wrong size on TslPlayerController_GetHudDebugText");
static_assert(offsetof(TslPlayerController_GetHudDebugText, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetHudDebugText::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.KickCharacter
// 0x0020 (0x0020 - 0x0000)
struct TslPlayerController_KickCharacter final
{
public:
	class ATslCharacter*                          TslCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_KickCharacter) == 0x000008, "Wrong alignment on TslPlayerController_KickCharacter");
static_assert(sizeof(TslPlayerController_KickCharacter) == 0x000020, "Wrong size on TslPlayerController_KickCharacter");
static_assert(offsetof(TslPlayerController_KickCharacter, TslCharacter) == 0x000000, "Member 'TslPlayerController_KickCharacter::TslCharacter' has a wrong offset!");
static_assert(offsetof(TslPlayerController_KickCharacter, Reason) == 0x000008, "Member 'TslPlayerController_KickCharacter::Reason' has a wrong offset!");

// Function TslGame.TslPlayerController.ObserverTeleportTo
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ObserverTeleportTo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ObserverTeleportTo) == 0x000004, "Wrong alignment on TslPlayerController_ObserverTeleportTo");
static_assert(sizeof(TslPlayerController_ObserverTeleportTo) == 0x00000C, "Wrong size on TslPlayerController_ObserverTeleportTo");
static_assert(offsetof(TslPlayerController_ObserverTeleportTo, Location) == 0x000000, "Member 'TslPlayerController_ObserverTeleportTo::Location' has a wrong offset!");

// Function TslGame.TslPlayerController.OnCancelInteractionCast
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_OnCancelInteractionCast final
{
public:
	class UObject*                                CastObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_OnCancelInteractionCast) == 0x000008, "Wrong alignment on TslPlayerController_OnCancelInteractionCast");
static_assert(sizeof(TslPlayerController_OnCancelInteractionCast) == 0x000008, "Wrong size on TslPlayerController_OnCancelInteractionCast");
static_assert(offsetof(TslPlayerController_OnCancelInteractionCast, CastObject) == 0x000000, "Member 'TslPlayerController_OnCancelInteractionCast::CastObject' has a wrong offset!");

// Function TslGame.TslPlayerController.OnClickedReportButton
// 0x0002 (0x0002 - 0x0000)
struct TslPlayerController_OnClickedReportButton final
{
public:
	EReportCause                                  ReportCause;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubjectToReport                              SubjectToReport;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_OnClickedReportButton) == 0x000001, "Wrong alignment on TslPlayerController_OnClickedReportButton");
static_assert(sizeof(TslPlayerController_OnClickedReportButton) == 0x000002, "Wrong size on TslPlayerController_OnClickedReportButton");
static_assert(offsetof(TslPlayerController_OnClickedReportButton, ReportCause) == 0x000000, "Member 'TslPlayerController_OnClickedReportButton::ReportCause' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnClickedReportButton, SubjectToReport) == 0x000001, "Member 'TslPlayerController_OnClickedReportButton::SubjectToReport' has a wrong offset!");

// Function TslGame.TslPlayerController.OnFinishInteractionCast
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_OnFinishInteractionCast final
{
public:
	class UObject*                                CastObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_OnFinishInteractionCast) == 0x000008, "Wrong alignment on TslPlayerController_OnFinishInteractionCast");
static_assert(sizeof(TslPlayerController_OnFinishInteractionCast) == 0x000008, "Wrong size on TslPlayerController_OnFinishInteractionCast");
static_assert(offsetof(TslPlayerController_OnFinishInteractionCast, CastObject) == 0x000000, "Member 'TslPlayerController_OnFinishInteractionCast::CastObject' has a wrong offset!");

// Function TslGame.TslPlayerController.OnMoveToVehicleSeat
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_OnMoveToVehicleSeat final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_OnMoveToVehicleSeat) == 0x000001, "Wrong alignment on TslPlayerController_OnMoveToVehicleSeat");
static_assert(sizeof(TslPlayerController_OnMoveToVehicleSeat) == 0x000001, "Wrong size on TslPlayerController_OnMoveToVehicleSeat");
static_assert(offsetof(TslPlayerController_OnMoveToVehicleSeat, idx) == 0x000000, "Member 'TslPlayerController_OnMoveToVehicleSeat::idx' has a wrong offset!");

// Function TslGame.TslPlayerController.OnShowCastingBarWidget
// 0x0028 (0x0028 - 0x0000)
struct TslPlayerController_OnShowCastingBarWidget final
{
public:
	float                                         CastTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CastName;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          OnOff;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_OnShowCastingBarWidget) == 0x000008, "Wrong alignment on TslPlayerController_OnShowCastingBarWidget");
static_assert(sizeof(TslPlayerController_OnShowCastingBarWidget) == 0x000028, "Wrong size on TslPlayerController_OnShowCastingBarWidget");
static_assert(offsetof(TslPlayerController_OnShowCastingBarWidget, CastTime) == 0x000000, "Member 'TslPlayerController_OnShowCastingBarWidget::CastTime' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnShowCastingBarWidget, CastName) == 0x000008, "Member 'TslPlayerController_OnShowCastingBarWidget::CastName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnShowCastingBarWidget, OnOff) == 0x000020, "Member 'TslPlayerController_OnShowCastingBarWidget::OnOff' has a wrong offset!");

// Function TslGame.TslPlayerController.OnUpdateSpectatorCameraMode
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_OnUpdateSpectatorCameraMode final
{
public:
	class ATslCharacter*                          TslCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   InCameraName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbFirstPerson;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsInVehicle;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsScoping;                                      // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_OnUpdateSpectatorCameraMode) == 0x000008, "Wrong alignment on TslPlayerController_OnUpdateSpectatorCameraMode");
static_assert(sizeof(TslPlayerController_OnUpdateSpectatorCameraMode) == 0x000018, "Wrong size on TslPlayerController_OnUpdateSpectatorCameraMode");
static_assert(offsetof(TslPlayerController_OnUpdateSpectatorCameraMode, TslCharacter) == 0x000000, "Member 'TslPlayerController_OnUpdateSpectatorCameraMode::TslCharacter' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnUpdateSpectatorCameraMode, InCameraName) == 0x000008, "Member 'TslPlayerController_OnUpdateSpectatorCameraMode::InCameraName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnUpdateSpectatorCameraMode, InbFirstPerson) == 0x000010, "Member 'TslPlayerController_OnUpdateSpectatorCameraMode::InbFirstPerson' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnUpdateSpectatorCameraMode, InbIsInVehicle) == 0x000011, "Member 'TslPlayerController_OnUpdateSpectatorCameraMode::InbIsInVehicle' has a wrong offset!");
static_assert(offsetof(TslPlayerController_OnUpdateSpectatorCameraMode, InbIsScoping) == 0x000012, "Member 'TslPlayerController_OnUpdateSpectatorCameraMode::InbIsScoping' has a wrong offset!");

// Function TslGame.TslPlayerController.ReliablePing
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ReliablePing final
{
public:
	int32                                         SeqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DateTimeTick;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ReliablePing) == 0x000008, "Wrong alignment on TslPlayerController_ReliablePing");
static_assert(sizeof(TslPlayerController_ReliablePing) == 0x000010, "Wrong size on TslPlayerController_ReliablePing");
static_assert(offsetof(TslPlayerController_ReliablePing, SeqID) == 0x000000, "Member 'TslPlayerController_ReliablePing::SeqID' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ReliablePing, DateTimeTick) == 0x000008, "Member 'TslPlayerController_ReliablePing::DateTimeTick' has a wrong offset!");

// Function TslGame.TslPlayerController.ReliablePong
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ReliablePong final
{
public:
	int32                                         SeqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DateTimeTickFromServer;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ReliablePong) == 0x000008, "Wrong alignment on TslPlayerController_ReliablePong");
static_assert(sizeof(TslPlayerController_ReliablePong) == 0x000010, "Wrong size on TslPlayerController_ReliablePong");
static_assert(offsetof(TslPlayerController_ReliablePong, SeqID) == 0x000000, "Member 'TslPlayerController_ReliablePong::SeqID' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ReliablePong, DateTimeTickFromServer) == 0x000008, "Member 'TslPlayerController_ReliablePong::DateTimeTickFromServer' has a wrong offset!");

// Function TslGame.TslPlayerController.SaveGearProfile
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_SaveGearProfile final
{
public:
	int32                                         ProfileIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UItem>>              inArray;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_SaveGearProfile) == 0x000008, "Wrong alignment on TslPlayerController_SaveGearProfile");
static_assert(sizeof(TslPlayerController_SaveGearProfile) == 0x000018, "Wrong size on TslPlayerController_SaveGearProfile");
static_assert(offsetof(TslPlayerController_SaveGearProfile, ProfileIndex) == 0x000000, "Member 'TslPlayerController_SaveGearProfile::ProfileIndex' has a wrong offset!");
static_assert(offsetof(TslPlayerController_SaveGearProfile, inArray) == 0x000008, "Member 'TslPlayerController_SaveGearProfile::inArray' has a wrong offset!");

// Function TslGame.TslPlayerController.Say
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_Say final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_Say) == 0x000008, "Wrong alignment on TslPlayerController_Say");
static_assert(sizeof(TslPlayerController_Say) == 0x000010, "Wrong size on TslPlayerController_Say");
static_assert(offsetof(TslPlayerController_Say, Msg) == 0x000000, "Member 'TslPlayerController_Say::Msg' has a wrong offset!");

// Function TslGame.TslPlayerController.SendSystemMessage
// 0x0028 (0x0028 - 0x0000)
struct TslPlayerController_SendSystemMessage final
{
public:
	ESystemMessageType                            MessageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MessageDuration;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_SendSystemMessage) == 0x000008, "Wrong alignment on TslPlayerController_SendSystemMessage");
static_assert(sizeof(TslPlayerController_SendSystemMessage) == 0x000028, "Wrong size on TslPlayerController_SendSystemMessage");
static_assert(offsetof(TslPlayerController_SendSystemMessage, MessageType) == 0x000000, "Member 'TslPlayerController_SendSystemMessage::MessageType' has a wrong offset!");
static_assert(offsetof(TslPlayerController_SendSystemMessage, Message) == 0x000008, "Member 'TslPlayerController_SendSystemMessage::Message' has a wrong offset!");
static_assert(offsetof(TslPlayerController_SendSystemMessage, MessageDuration) == 0x000020, "Member 'TslPlayerController_SendSystemMessage::MessageDuration' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerAdmin
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerAdmin final
{
public:
	class FString                                 AdminCommand;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerAdmin) == 0x000008, "Wrong alignment on TslPlayerController_ServerAdmin");
static_assert(sizeof(TslPlayerController_ServerAdmin) == 0x000010, "Wrong size on TslPlayerController_ServerAdmin");
static_assert(offsetof(TslPlayerController_ServerAdmin, AdminCommand) == 0x000000, "Member 'TslPlayerController_ServerAdmin::AdminCommand' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerApplyReport
// 0x0030 (0x0030 - 0x0000)
struct TslPlayerController_ServerApplyReport final
{
public:
	EReportCause                                  ReportCause;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTslReportedInfo                       InReportedInfo;                                    // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerApplyReport) == 0x000008, "Wrong alignment on TslPlayerController_ServerApplyReport");
static_assert(sizeof(TslPlayerController_ServerApplyReport) == 0x000030, "Wrong size on TslPlayerController_ServerApplyReport");
static_assert(offsetof(TslPlayerController_ServerApplyReport, ReportCause) == 0x000000, "Member 'TslPlayerController_ServerApplyReport::ReportCause' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerApplyReport, InReportedInfo) == 0x000008, "Member 'TslPlayerController_ServerApplyReport::InReportedInfo' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerBEServerCommand
// 0x0040 (0x0040 - 0x0000)
struct TslPlayerController_ServerBEServerCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg0;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg1;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg2;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerBEServerCommand) == 0x000008, "Wrong alignment on TslPlayerController_ServerBEServerCommand");
static_assert(sizeof(TslPlayerController_ServerBEServerCommand) == 0x000040, "Wrong size on TslPlayerController_ServerBEServerCommand");
static_assert(offsetof(TslPlayerController_ServerBEServerCommand, Command) == 0x000000, "Member 'TslPlayerController_ServerBEServerCommand::Command' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBEServerCommand, Arg0) == 0x000010, "Member 'TslPlayerController_ServerBEServerCommand::Arg0' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBEServerCommand, Arg1) == 0x000020, "Member 'TslPlayerController_ServerBEServerCommand::Arg1' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBEServerCommand, Arg2) == 0x000030, "Member 'TslPlayerController_ServerBEServerCommand::Arg2' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerBroadCastCastingBar
// 0x0028 (0x0028 - 0x0000)
struct TslPlayerController_ServerBroadCastCastingBar final
{
public:
	float                                         CastTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CastName;                                          // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OnOff;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ServerBroadCastCastingBar) == 0x000008, "Wrong alignment on TslPlayerController_ServerBroadCastCastingBar");
static_assert(sizeof(TslPlayerController_ServerBroadCastCastingBar) == 0x000028, "Wrong size on TslPlayerController_ServerBroadCastCastingBar");
static_assert(offsetof(TslPlayerController_ServerBroadCastCastingBar, CastTime) == 0x000000, "Member 'TslPlayerController_ServerBroadCastCastingBar::CastTime' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBroadCastCastingBar, CastName) == 0x000008, "Member 'TslPlayerController_ServerBroadCastCastingBar::CastName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBroadCastCastingBar, OnOff) == 0x000020, "Member 'TslPlayerController_ServerBroadCastCastingBar::OnOff' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerBroadCastUsedUpdateCameraMode
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerBroadCastUsedUpdateCameraMode final
{
public:
	struct FName                                   InCameraName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbFirstPerson;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsInVehicle;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsScoping;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode) == 0x000004, "Wrong alignment on TslPlayerController_ServerBroadCastUsedUpdateCameraMode");
static_assert(sizeof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode) == 0x000010, "Wrong size on TslPlayerController_ServerBroadCastUsedUpdateCameraMode");
static_assert(offsetof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode, InCameraName) == 0x000000, "Member 'TslPlayerController_ServerBroadCastUsedUpdateCameraMode::InCameraName' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode, InbFirstPerson) == 0x000008, "Member 'TslPlayerController_ServerBroadCastUsedUpdateCameraMode::InbFirstPerson' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode, InbIsInVehicle) == 0x000009, "Member 'TslPlayerController_ServerBroadCastUsedUpdateCameraMode::InbIsInVehicle' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerBroadCastUsedUpdateCameraMode, InbIsScoping) == 0x00000A, "Member 'TslPlayerController_ServerBroadCastUsedUpdateCameraMode::InbIsScoping' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerCancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerCancelInteraction final
{
public:
	class UActorComponent*                        InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerCancelInteraction) == 0x000008, "Wrong alignment on TslPlayerController_ServerCancelInteraction");
static_assert(sizeof(TslPlayerController_ServerCancelInteraction) == 0x000008, "Wrong size on TslPlayerController_ServerCancelInteraction");
static_assert(offsetof(TslPlayerController_ServerCancelInteraction, InteractionComponent) == 0x000000, "Member 'TslPlayerController_ServerCancelInteraction::InteractionComponent' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerCheat) == 0x000008, "Wrong alignment on TslPlayerController_ServerCheat");
static_assert(sizeof(TslPlayerController_ServerCheat) == 0x000010, "Wrong size on TslPlayerController_ServerCheat");
static_assert(offsetof(TslPlayerController_ServerCheat, Msg) == 0x000000, "Member 'TslPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerKickCharacter
// 0x0020 (0x0020 - 0x0000)
struct TslPlayerController_ServerKickCharacter final
{
public:
	class ATslCharacter*                          TslCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerKickCharacter) == 0x000008, "Wrong alignment on TslPlayerController_ServerKickCharacter");
static_assert(sizeof(TslPlayerController_ServerKickCharacter) == 0x000020, "Wrong size on TslPlayerController_ServerKickCharacter");
static_assert(offsetof(TslPlayerController_ServerKickCharacter, TslCharacter) == 0x000000, "Member 'TslPlayerController_ServerKickCharacter::TslCharacter' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerKickCharacter, Reason) == 0x000008, "Member 'TslPlayerController_ServerKickCharacter::Reason' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerMoveToVehicleSeat
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ServerMoveToVehicleSeat final
{
public:
	int32                                         SeatIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerMoveToVehicleSeat) == 0x000004, "Wrong alignment on TslPlayerController_ServerMoveToVehicleSeat");
static_assert(sizeof(TslPlayerController_ServerMoveToVehicleSeat) == 0x000004, "Wrong size on TslPlayerController_ServerMoveToVehicleSeat");
static_assert(offsetof(TslPlayerController_ServerMoveToVehicleSeat, SeatIndex) == 0x000000, "Member 'TslPlayerController_ServerMoveToVehicleSeat::SeatIndex' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerNextSetViewTarget
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_ServerNextSetViewTarget final
{
public:
	bool                                          bIsPrev;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerNextSetViewTarget) == 0x000001, "Wrong alignment on TslPlayerController_ServerNextSetViewTarget");
static_assert(sizeof(TslPlayerController_ServerNextSetViewTarget) == 0x000001, "Wrong size on TslPlayerController_ServerNextSetViewTarget");
static_assert(offsetof(TslPlayerController_ServerNextSetViewTarget, bIsPrev) == 0x000000, "Member 'TslPlayerController_ServerNextSetViewTarget::bIsPrev' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerNotifyHitToGlassWindow
// 0x0090 (0x0090 - 0x0000)
struct TslPlayerController_ServerNotifyHitToGlassWindow final
{
public:
	class UTslGlassWindowComponent*               GlassWindowComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerNotifyHitToGlassWindow) == 0x000008, "Wrong alignment on TslPlayerController_ServerNotifyHitToGlassWindow");
static_assert(sizeof(TslPlayerController_ServerNotifyHitToGlassWindow) == 0x000090, "Wrong size on TslPlayerController_ServerNotifyHitToGlassWindow");
static_assert(offsetof(TslPlayerController_ServerNotifyHitToGlassWindow, GlassWindowComponent) == 0x000000, "Member 'TslPlayerController_ServerNotifyHitToGlassWindow::GlassWindowComponent' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerNotifyHitToGlassWindow, Hit) == 0x000008, "Member 'TslPlayerController_ServerNotifyHitToGlassWindow::Hit' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerNotifyHitToGlassWindowInst
// 0x0090 (0x0090 - 0x0000)
struct TslPlayerController_ServerNotifyHitToGlassWindowInst final
{
public:
	class UTslInstancedGlassWindowComponent*      GlassWindowInstComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerNotifyHitToGlassWindowInst) == 0x000008, "Wrong alignment on TslPlayerController_ServerNotifyHitToGlassWindowInst");
static_assert(sizeof(TslPlayerController_ServerNotifyHitToGlassWindowInst) == 0x000090, "Wrong size on TslPlayerController_ServerNotifyHitToGlassWindowInst");
static_assert(offsetof(TslPlayerController_ServerNotifyHitToGlassWindowInst, GlassWindowInstComponent) == 0x000000, "Member 'TslPlayerController_ServerNotifyHitToGlassWindowInst::GlassWindowInstComponent' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerNotifyHitToGlassWindowInst, Hit) == 0x000008, "Member 'TslPlayerController_ServerNotifyHitToGlassWindowInst::Hit' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerPickUpDroppedItem
// 0x0020 (0x0020 - 0x0000)
struct TslPlayerController_ServerPickUpDroppedItem final
{
public:
	class UObject*                                DroppedItemObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   TargetContainer;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerPickUpDroppedItem) == 0x000008, "Wrong alignment on TslPlayerController_ServerPickUpDroppedItem");
static_assert(sizeof(TslPlayerController_ServerPickUpDroppedItem) == 0x000020, "Wrong size on TslPlayerController_ServerPickUpDroppedItem");
static_assert(offsetof(TslPlayerController_ServerPickUpDroppedItem, DroppedItemObject) == 0x000000, "Member 'TslPlayerController_ServerPickUpDroppedItem::DroppedItemObject' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerPickUpDroppedItem, TargetContainer) == 0x000008, "Member 'TslPlayerController_ServerPickUpDroppedItem::TargetContainer' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerPickUpDroppedItem, Options) == 0x000010, "Member 'TslPlayerController_ServerPickUpDroppedItem::Options' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerPickUpItemFromPackage
// 0x0028 (0x0028 - 0x0000)
struct TslPlayerController_ServerPickUpItemFromPackage final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItemPackage*                           Package;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   TargetContainer;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerPickUpItemFromPackage) == 0x000008, "Wrong alignment on TslPlayerController_ServerPickUpItemFromPackage");
static_assert(sizeof(TslPlayerController_ServerPickUpItemFromPackage) == 0x000028, "Wrong size on TslPlayerController_ServerPickUpItemFromPackage");
static_assert(offsetof(TslPlayerController_ServerPickUpItemFromPackage, Item) == 0x000000, "Member 'TslPlayerController_ServerPickUpItemFromPackage::Item' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerPickUpItemFromPackage, Package) == 0x000008, "Member 'TslPlayerController_ServerPickUpItemFromPackage::Package' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerPickUpItemFromPackage, TargetContainer) == 0x000010, "Member 'TslPlayerController_ServerPickUpItemFromPackage::TargetContainer' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerPickUpItemFromPackage, Options) == 0x000018, "Member 'TslPlayerController_ServerPickUpItemFromPackage::Options' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSay
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSay) == 0x000008, "Wrong alignment on TslPlayerController_ServerSay");
static_assert(sizeof(TslPlayerController_ServerSay) == 0x000010, "Wrong size on TslPlayerController_ServerSay");
static_assert(offsetof(TslPlayerController_ServerSay, Msg) == 0x000000, "Member 'TslPlayerController_ServerSay::Msg' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSendPacketReliable
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerSendPacketReliable final
{
public:
	TArray<uint8>                                 Packet;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSendPacketReliable) == 0x000008, "Wrong alignment on TslPlayerController_ServerSendPacketReliable");
static_assert(sizeof(TslPlayerController_ServerSendPacketReliable) == 0x000010, "Wrong size on TslPlayerController_ServerSendPacketReliable");
static_assert(offsetof(TslPlayerController_ServerSendPacketReliable, Packet) == 0x000000, "Member 'TslPlayerController_ServerSendPacketReliable::Packet' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSendPacketUnreliable
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerSendPacketUnreliable final
{
public:
	TArray<uint8>                                 Packet;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSendPacketUnreliable) == 0x000008, "Wrong alignment on TslPlayerController_ServerSendPacketUnreliable");
static_assert(sizeof(TslPlayerController_ServerSendPacketUnreliable) == 0x000010, "Wrong size on TslPlayerController_ServerSendPacketUnreliable");
static_assert(offsetof(TslPlayerController_ServerSendPacketUnreliable, Packet) == 0x000000, "Member 'TslPlayerController_ServerSendPacketUnreliable::Packet' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSetAccumViewRotation
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ServerSetAccumViewRotation final
{
public:
	struct FVector_NetQuantizeNormal              InAccumViewRotation;                               // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSetAccumViewRotation) == 0x000004, "Wrong alignment on TslPlayerController_ServerSetAccumViewRotation");
static_assert(sizeof(TslPlayerController_ServerSetAccumViewRotation) == 0x00000C, "Wrong size on TslPlayerController_ServerSetAccumViewRotation");
static_assert(offsetof(TslPlayerController_ServerSetAccumViewRotation, InAccumViewRotation) == 0x000000, "Member 'TslPlayerController_ServerSetAccumViewRotation::InAccumViewRotation' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSetClientFps
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ServerSetClientFps final
{
public:
	float                                         Fps;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSetClientFps) == 0x000004, "Wrong alignment on TslPlayerController_ServerSetClientFps");
static_assert(sizeof(TslPlayerController_ServerSetClientFps) == 0x000004, "Wrong size on TslPlayerController_ServerSetClientFps");
static_assert(offsetof(TslPlayerController_ServerSetClientFps, Fps) == 0x000000, "Member 'TslPlayerController_ServerSetClientFps::Fps' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSetIsReviving
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_ServerSetIsReviving final
{
public:
	bool                                          InbIsReviving;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSetIsReviving) == 0x000001, "Wrong alignment on TslPlayerController_ServerSetIsReviving");
static_assert(sizeof(TslPlayerController_ServerSetIsReviving) == 0x000001, "Wrong size on TslPlayerController_ServerSetIsReviving");
static_assert(offsetof(TslPlayerController_ServerSetIsReviving, InbIsReviving) == 0x000000, "Member 'TslPlayerController_ServerSetIsReviving::InbIsReviving' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSetThirdPerson
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_ServerSetThirdPerson final
{
public:
	bool                                          bNewThirdPerson;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSetThirdPerson) == 0x000001, "Wrong alignment on TslPlayerController_ServerSetThirdPerson");
static_assert(sizeof(TslPlayerController_ServerSetThirdPerson) == 0x000001, "Wrong size on TslPlayerController_ServerSetThirdPerson");
static_assert(offsetof(TslPlayerController_ServerSetThirdPerson, bNewThirdPerson) == 0x000000, "Member 'TslPlayerController_ServerSetThirdPerson::bNewThirdPerson' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerSetViewTarget
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerSetViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerSetViewTarget) == 0x000008, "Wrong alignment on TslPlayerController_ServerSetViewTarget");
static_assert(sizeof(TslPlayerController_ServerSetViewTarget) == 0x000008, "Wrong size on TslPlayerController_ServerSetViewTarget");
static_assert(offsetof(TslPlayerController_ServerSetViewTarget, NewViewTarget) == 0x000000, "Member 'TslPlayerController_ServerSetViewTarget::NewViewTarget' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerStartHoldRotation
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_ServerStartHoldRotation final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerStartHoldRotation) == 0x000004, "Wrong alignment on TslPlayerController_ServerStartHoldRotation");
static_assert(sizeof(TslPlayerController_ServerStartHoldRotation) == 0x00000C, "Wrong size on TslPlayerController_ServerStartHoldRotation");
static_assert(offsetof(TslPlayerController_ServerStartHoldRotation, Current) == 0x000000, "Member 'TslPlayerController_ServerStartHoldRotation::Current' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerStartInteraction
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerStartInteraction final
{
public:
	class UInteractionComponent*                  InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerStartInteraction) == 0x000008, "Wrong alignment on TslPlayerController_ServerStartInteraction");
static_assert(sizeof(TslPlayerController_ServerStartInteraction) == 0x000008, "Wrong size on TslPlayerController_ServerStartInteraction");
static_assert(offsetof(TslPlayerController_ServerStartInteraction, InteractionComponent) == 0x000000, "Member 'TslPlayerController_ServerStartInteraction::InteractionComponent' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerStartInteractionByComponent
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerStartInteractionByComponent final
{
public:
	class UActorComponent*                        InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerStartInteractionByComponent) == 0x000008, "Wrong alignment on TslPlayerController_ServerStartInteractionByComponent");
static_assert(sizeof(TslPlayerController_ServerStartInteractionByComponent) == 0x000008, "Wrong size on TslPlayerController_ServerStartInteractionByComponent");
static_assert(offsetof(TslPlayerController_ServerStartInteractionByComponent, InteractionComponent) == 0x000000, "Member 'TslPlayerController_ServerStartInteractionByComponent::InteractionComponent' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerStopHoldRotation
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_ServerStopHoldRotation final
{
public:
	struct FRotator                               DeltaRotation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseInterp;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ServerStopHoldRotation) == 0x000004, "Wrong alignment on TslPlayerController_ServerStopHoldRotation");
static_assert(sizeof(TslPlayerController_ServerStopHoldRotation) == 0x000010, "Wrong size on TslPlayerController_ServerStopHoldRotation");
static_assert(offsetof(TslPlayerController_ServerStopHoldRotation, DeltaRotation) == 0x000000, "Member 'TslPlayerController_ServerStopHoldRotation::DeltaRotation' has a wrong offset!");
static_assert(offsetof(TslPlayerController_ServerStopHoldRotation, bUseInterp) == 0x00000C, "Member 'TslPlayerController_ServerStopHoldRotation::bUseInterp' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerTryInteract
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerTryInteract final
{
public:
	class AActor*                                 TargetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerTryInteract) == 0x000008, "Wrong alignment on TslPlayerController_ServerTryInteract");
static_assert(sizeof(TslPlayerController_ServerTryInteract) == 0x000008, "Wrong size on TslPlayerController_ServerTryInteract");
static_assert(offsetof(TslPlayerController_ServerTryInteract, TargetObject) == 0x000000, "Member 'TslPlayerController_ServerTryInteract::TargetObject' has a wrong offset!");

// Function TslGame.TslPlayerController.ServerTryInteractByComponent
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_ServerTryInteractByComponent final
{
public:
	class UActorComponent*                        TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_ServerTryInteractByComponent) == 0x000008, "Wrong alignment on TslPlayerController_ServerTryInteractByComponent");
static_assert(sizeof(TslPlayerController_ServerTryInteractByComponent) == 0x000008, "Wrong size on TslPlayerController_ServerTryInteractByComponent");
static_assert(offsetof(TslPlayerController_ServerTryInteractByComponent, TargetComponent) == 0x000000, "Member 'TslPlayerController_ServerTryInteractByComponent::TargetComponent' has a wrong offset!");

// Function TslGame.TslPlayerController.SetCanSeeTerrainThroughFogInTheAir
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_SetCanSeeTerrainThroughFogInTheAir final
{
public:
	bool                                          bCanSee;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_SetCanSeeTerrainThroughFogInTheAir) == 0x000001, "Wrong alignment on TslPlayerController_SetCanSeeTerrainThroughFogInTheAir");
static_assert(sizeof(TslPlayerController_SetCanSeeTerrainThroughFogInTheAir) == 0x000001, "Wrong size on TslPlayerController_SetCanSeeTerrainThroughFogInTheAir");
static_assert(offsetof(TslPlayerController_SetCanSeeTerrainThroughFogInTheAir, bCanSee) == 0x000000, "Member 'TslPlayerController_SetCanSeeTerrainThroughFogInTheAir::bCanSee' has a wrong offset!");

// Function TslGame.TslPlayerController.SetCustomDepth
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_SetCustomDepth final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_SetCustomDepth) == 0x000001, "Wrong alignment on TslPlayerController_SetCustomDepth");
static_assert(sizeof(TslPlayerController_SetCustomDepth) == 0x000001, "Wrong size on TslPlayerController_SetCustomDepth");
static_assert(offsetof(TslPlayerController_SetCustomDepth, bOn) == 0x000000, "Member 'TslPlayerController_SetCustomDepth::bOn' has a wrong offset!");

// Function TslGame.TslPlayerController.SetDefaultFOV
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_SetDefaultFOV final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_SetDefaultFOV) == 0x000004, "Wrong alignment on TslPlayerController_SetDefaultFOV");
static_assert(sizeof(TslPlayerController_SetDefaultFOV) == 0x000004, "Wrong size on TslPlayerController_SetDefaultFOV");
static_assert(offsetof(TslPlayerController_SetDefaultFOV, NewFOV) == 0x000000, "Member 'TslPlayerController_SetDefaultFOV::NewFOV' has a wrong offset!");

// Function TslGame.TslPlayerController.ShowGotoLobbyPopUp
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_ShowGotoLobbyPopUp final
{
public:
	EPopupButtonID                                ButtonID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_ShowGotoLobbyPopUp) == 0x000001, "Wrong alignment on TslPlayerController_ShowGotoLobbyPopUp");
static_assert(sizeof(TslPlayerController_ShowGotoLobbyPopUp) == 0x000004, "Wrong size on TslPlayerController_ShowGotoLobbyPopUp");
static_assert(offsetof(TslPlayerController_ShowGotoLobbyPopUp, ButtonID) == 0x000000, "Member 'TslPlayerController_ShowGotoLobbyPopUp::ButtonID' has a wrong offset!");

// Function TslGame.TslPlayerController.SimulateInputKey
// 0x0020 (0x0020 - 0x0000)
struct TslPlayerController_SimulateInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerController_SimulateInputKey) == 0x000008, "Wrong alignment on TslPlayerController_SimulateInputKey");
static_assert(sizeof(TslPlayerController_SimulateInputKey) == 0x000020, "Wrong size on TslPlayerController_SimulateInputKey");
static_assert(offsetof(TslPlayerController_SimulateInputKey, Key) == 0x000000, "Member 'TslPlayerController_SimulateInputKey::Key' has a wrong offset!");
static_assert(offsetof(TslPlayerController_SimulateInputKey, bPressed) == 0x000018, "Member 'TslPlayerController_SimulateInputKey::bPressed' has a wrong offset!");

// Function TslGame.TslPlayerController.UnreliablePing
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_UnreliablePing final
{
public:
	int32                                         SeqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DateTimeTick;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_UnreliablePing) == 0x000008, "Wrong alignment on TslPlayerController_UnreliablePing");
static_assert(sizeof(TslPlayerController_UnreliablePing) == 0x000010, "Wrong size on TslPlayerController_UnreliablePing");
static_assert(offsetof(TslPlayerController_UnreliablePing, SeqID) == 0x000000, "Member 'TslPlayerController_UnreliablePing::SeqID' has a wrong offset!");
static_assert(offsetof(TslPlayerController_UnreliablePing, DateTimeTick) == 0x000008, "Member 'TslPlayerController_UnreliablePing::DateTimeTick' has a wrong offset!");

// Function TslGame.TslPlayerController.UnreliablePong
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_UnreliablePong final
{
public:
	int32                                         SeqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DateTimeTickFromServer;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_UnreliablePong) == 0x000008, "Wrong alignment on TslPlayerController_UnreliablePong");
static_assert(sizeof(TslPlayerController_UnreliablePong) == 0x000010, "Wrong size on TslPlayerController_UnreliablePong");
static_assert(offsetof(TslPlayerController_UnreliablePong, SeqID) == 0x000000, "Member 'TslPlayerController_UnreliablePong::SeqID' has a wrong offset!");
static_assert(offsetof(TslPlayerController_UnreliablePong, DateTimeTickFromServer) == 0x000008, "Member 'TslPlayerController_UnreliablePong::DateTimeTickFromServer' has a wrong offset!");

// Function TslGame.TslPlayerController.CanReport
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_CanReport final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_CanReport) == 0x000001, "Wrong alignment on TslPlayerController_CanReport");
static_assert(sizeof(TslPlayerController_CanReport) == 0x000001, "Wrong size on TslPlayerController_CanReport");
static_assert(offsetof(TslPlayerController_CanReport, ReturnValue) == 0x000000, "Member 'TslPlayerController_CanReport::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.CanSeeTerrainThroughFogInTheAir
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_CanSeeTerrainThroughFogInTheAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_CanSeeTerrainThroughFogInTheAir) == 0x000001, "Wrong alignment on TslPlayerController_CanSeeTerrainThroughFogInTheAir");
static_assert(sizeof(TslPlayerController_CanSeeTerrainThroughFogInTheAir) == 0x000001, "Wrong size on TslPlayerController_CanSeeTerrainThroughFogInTheAir");
static_assert(offsetof(TslPlayerController_CanSeeTerrainThroughFogInTheAir, ReturnValue) == 0x000000, "Member 'TslPlayerController_CanSeeTerrainThroughFogInTheAir::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.CompleteReportKiller
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_CompleteReportKiller final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_CompleteReportKiller) == 0x000001, "Wrong alignment on TslPlayerController_CompleteReportKiller");
static_assert(sizeof(TslPlayerController_CompleteReportKiller) == 0x000001, "Wrong size on TslPlayerController_CompleteReportKiller");
static_assert(offsetof(TslPlayerController_CompleteReportKiller, ReturnValue) == 0x000000, "Member 'TslPlayerController_CompleteReportKiller::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetAliveTeamMemberCount
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_GetAliveTeamMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetAliveTeamMemberCount) == 0x000004, "Wrong alignment on TslPlayerController_GetAliveTeamMemberCount");
static_assert(sizeof(TslPlayerController_GetAliveTeamMemberCount) == 0x000004, "Wrong size on TslPlayerController_GetAliveTeamMemberCount");
static_assert(offsetof(TslPlayerController_GetAliveTeamMemberCount, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetAliveTeamMemberCount::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetCanAllSpectate
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_GetCanAllSpectate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetCanAllSpectate) == 0x000001, "Wrong alignment on TslPlayerController_GetCanAllSpectate");
static_assert(sizeof(TslPlayerController_GetCanAllSpectate) == 0x000001, "Wrong size on TslPlayerController_GetCanAllSpectate");
static_assert(offsetof(TslPlayerController_GetCanAllSpectate, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetCanAllSpectate::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetClientTeam
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_GetClientTeam final
{
public:
	bool                                          IncludeSelf;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATeam*>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetClientTeam) == 0x000008, "Wrong alignment on TslPlayerController_GetClientTeam");
static_assert(sizeof(TslPlayerController_GetClientTeam) == 0x000018, "Wrong size on TslPlayerController_GetClientTeam");
static_assert(offsetof(TslPlayerController_GetClientTeam, IncludeSelf) == 0x000000, "Member 'TslPlayerController_GetClientTeam::IncludeSelf' has a wrong offset!");
static_assert(offsetof(TslPlayerController_GetClientTeam, ReturnValue) == 0x000008, "Member 'TslPlayerController_GetClientTeam::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetKillerName
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetKillerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetKillerName) == 0x000008, "Wrong alignment on TslPlayerController_GetKillerName");
static_assert(sizeof(TslPlayerController_GetKillerName) == 0x000010, "Wrong size on TslPlayerController_GetKillerName");
static_assert(offsetof(TslPlayerController_GetKillerName, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetKillerName::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetObserverAuthorityType
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_GetObserverAuthorityType final
{
public:
	EObserverAuthorityType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetObserverAuthorityType) == 0x000001, "Wrong alignment on TslPlayerController_GetObserverAuthorityType");
static_assert(sizeof(TslPlayerController_GetObserverAuthorityType) == 0x000001, "Wrong size on TslPlayerController_GetObserverAuthorityType");
static_assert(offsetof(TslPlayerController_GetObserverAuthorityType, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetObserverAuthorityType::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetObserverCameraMode
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_GetObserverCameraMode final
{
public:
	EObserverCameraMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetObserverCameraMode) == 0x000001, "Wrong alignment on TslPlayerController_GetObserverCameraMode");
static_assert(sizeof(TslPlayerController_GetObserverCameraMode) == 0x000001, "Wrong size on TslPlayerController_GetObserverCameraMode");
static_assert(offsetof(TslPlayerController_GetObserverCameraMode, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetObserverCameraMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetOtherCastingName
// 0x0018 (0x0018 - 0x0000)
struct TslPlayerController_GetOtherCastingName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetOtherCastingName) == 0x000008, "Wrong alignment on TslPlayerController_GetOtherCastingName");
static_assert(sizeof(TslPlayerController_GetOtherCastingName) == 0x000018, "Wrong size on TslPlayerController_GetOtherCastingName");
static_assert(offsetof(TslPlayerController_GetOtherCastingName, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetOtherCastingName::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetOtherCastTime
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_GetOtherCastTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetOtherCastTime) == 0x000004, "Wrong alignment on TslPlayerController_GetOtherCastTime");
static_assert(sizeof(TslPlayerController_GetOtherCastTime) == 0x000004, "Wrong size on TslPlayerController_GetOtherCastTime");
static_assert(offsetof(TslPlayerController_GetOtherCastTime, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetOtherCastTime::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetOtherElapsedCastTime
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_GetOtherElapsedCastTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetOtherElapsedCastTime) == 0x000004, "Wrong alignment on TslPlayerController_GetOtherElapsedCastTime");
static_assert(sizeof(TslPlayerController_GetOtherElapsedCastTime) == 0x000004, "Wrong size on TslPlayerController_GetOtherElapsedCastTime");
static_assert(offsetof(TslPlayerController_GetOtherElapsedCastTime, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetOtherElapsedCastTime::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetReplicateCarePackageItems
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetReplicateCarePackageItems final
{
public:
	TArray<class ACarePackageItem*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetReplicateCarePackageItems) == 0x000008, "Wrong alignment on TslPlayerController_GetReplicateCarePackageItems");
static_assert(sizeof(TslPlayerController_GetReplicateCarePackageItems) == 0x000010, "Wrong size on TslPlayerController_GetReplicateCarePackageItems");
static_assert(offsetof(TslPlayerController_GetReplicateCarePackageItems, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetReplicateCarePackageItems::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetReplicateCharacters
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetReplicateCharacters final
{
public:
	TArray<class ATslCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetReplicateCharacters) == 0x000008, "Wrong alignment on TslPlayerController_GetReplicateCharacters");
static_assert(sizeof(TslPlayerController_GetReplicateCharacters) == 0x000010, "Wrong size on TslPlayerController_GetReplicateCharacters");
static_assert(offsetof(TslPlayerController_GetReplicateCharacters, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetReplicateCharacters::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetReplicateTeamMembers
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetReplicateTeamMembers final
{
public:
	TArray<class ATslCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetReplicateTeamMembers) == 0x000008, "Wrong alignment on TslPlayerController_GetReplicateTeamMembers");
static_assert(sizeof(TslPlayerController_GetReplicateTeamMembers) == 0x000010, "Wrong size on TslPlayerController_GetReplicateTeamMembers");
static_assert(offsetof(TslPlayerController_GetReplicateTeamMembers, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetReplicateTeamMembers::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetSpectatingPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetSpectatingPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetSpectatingPlayerName) == 0x000008, "Wrong alignment on TslPlayerController_GetSpectatingPlayerName");
static_assert(sizeof(TslPlayerController_GetSpectatingPlayerName) == 0x000010, "Wrong size on TslPlayerController_GetSpectatingPlayerName");
static_assert(offsetof(TslPlayerController_GetSpectatingPlayerName, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetSpectatingPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetTargetViewRotation
// 0x000C (0x000C - 0x0000)
struct TslPlayerController_GetTargetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetTargetViewRotation) == 0x000004, "Wrong alignment on TslPlayerController_GetTargetViewRotation");
static_assert(sizeof(TslPlayerController_GetTargetViewRotation) == 0x00000C, "Wrong size on TslPlayerController_GetTargetViewRotation");
static_assert(offsetof(TslPlayerController_GetTargetViewRotation, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetTargetViewRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetTeamMemberCount
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerController_GetTeamMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetTeamMemberCount) == 0x000004, "Wrong alignment on TslPlayerController_GetTeamMemberCount");
static_assert(sizeof(TslPlayerController_GetTeamMemberCount) == 0x000004, "Wrong size on TslPlayerController_GetTeamMemberCount");
static_assert(offsetof(TslPlayerController_GetTeamMemberCount, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetTeamMemberCount::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetTslCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_GetTslCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetTslCharacter) == 0x000008, "Wrong alignment on TslPlayerController_GetTslCharacter");
static_assert(sizeof(TslPlayerController_GetTslCharacter) == 0x000008, "Wrong size on TslPlayerController_GetTslCharacter");
static_assert(offsetof(TslPlayerController_GetTslCharacter, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetTslPlayerMatchResultInfos
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerController_GetTslPlayerMatchResultInfos final
{
public:
	TArray<struct FTslPlayerMatchResultInfo>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetTslPlayerMatchResultInfos) == 0x000008, "Wrong alignment on TslPlayerController_GetTslPlayerMatchResultInfos");
static_assert(sizeof(TslPlayerController_GetTslPlayerMatchResultInfos) == 0x000010, "Wrong size on TslPlayerController_GetTslPlayerMatchResultInfos");
static_assert(offsetof(TslPlayerController_GetTslPlayerMatchResultInfos, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetTslPlayerMatchResultInfos::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetViewTargetTeam
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_GetViewTargetTeam final
{
public:
	class ATeam*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetViewTargetTeam) == 0x000008, "Wrong alignment on TslPlayerController_GetViewTargetTeam");
static_assert(sizeof(TslPlayerController_GetViewTargetTeam) == 0x000008, "Wrong size on TslPlayerController_GetViewTargetTeam");
static_assert(offsetof(TslPlayerController_GetViewTargetTeam, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetViewTargetTeam::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetViewTargetTslCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_GetViewTargetTslCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetViewTargetTslCharacter) == 0x000008, "Wrong alignment on TslPlayerController_GetViewTargetTslCharacter");
static_assert(sizeof(TslPlayerController_GetViewTargetTslCharacter) == 0x000008, "Wrong size on TslPlayerController_GetViewTargetTslCharacter");
static_assert(offsetof(TslPlayerController_GetViewTargetTslCharacter, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetViewTargetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.GetVivoxComponent
// 0x0008 (0x0008 - 0x0000)
struct TslPlayerController_GetVivoxComponent final
{
public:
	class UVivoxComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_GetVivoxComponent) == 0x000008, "Wrong alignment on TslPlayerController_GetVivoxComponent");
static_assert(sizeof(TslPlayerController_GetVivoxComponent) == 0x000008, "Wrong size on TslPlayerController_GetVivoxComponent");
static_assert(offsetof(TslPlayerController_GetVivoxComponent, ReturnValue) == 0x000000, "Member 'TslPlayerController_GetVivoxComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsGameInputAllowed
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsGameInputAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsGameInputAllowed) == 0x000001, "Wrong alignment on TslPlayerController_IsGameInputAllowed");
static_assert(sizeof(TslPlayerController_IsGameInputAllowed) == 0x000001, "Wrong size on TslPlayerController_IsGameInputAllowed");
static_assert(offsetof(TslPlayerController_IsGameInputAllowed, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsGameInputAllowed::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsGroggying
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsGroggying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsGroggying) == 0x000001, "Wrong alignment on TslPlayerController_IsGroggying");
static_assert(sizeof(TslPlayerController_IsGroggying) == 0x000001, "Wrong size on TslPlayerController_IsGroggying");
static_assert(offsetof(TslPlayerController_IsGroggying, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsGroggying::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsHighPing
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsHighPing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsHighPing) == 0x000001, "Wrong alignment on TslPlayerController_IsHighPing");
static_assert(sizeof(TslPlayerController_IsHighPing) == 0x000001, "Wrong size on TslPlayerController_IsHighPing");
static_assert(offsetof(TslPlayerController_IsHighPing, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsHighPing::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsItemStackCountHandlingMode
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsItemStackCountHandlingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsItemStackCountHandlingMode) == 0x000001, "Wrong alignment on TslPlayerController_IsItemStackCountHandlingMode");
static_assert(sizeof(TslPlayerController_IsItemStackCountHandlingMode) == 0x000001, "Wrong size on TslPlayerController_IsItemStackCountHandlingMode");
static_assert(offsetof(TslPlayerController_IsItemStackCountHandlingMode, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsItemStackCountHandlingMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsObserving
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsObserving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsObserving) == 0x000001, "Wrong alignment on TslPlayerController_IsObserving");
static_assert(sizeof(TslPlayerController_IsObserving) == 0x000001, "Wrong size on TslPlayerController_IsObserving");
static_assert(offsetof(TslPlayerController_IsObserving, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsObserving::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsReplaying
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsReplaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsReplaying) == 0x000001, "Wrong alignment on TslPlayerController_IsReplaying");
static_assert(sizeof(TslPlayerController_IsReplaying) == 0x000001, "Wrong size on TslPlayerController_IsReplaying");
static_assert(offsetof(TslPlayerController_IsReplaying, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsReplaying::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsSameObservingCameraMode
// 0x0002 (0x0002 - 0x0000)
struct TslPlayerController_IsSameObservingCameraMode final
{
public:
	EObserverCameraMode                           CameraType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsSameObservingCameraMode) == 0x000001, "Wrong alignment on TslPlayerController_IsSameObservingCameraMode");
static_assert(sizeof(TslPlayerController_IsSameObservingCameraMode) == 0x000002, "Wrong size on TslPlayerController_IsSameObservingCameraMode");
static_assert(offsetof(TslPlayerController_IsSameObservingCameraMode, CameraType) == 0x000000, "Member 'TslPlayerController_IsSameObservingCameraMode::CameraType' has a wrong offset!");
static_assert(offsetof(TslPlayerController_IsSameObservingCameraMode, ReturnValue) == 0x000001, "Member 'TslPlayerController_IsSameObservingCameraMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsSpectating) == 0x000001, "Wrong alignment on TslPlayerController_IsSpectating");
static_assert(sizeof(TslPlayerController_IsSpectating) == 0x000001, "Wrong size on TslPlayerController_IsSpectating");
static_assert(offsetof(TslPlayerController_IsSpectating, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsSpectating::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerController.IsSpectatorState
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerController_IsSpectatorState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerController_IsSpectatorState) == 0x000001, "Wrong alignment on TslPlayerController_IsSpectatorState");
static_assert(sizeof(TslPlayerController_IsSpectatorState) == 0x000001, "Wrong size on TslPlayerController_IsSpectatorState");
static_assert(offsetof(TslPlayerController_IsSpectatorState, ReturnValue) == 0x000000, "Member 'TslPlayerController_IsSpectatorState::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct SlotInterface_GetIconTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetIconTexture) == 0x000008, "Wrong alignment on SlotInterface_GetIconTexture");
static_assert(sizeof(SlotInterface_GetIconTexture) == 0x000008, "Wrong size on SlotInterface_GetIconTexture");
static_assert(offsetof(SlotInterface_GetIconTexture, ReturnValue) == 0x000000, "Member 'SlotInterface_GetIconTexture::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetDropSound
// 0x0008 (0x0008 - 0x0000)
struct SlotInterface_GetDropSound final
{
public:
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetDropSound) == 0x000008, "Wrong alignment on SlotInterface_GetDropSound");
static_assert(sizeof(SlotInterface_GetDropSound) == 0x000008, "Wrong size on SlotInterface_GetDropSound");
static_assert(offsetof(SlotInterface_GetDropSound, ReturnValue) == 0x000000, "Member 'SlotInterface_GetDropSound::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetIconSizeRatio
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetIconSizeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetIconSizeRatio) == 0x000004, "Wrong alignment on SlotInterface_GetIconSizeRatio");
static_assert(sizeof(SlotInterface_GetIconSizeRatio) == 0x000004, "Wrong size on SlotInterface_GetIconSizeRatio");
static_assert(offsetof(SlotInterface_GetIconSizeRatio, ReturnValue) == 0x000000, "Member 'SlotInterface_GetIconSizeRatio::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSlotCategory
// 0x0018 (0x0018 - 0x0000)
struct SlotInterface_GetSlotCategory final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSlotCategory) == 0x000008, "Wrong alignment on SlotInterface_GetSlotCategory");
static_assert(sizeof(SlotInterface_GetSlotCategory) == 0x000018, "Wrong size on SlotInterface_GetSlotCategory");
static_assert(offsetof(SlotInterface_GetSlotCategory, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSlotCategory::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSlotDescription
// 0x0018 (0x0018 - 0x0000)
struct SlotInterface_GetSlotDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSlotDescription) == 0x000008, "Wrong alignment on SlotInterface_GetSlotDescription");
static_assert(sizeof(SlotInterface_GetSlotDescription) == 0x000018, "Wrong size on SlotInterface_GetSlotDescription");
static_assert(offsetof(SlotInterface_GetSlotDescription, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSlotDescription::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSlotDetailedName
// 0x0018 (0x0018 - 0x0000)
struct SlotInterface_GetSlotDetailedName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSlotDetailedName) == 0x000008, "Wrong alignment on SlotInterface_GetSlotDetailedName");
static_assert(sizeof(SlotInterface_GetSlotDetailedName) == 0x000018, "Wrong size on SlotInterface_GetSlotDetailedName");
static_assert(offsetof(SlotInterface_GetSlotDetailedName, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSlotDetailedName::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSlotName
// 0x0018 (0x0018 - 0x0000)
struct SlotInterface_GetSlotName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSlotName) == 0x000008, "Wrong alignment on SlotInterface_GetSlotName");
static_assert(sizeof(SlotInterface_GetSlotName) == 0x000018, "Wrong size on SlotInterface_GetSlotName");
static_assert(offsetof(SlotInterface_GetSlotName, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSlotName::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSortPriority
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetSortPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSortPriority) == 0x000004, "Wrong alignment on SlotInterface_GetSortPriority");
static_assert(sizeof(SlotInterface_GetSortPriority) == 0x000004, "Wrong size on SlotInterface_GetSortPriority");
static_assert(offsetof(SlotInterface_GetSortPriority, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSortPriority::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetSpace
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetSpace) == 0x000004, "Wrong alignment on SlotInterface_GetSpace");
static_assert(sizeof(SlotInterface_GetSpace) == 0x000004, "Wrong size on SlotInterface_GetSpace");
static_assert(offsetof(SlotInterface_GetSpace, ReturnValue) == 0x000000, "Member 'SlotInterface_GetSpace::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetStackCount
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetStackCount) == 0x000004, "Wrong alignment on SlotInterface_GetStackCount");
static_assert(sizeof(SlotInterface_GetStackCount) == 0x000004, "Wrong size on SlotInterface_GetStackCount");
static_assert(offsetof(SlotInterface_GetStackCount, ReturnValue) == 0x000000, "Member 'SlotInterface_GetStackCount::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetStackCountMax
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetStackCountMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetStackCountMax) == 0x000004, "Wrong alignment on SlotInterface_GetStackCountMax");
static_assert(sizeof(SlotInterface_GetStackCountMax) == 0x000004, "Wrong size on SlotInterface_GetStackCountMax");
static_assert(offsetof(SlotInterface_GetStackCountMax, ReturnValue) == 0x000000, "Member 'SlotInterface_GetStackCountMax::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetToolTipIconSizeRatio
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetToolTipIconSizeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetToolTipIconSizeRatio) == 0x000004, "Wrong alignment on SlotInterface_GetToolTipIconSizeRatio");
static_assert(sizeof(SlotInterface_GetToolTipIconSizeRatio) == 0x000004, "Wrong size on SlotInterface_GetToolTipIconSizeRatio");
static_assert(offsetof(SlotInterface_GetToolTipIconSizeRatio, ReturnValue) == 0x000000, "Member 'SlotInterface_GetToolTipIconSizeRatio::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetToolTipIconTexture
// 0x0008 (0x0008 - 0x0000)
struct SlotInterface_GetToolTipIconTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetToolTipIconTexture) == 0x000008, "Wrong alignment on SlotInterface_GetToolTipIconTexture");
static_assert(sizeof(SlotInterface_GetToolTipIconTexture) == 0x000008, "Wrong size on SlotInterface_GetToolTipIconTexture");
static_assert(offsetof(SlotInterface_GetToolTipIconTexture, ReturnValue) == 0x000000, "Member 'SlotInterface_GetToolTipIconTexture::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.GetUnitSpace
// 0x0004 (0x0004 - 0x0000)
struct SlotInterface_GetUnitSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_GetUnitSpace) == 0x000004, "Wrong alignment on SlotInterface_GetUnitSpace");
static_assert(sizeof(SlotInterface_GetUnitSpace) == 0x000004, "Wrong size on SlotInterface_GetUnitSpace");
static_assert(offsetof(SlotInterface_GetUnitSpace, ReturnValue) == 0x000000, "Member 'SlotInterface_GetUnitSpace::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsAttachment
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsAttachment) == 0x000001, "Wrong alignment on SlotInterface_IsAttachment");
static_assert(sizeof(SlotInterface_IsAttachment) == 0x000001, "Wrong size on SlotInterface_IsAttachment");
static_assert(offsetof(SlotInterface_IsAttachment, ReturnValue) == 0x000000, "Member 'SlotInterface_IsAttachment::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsCastableItem
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsCastableItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsCastableItem) == 0x000001, "Wrong alignment on SlotInterface_IsCastableItem");
static_assert(sizeof(SlotInterface_IsCastableItem) == 0x000001, "Wrong size on SlotInterface_IsCastableItem");
static_assert(offsetof(SlotInterface_IsCastableItem, ReturnValue) == 0x000000, "Member 'SlotInterface_IsCastableItem::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsEquipable
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsEquipable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsEquipable) == 0x000001, "Wrong alignment on SlotInterface_IsEquipable");
static_assert(sizeof(SlotInterface_IsEquipable) == 0x000001, "Wrong size on SlotInterface_IsEquipable");
static_assert(offsetof(SlotInterface_IsEquipable, ReturnValue) == 0x000000, "Member 'SlotInterface_IsEquipable::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsPackageItem
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsPackageItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsPackageItem) == 0x000001, "Wrong alignment on SlotInterface_IsPackageItem");
static_assert(sizeof(SlotInterface_IsPackageItem) == 0x000001, "Wrong size on SlotInterface_IsPackageItem");
static_assert(offsetof(SlotInterface_IsPackageItem, ReturnValue) == 0x000000, "Member 'SlotInterface_IsPackageItem::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsStackable
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsStackable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsStackable) == 0x000001, "Wrong alignment on SlotInterface_IsStackable");
static_assert(sizeof(SlotInterface_IsStackable) == 0x000001, "Wrong size on SlotInterface_IsStackable");
static_assert(offsetof(SlotInterface_IsStackable, ReturnValue) == 0x000000, "Member 'SlotInterface_IsStackable::ReturnValue' has a wrong offset!");

// Function TslGame.SlotInterface.IsWeapon
// 0x0001 (0x0001 - 0x0000)
struct SlotInterface_IsWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotInterface_IsWeapon) == 0x000001, "Wrong alignment on SlotInterface_IsWeapon");
static_assert(sizeof(SlotInterface_IsWeapon) == 0x000001, "Wrong size on SlotInterface_IsWeapon");
static_assert(offsetof(SlotInterface_IsWeapon, ReturnValue) == 0x000000, "Member 'SlotInterface_IsWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.DoActionWithSlot
// 0x0028 (0x0028 - 0x0000)
struct SlotContainerInterface_DoActionWithSlot final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FName                                   ActionName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_DoActionWithSlot) == 0x000008, "Wrong alignment on SlotContainerInterface_DoActionWithSlot");
static_assert(sizeof(SlotContainerInterface_DoActionWithSlot) == 0x000028, "Wrong size on SlotContainerInterface_DoActionWithSlot");
static_assert(offsetof(SlotContainerInterface_DoActionWithSlot, Slot) == 0x000000, "Member 'SlotContainerInterface_DoActionWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_DoActionWithSlot, ActionName) == 0x000010, "Member 'SlotContainerInterface_DoActionWithSlot::ActionName' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_DoActionWithSlot, Options) == 0x000018, "Member 'SlotContainerInterface_DoActionWithSlot::Options' has a wrong offset!");

// Function TslGame.SlotContainerInterface.DoSlotAction
// 0x0018 (0x0018 - 0x0000)
struct SlotContainerInterface_DoSlotAction final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_DoSlotAction) == 0x000008, "Wrong alignment on SlotContainerInterface_DoSlotAction");
static_assert(sizeof(SlotContainerInterface_DoSlotAction) == 0x000018, "Wrong size on SlotContainerInterface_DoSlotAction");
static_assert(offsetof(SlotContainerInterface_DoSlotAction, ActionName) == 0x000000, "Member 'SlotContainerInterface_DoSlotAction::ActionName' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_DoSlotAction, Options) == 0x000008, "Member 'SlotContainerInterface_DoSlotAction::Options' has a wrong offset!");

// Function TslGame.SlotContainerInterface.DoSlotActionDefault
// 0x0010 (0x0010 - 0x0000)
struct SlotContainerInterface_DoSlotActionDefault final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_DoSlotActionDefault) == 0x000008, "Wrong alignment on SlotContainerInterface_DoSlotActionDefault");
static_assert(sizeof(SlotContainerInterface_DoSlotActionDefault) == 0x000010, "Wrong size on SlotContainerInterface_DoSlotActionDefault");
static_assert(offsetof(SlotContainerInterface_DoSlotActionDefault, Slot) == 0x000000, "Member 'SlotContainerInterface_DoSlotActionDefault::Slot' has a wrong offset!");

// Function TslGame.SlotContainerInterface.DropSlotOnOtherContainer
// 0x0030 (0x0030 - 0x0000)
struct SlotContainerInterface_DropSlotOnOtherContainer final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotContainerInterface> OtherContainer;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_DropSlotOnOtherContainer) == 0x000008, "Wrong alignment on SlotContainerInterface_DropSlotOnOtherContainer");
static_assert(sizeof(SlotContainerInterface_DropSlotOnOtherContainer) == 0x000030, "Wrong size on SlotContainerInterface_DropSlotOnOtherContainer");
static_assert(offsetof(SlotContainerInterface_DropSlotOnOtherContainer, Slot) == 0x000000, "Member 'SlotContainerInterface_DropSlotOnOtherContainer::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_DropSlotOnOtherContainer, OtherContainer) == 0x000010, "Member 'SlotContainerInterface_DropSlotOnOtherContainer::OtherContainer' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_DropSlotOnOtherContainer, Options) == 0x000020, "Member 'SlotContainerInterface_DropSlotOnOtherContainer::Options' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetAvailableSlotActions
// 0x0020 (0x0020 - 0x0000)
struct SlotContainerInterface_GetAvailableSlotActions final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetAvailableSlotActions) == 0x000008, "Wrong alignment on SlotContainerInterface_GetAvailableSlotActions");
static_assert(sizeof(SlotContainerInterface_GetAvailableSlotActions) == 0x000020, "Wrong size on SlotContainerInterface_GetAvailableSlotActions");
static_assert(offsetof(SlotContainerInterface_GetAvailableSlotActions, Slot) == 0x000000, "Member 'SlotContainerInterface_GetAvailableSlotActions::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_GetAvailableSlotActions, ReturnValue) == 0x000010, "Member 'SlotContainerInterface_GetAvailableSlotActions::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetSlotContext
// 0x0010 (0x0010 - 0x0000)
struct SlotContainerInterface_GetSlotContext final
{
public:
	TScriptInterface<class ISlotInterface>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetSlotContext) == 0x000008, "Wrong alignment on SlotContainerInterface_GetSlotContext");
static_assert(sizeof(SlotContainerInterface_GetSlotContext) == 0x000010, "Wrong size on SlotContainerInterface_GetSlotContext");
static_assert(offsetof(SlotContainerInterface_GetSlotContext, ReturnValue) == 0x000000, "Member 'SlotContainerInterface_GetSlotContext::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.ShowSlotContextMenu
// 0x0010 (0x0010 - 0x0000)
struct SlotContainerInterface_ShowSlotContextMenu final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_ShowSlotContextMenu) == 0x000008, "Wrong alignment on SlotContainerInterface_ShowSlotContextMenu");
static_assert(sizeof(SlotContainerInterface_ShowSlotContextMenu) == 0x000010, "Wrong size on SlotContainerInterface_ShowSlotContextMenu");
static_assert(offsetof(SlotContainerInterface_ShowSlotContextMenu, Slot) == 0x000000, "Member 'SlotContainerInterface_ShowSlotContextMenu::Slot' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetActionName
// 0x0038 (0x0038 - 0x0000)
struct SlotContainerInterface_GetActionName final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotContainerInterface> OtherContainer;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetActionName) == 0x000008, "Wrong alignment on SlotContainerInterface_GetActionName");
static_assert(sizeof(SlotContainerInterface_GetActionName) == 0x000038, "Wrong size on SlotContainerInterface_GetActionName");
static_assert(offsetof(SlotContainerInterface_GetActionName, Slot) == 0x000000, "Member 'SlotContainerInterface_GetActionName::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_GetActionName, OtherContainer) == 0x000010, "Member 'SlotContainerInterface_GetActionName::OtherContainer' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_GetActionName, Options) == 0x000020, "Member 'SlotContainerInterface_GetActionName::Options' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_GetActionName, ReturnValue) == 0x000030, "Member 'SlotContainerInterface_GetActionName::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetAllSlots
// 0x0010 (0x0010 - 0x0000)
struct SlotContainerInterface_GetAllSlots final
{
public:
	TArray<TScriptInterface<class ISlotInterface>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetAllSlots) == 0x000008, "Wrong alignment on SlotContainerInterface_GetAllSlots");
static_assert(sizeof(SlotContainerInterface_GetAllSlots) == 0x000010, "Wrong size on SlotContainerInterface_GetAllSlots");
static_assert(offsetof(SlotContainerInterface_GetAllSlots, ReturnValue) == 0x000000, "Member 'SlotContainerInterface_GetAllSlots::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetDefaultActionName
// 0x0018 (0x0018 - 0x0000)
struct SlotContainerInterface_GetDefaultActionName final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetDefaultActionName) == 0x000008, "Wrong alignment on SlotContainerInterface_GetDefaultActionName");
static_assert(sizeof(SlotContainerInterface_GetDefaultActionName) == 0x000018, "Wrong size on SlotContainerInterface_GetDefaultActionName");
static_assert(offsetof(SlotContainerInterface_GetDefaultActionName, Slot) == 0x000000, "Member 'SlotContainerInterface_GetDefaultActionName::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_GetDefaultActionName, ReturnValue) == 0x000010, "Member 'SlotContainerInterface_GetDefaultActionName::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetSlotContainerName
// 0x0008 (0x0008 - 0x0000)
struct SlotContainerInterface_GetSlotContainerName final
{
public:
	struct FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetSlotContainerName) == 0x000004, "Wrong alignment on SlotContainerInterface_GetSlotContainerName");
static_assert(sizeof(SlotContainerInterface_GetSlotContainerName) == 0x000008, "Wrong size on SlotContainerInterface_GetSlotContainerName");
static_assert(offsetof(SlotContainerInterface_GetSlotContainerName, ReturnValue) == 0x000000, "Member 'SlotContainerInterface_GetSlotContainerName::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.GetSlotContainerOwner
// 0x0008 (0x0008 - 0x0000)
struct SlotContainerInterface_GetSlotContainerOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotContainerInterface_GetSlotContainerOwner) == 0x000008, "Wrong alignment on SlotContainerInterface_GetSlotContainerOwner");
static_assert(sizeof(SlotContainerInterface_GetSlotContainerOwner) == 0x000008, "Wrong size on SlotContainerInterface_GetSlotContainerOwner");
static_assert(offsetof(SlotContainerInterface_GetSlotContainerOwner, ReturnValue) == 0x000000, "Member 'SlotContainerInterface_GetSlotContainerOwner::ReturnValue' has a wrong offset!");

// Function TslGame.SlotContainerInterface.IsEnableAction
// 0x0038 (0x0038 - 0x0000)
struct SlotContainerInterface_IsEnableAction final
{
public:
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotContainerInterface> OtherContainer;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlotContainerInterface_IsEnableAction) == 0x000008, "Wrong alignment on SlotContainerInterface_IsEnableAction");
static_assert(sizeof(SlotContainerInterface_IsEnableAction) == 0x000038, "Wrong size on SlotContainerInterface_IsEnableAction");
static_assert(offsetof(SlotContainerInterface_IsEnableAction, Slot) == 0x000000, "Member 'SlotContainerInterface_IsEnableAction::Slot' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_IsEnableAction, OtherContainer) == 0x000010, "Member 'SlotContainerInterface_IsEnableAction::OtherContainer' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_IsEnableAction, Options) == 0x000020, "Member 'SlotContainerInterface_IsEnableAction::Options' has a wrong offset!");
static_assert(offsetof(SlotContainerInterface_IsEnableAction, ReturnValue) == 0x000030, "Member 'SlotContainerInterface_IsEnableAction::ReturnValue' has a wrong offset!");

// Function TslGame.ItemExplorerInterface.GetExplorableItemSlotList
// 0x0010 (0x0010 - 0x0000)
struct ItemExplorerInterface_GetExplorableItemSlotList final
{
public:
	TArray<TScriptInterface<class ISlotInterface>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemExplorerInterface_GetExplorableItemSlotList) == 0x000008, "Wrong alignment on ItemExplorerInterface_GetExplorableItemSlotList");
static_assert(sizeof(ItemExplorerInterface_GetExplorableItemSlotList) == 0x000010, "Wrong size on ItemExplorerInterface_GetExplorableItemSlotList");
static_assert(offsetof(ItemExplorerInterface_GetExplorableItemSlotList, ReturnValue) == 0x000000, "Member 'ItemExplorerInterface_GetExplorableItemSlotList::ReturnValue' has a wrong offset!");

// Function TslGame.ExplorableItemInterface.GetExplorationDistance
// 0x0004 (0x0004 - 0x0000)
struct ExplorableItemInterface_GetExplorationDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplorableItemInterface_GetExplorationDistance) == 0x000004, "Wrong alignment on ExplorableItemInterface_GetExplorationDistance");
static_assert(sizeof(ExplorableItemInterface_GetExplorationDistance) == 0x000004, "Wrong size on ExplorableItemInterface_GetExplorationDistance");
static_assert(offsetof(ExplorableItemInterface_GetExplorationDistance, ReturnValue) == 0x000000, "Member 'ExplorableItemInterface_GetExplorationDistance::ReturnValue' has a wrong offset!");

// Function TslGame.ExplorableItemInterface.GetInteractiveActionName
// 0x0008 (0x0008 - 0x0000)
struct ExplorableItemInterface_GetInteractiveActionName final
{
public:
	struct FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplorableItemInterface_GetInteractiveActionName) == 0x000004, "Wrong alignment on ExplorableItemInterface_GetInteractiveActionName");
static_assert(sizeof(ExplorableItemInterface_GetInteractiveActionName) == 0x000008, "Wrong size on ExplorableItemInterface_GetInteractiveActionName");
static_assert(offsetof(ExplorableItemInterface_GetInteractiveActionName, ReturnValue) == 0x000000, "Member 'ExplorableItemInterface_GetInteractiveActionName::ReturnValue' has a wrong offset!");

// Function TslGame.ExplorableItemInterface.IsValidExplorableItem
// 0x0001 (0x0001 - 0x0000)
struct ExplorableItemInterface_IsValidExplorableItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplorableItemInterface_IsValidExplorableItem) == 0x000001, "Wrong alignment on ExplorableItemInterface_IsValidExplorableItem");
static_assert(sizeof(ExplorableItemInterface_IsValidExplorableItem) == 0x000001, "Wrong size on ExplorableItemInterface_IsValidExplorableItem");
static_assert(offsetof(ExplorableItemInterface_IsValidExplorableItem, ReturnValue) == 0x000000, "Member 'ExplorableItemInterface_IsValidExplorableItem::ReturnValue' has a wrong offset!");

// Function TslGame.ItemPackage.AllowInteract
// 0x0010 (0x0010 - 0x0000)
struct ItemPackage_AllowInteract final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemPackage_AllowInteract) == 0x000008, "Wrong alignment on ItemPackage_AllowInteract");
static_assert(sizeof(ItemPackage_AllowInteract) == 0x000010, "Wrong size on ItemPackage_AllowInteract");
static_assert(offsetof(ItemPackage_AllowInteract, OtherCharacter) == 0x000000, "Member 'ItemPackage_AllowInteract::OtherCharacter' has a wrong offset!");
static_assert(offsetof(ItemPackage_AllowInteract, ReturnValue) == 0x000008, "Member 'ItemPackage_AllowInteract::ReturnValue' has a wrong offset!");

// Function TslGame.ItemPackage.ClientOnInteractBy
// 0x0008 (0x0008 - 0x0000)
struct ItemPackage_ClientOnInteractBy final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemPackage_ClientOnInteractBy) == 0x000008, "Wrong alignment on ItemPackage_ClientOnInteractBy");
static_assert(sizeof(ItemPackage_ClientOnInteractBy) == 0x000008, "Wrong size on ItemPackage_ClientOnInteractBy");
static_assert(offsetof(ItemPackage_ClientOnInteractBy, OtherCharacter) == 0x000000, "Member 'ItemPackage_ClientOnInteractBy::OtherCharacter' has a wrong offset!");

// Function TslGame.ItemPackage.IsOpenedBy
// 0x0010 (0x0010 - 0x0000)
struct ItemPackage_IsOpenedBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemPackage_IsOpenedBy) == 0x000008, "Wrong alignment on ItemPackage_IsOpenedBy");
static_assert(sizeof(ItemPackage_IsOpenedBy) == 0x000010, "Wrong size on ItemPackage_IsOpenedBy");
static_assert(offsetof(ItemPackage_IsOpenedBy, Character) == 0x000000, "Member 'ItemPackage_IsOpenedBy::Character' has a wrong offset!");
static_assert(offsetof(ItemPackage_IsOpenedBy, ReturnValue) == 0x000008, "Member 'ItemPackage_IsOpenedBy::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.DrawDottedLine
// 0x0060 (0x0060 - 0x0000)
struct UiHelperFunctions_DrawDottedLine final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              PositionA;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              PositionB;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DottedLength;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DottedInterval;                                    // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0048(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAntiAlias;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_DrawDottedLine) == 0x000008, "Wrong alignment on UiHelperFunctions_DrawDottedLine");
static_assert(sizeof(UiHelperFunctions_DrawDottedLine) == 0x000060, "Wrong size on UiHelperFunctions_DrawDottedLine");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, Context) == 0x000000, "Member 'UiHelperFunctions_DrawDottedLine::Context' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, PositionA) == 0x000030, "Member 'UiHelperFunctions_DrawDottedLine::PositionA' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, PositionB) == 0x000038, "Member 'UiHelperFunctions_DrawDottedLine::PositionB' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, DottedLength) == 0x000040, "Member 'UiHelperFunctions_DrawDottedLine::DottedLength' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, DottedInterval) == 0x000044, "Member 'UiHelperFunctions_DrawDottedLine::DottedInterval' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, Tint) == 0x000048, "Member 'UiHelperFunctions_DrawDottedLine::Tint' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_DrawDottedLine, bAntiAlias) == 0x000058, "Member 'UiHelperFunctions_DrawDottedLine::bAntiAlias' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetBluezoneGpsState
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetBluezoneGpsState final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetBluezoneGpsState) == 0x000008, "Wrong alignment on UiHelperFunctions_GetBluezoneGpsState");
static_assert(sizeof(UiHelperFunctions_GetBluezoneGpsState) == 0x000010, "Wrong size on UiHelperFunctions_GetBluezoneGpsState");
static_assert(offsetof(UiHelperFunctions_GetBluezoneGpsState, Widget) == 0x000000, "Member 'UiHelperFunctions_GetBluezoneGpsState::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetBluezoneGpsState, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetBluezoneGpsState::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetBluezoneReleaseTime
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetBluezoneReleaseTime final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetBluezoneReleaseTime) == 0x000008, "Wrong alignment on UiHelperFunctions_GetBluezoneReleaseTime");
static_assert(sizeof(UiHelperFunctions_GetBluezoneReleaseTime) == 0x000010, "Wrong size on UiHelperFunctions_GetBluezoneReleaseTime");
static_assert(offsetof(UiHelperFunctions_GetBluezoneReleaseTime, Widget) == 0x000000, "Member 'UiHelperFunctions_GetBluezoneReleaseTime::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetBluezoneReleaseTime, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetBluezoneReleaseTime::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetBluezoneWarningTime
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetBluezoneWarningTime final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetBluezoneWarningTime) == 0x000008, "Wrong alignment on UiHelperFunctions_GetBluezoneWarningTime");
static_assert(sizeof(UiHelperFunctions_GetBluezoneWarningTime) == 0x000010, "Wrong size on UiHelperFunctions_GetBluezoneWarningTime");
static_assert(offsetof(UiHelperFunctions_GetBluezoneWarningTime, Widget) == 0x000000, "Member 'UiHelperFunctions_GetBluezoneWarningTime::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetBluezoneWarningTime, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetBluezoneWarningTime::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetCharacterStateByTeam
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetCharacterStateByTeam final
{
public:
	class ATeam*                                  Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetCharacterStateByTeam) == 0x000008, "Wrong alignment on UiHelperFunctions_GetCharacterStateByTeam");
static_assert(sizeof(UiHelperFunctions_GetCharacterStateByTeam) == 0x000010, "Wrong size on UiHelperFunctions_GetCharacterStateByTeam");
static_assert(offsetof(UiHelperFunctions_GetCharacterStateByTeam, Team) == 0x000000, "Member 'UiHelperFunctions_GetCharacterStateByTeam::Team' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetCharacterStateByTeam, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetCharacterStateByTeam::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetCurrentPlayzonePosition_BluezoneGPS
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS) == 0x000008, "Wrong alignment on UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS");
static_assert(sizeof(UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS) == 0x000018, "Wrong size on UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS");
static_assert(offsetof(UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS, Widget) == 0x000000, "Member 'UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetCurrentPlayzonePosition_BluezoneGPS::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetCurrentPlayzoneRadius_BluezoneGPS
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS) == 0x000008, "Wrong alignment on UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS");
static_assert(sizeof(UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS) == 0x000010, "Wrong size on UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS");
static_assert(offsetof(UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS, Widget) == 0x000000, "Member 'UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetCurrentPlayzoneRadius_BluezoneGPS::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetDownWidgetByTslFocusableWidget
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetDownWidgetByTslFocusableWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetDownWidgetByTslFocusableWidget) == 0x000008, "Wrong alignment on UiHelperFunctions_GetDownWidgetByTslFocusableWidget");
static_assert(sizeof(UiHelperFunctions_GetDownWidgetByTslFocusableWidget) == 0x000010, "Wrong size on UiHelperFunctions_GetDownWidgetByTslFocusableWidget");
static_assert(offsetof(UiHelperFunctions_GetDownWidgetByTslFocusableWidget, Widget) == 0x000000, "Member 'UiHelperFunctions_GetDownWidgetByTslFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetDownWidgetByTslFocusableWidget, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetDownWidgetByTslFocusableWidget::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetDurabilityRatio
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetDurabilityRatio final
{
public:
	TScriptInterface<class ISlotInterface>        ItemSlot;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetDurabilityRatio) == 0x000008, "Wrong alignment on UiHelperFunctions_GetDurabilityRatio");
static_assert(sizeof(UiHelperFunctions_GetDurabilityRatio) == 0x000018, "Wrong size on UiHelperFunctions_GetDurabilityRatio");
static_assert(offsetof(UiHelperFunctions_GetDurabilityRatio, ItemSlot) == 0x000000, "Member 'UiHelperFunctions_GetDurabilityRatio::ItemSlot' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetDurabilityRatio, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_GetDurabilityRatio::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetGroggyHealthRatioByTeam
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetGroggyHealthRatioByTeam final
{
public:
	class ATeam*                                  Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetGroggyHealthRatioByTeam) == 0x000008, "Wrong alignment on UiHelperFunctions_GetGroggyHealthRatioByTeam");
static_assert(sizeof(UiHelperFunctions_GetGroggyHealthRatioByTeam) == 0x000010, "Wrong size on UiHelperFunctions_GetGroggyHealthRatioByTeam");
static_assert(offsetof(UiHelperFunctions_GetGroggyHealthRatioByTeam, Team) == 0x000000, "Member 'UiHelperFunctions_GetGroggyHealthRatioByTeam::Team' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetGroggyHealthRatioByTeam, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetGroggyHealthRatioByTeam::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetHealthRatioByTeam
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetHealthRatioByTeam final
{
public:
	class ATeam*                                  Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetHealthRatioByTeam) == 0x000008, "Wrong alignment on UiHelperFunctions_GetHealthRatioByTeam");
static_assert(sizeof(UiHelperFunctions_GetHealthRatioByTeam) == 0x000010, "Wrong size on UiHelperFunctions_GetHealthRatioByTeam");
static_assert(offsetof(UiHelperFunctions_GetHealthRatioByTeam, Team) == 0x000000, "Member 'UiHelperFunctions_GetHealthRatioByTeam::Team' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetHealthRatioByTeam, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetHealthRatioByTeam::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetLastSpectatedCharacter
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetLastSpectatedCharacter final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetLastSpectatedCharacter) == 0x000008, "Wrong alignment on UiHelperFunctions_GetLastSpectatedCharacter");
static_assert(sizeof(UiHelperFunctions_GetLastSpectatedCharacter) == 0x000010, "Wrong size on UiHelperFunctions_GetLastSpectatedCharacter");
static_assert(offsetof(UiHelperFunctions_GetLastSpectatedCharacter, Widget) == 0x000000, "Member 'UiHelperFunctions_GetLastSpectatedCharacter::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetLastSpectatedCharacter, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetLastSpectatedCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetLeftWidgetByTslFocusableWidget
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetLeftWidgetByTslFocusableWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetLeftWidgetByTslFocusableWidget) == 0x000008, "Wrong alignment on UiHelperFunctions_GetLeftWidgetByTslFocusableWidget");
static_assert(sizeof(UiHelperFunctions_GetLeftWidgetByTslFocusableWidget) == 0x000010, "Wrong size on UiHelperFunctions_GetLeftWidgetByTslFocusableWidget");
static_assert(offsetof(UiHelperFunctions_GetLeftWidgetByTslFocusableWidget, Widget) == 0x000000, "Member 'UiHelperFunctions_GetLeftWidgetByTslFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetLeftWidgetByTslFocusableWidget, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetLeftWidgetByTslFocusableWidget::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetMarkerColor
// 0x0014 (0x0014 - 0x0000)
struct UiHelperFunctions_GetMarkerColor final
{
public:
	int32                                         MarkerNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetMarkerColor) == 0x000004, "Wrong alignment on UiHelperFunctions_GetMarkerColor");
static_assert(sizeof(UiHelperFunctions_GetMarkerColor) == 0x000014, "Wrong size on UiHelperFunctions_GetMarkerColor");
static_assert(offsetof(UiHelperFunctions_GetMarkerColor, MarkerNum) == 0x000000, "Member 'UiHelperFunctions_GetMarkerColor::MarkerNum' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetMarkerColor, ReturnValue) == 0x000004, "Member 'UiHelperFunctions_GetMarkerColor::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetNextPlayzonePosition_BluezoneGPS
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS) == 0x000008, "Wrong alignment on UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS");
static_assert(sizeof(UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS) == 0x000018, "Wrong size on UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS");
static_assert(offsetof(UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS, Widget) == 0x000000, "Member 'UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetNextPlayzonePosition_BluezoneGPS::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetNextPlayzoneRadius_BluezoneGPS
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS) == 0x000008, "Wrong alignment on UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS");
static_assert(sizeof(UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS) == 0x000010, "Wrong size on UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS");
static_assert(offsetof(UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS, Widget) == 0x000000, "Member 'UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetNextPlayzoneRadius_BluezoneGPS::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetOwningTslCharacter
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetOwningTslCharacter final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetOwningTslCharacter) == 0x000008, "Wrong alignment on UiHelperFunctions_GetOwningTslCharacter");
static_assert(sizeof(UiHelperFunctions_GetOwningTslCharacter) == 0x000010, "Wrong size on UiHelperFunctions_GetOwningTslCharacter");
static_assert(offsetof(UiHelperFunctions_GetOwningTslCharacter, Widget) == 0x000000, "Member 'UiHelperFunctions_GetOwningTslCharacter::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetOwningTslCharacter, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetOwningTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetOwningTslPlayerController
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetOwningTslPlayerController final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslPlayerController*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetOwningTslPlayerController) == 0x000008, "Wrong alignment on UiHelperFunctions_GetOwningTslPlayerController");
static_assert(sizeof(UiHelperFunctions_GetOwningTslPlayerController) == 0x000010, "Wrong size on UiHelperFunctions_GetOwningTslPlayerController");
static_assert(offsetof(UiHelperFunctions_GetOwningTslPlayerController, Widget) == 0x000000, "Member 'UiHelperFunctions_GetOwningTslPlayerController::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetOwningTslPlayerController, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetOwningTslPlayerController::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetPlayerName final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetPlayerName) == 0x000008, "Wrong alignment on UiHelperFunctions_GetPlayerName");
static_assert(sizeof(UiHelperFunctions_GetPlayerName) == 0x000018, "Wrong size on UiHelperFunctions_GetPlayerName");
static_assert(offsetof(UiHelperFunctions_GetPlayerName, Character) == 0x000000, "Member 'UiHelperFunctions_GetPlayerName::Character' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetPlayerName, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetReportCauses
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetReportCauses final
{
public:
	TArray<struct FReportCauseData>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetReportCauses) == 0x000008, "Wrong alignment on UiHelperFunctions_GetReportCauses");
static_assert(sizeof(UiHelperFunctions_GetReportCauses) == 0x000010, "Wrong size on UiHelperFunctions_GetReportCauses");
static_assert(offsetof(UiHelperFunctions_GetReportCauses, ReturnValue) == 0x000000, "Member 'UiHelperFunctions_GetReportCauses::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetRightWidgetByTslFocusableWidget
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetRightWidgetByTslFocusableWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetRightWidgetByTslFocusableWidget) == 0x000008, "Wrong alignment on UiHelperFunctions_GetRightWidgetByTslFocusableWidget");
static_assert(sizeof(UiHelperFunctions_GetRightWidgetByTslFocusableWidget) == 0x000010, "Wrong size on UiHelperFunctions_GetRightWidgetByTslFocusableWidget");
static_assert(offsetof(UiHelperFunctions_GetRightWidgetByTslFocusableWidget, Widget) == 0x000000, "Member 'UiHelperFunctions_GetRightWidgetByTslFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetRightWidgetByTslFocusableWidget, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetRightWidgetByTslFocusableWidget::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetSortedReplicateCharactersByLastHitTime
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATslCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime) == 0x000008, "Wrong alignment on UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime");
static_assert(sizeof(UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime) == 0x000018, "Wrong size on UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime");
static_assert(offsetof(UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime, Widget) == 0x000000, "Member 'UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetSortedReplicateCharactersByLastHitTime::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetSortedReplicateCharactersBySpectatorPawnDistance
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATslCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance) == 0x000008, "Wrong alignment on UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance");
static_assert(sizeof(UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance) == 0x000018, "Wrong size on UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance");
static_assert(offsetof(UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance, Widget) == 0x000000, "Member 'UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetSortedReplicateCharactersBySpectatorPawnDistance::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetSubjectToReport
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetSubjectToReport final
{
public:
	TArray<struct FSubjectToReport>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetSubjectToReport) == 0x000008, "Wrong alignment on UiHelperFunctions_GetSubjectToReport");
static_assert(sizeof(UiHelperFunctions_GetSubjectToReport) == 0x000010, "Wrong size on UiHelperFunctions_GetSubjectToReport");
static_assert(offsetof(UiHelperFunctions_GetSubjectToReport, ReturnValue) == 0x000000, "Member 'UiHelperFunctions_GetSubjectToReport::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetSubjectToReportType
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetSubjectToReportType final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubjectToReport                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetSubjectToReportType) == 0x000008, "Wrong alignment on UiHelperFunctions_GetSubjectToReportType");
static_assert(sizeof(UiHelperFunctions_GetSubjectToReportType) == 0x000010, "Wrong size on UiHelperFunctions_GetSubjectToReportType");
static_assert(offsetof(UiHelperFunctions_GetSubjectToReportType, Widget) == 0x000000, "Member 'UiHelperFunctions_GetSubjectToReportType::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetSubjectToReportType, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetSubjectToReportType::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetTeamColors
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_GetTeamColors final
{
public:
	int32                                         TeamCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetTeamColors) == 0x000008, "Wrong alignment on UiHelperFunctions_GetTeamColors");
static_assert(sizeof(UiHelperFunctions_GetTeamColors) == 0x000018, "Wrong size on UiHelperFunctions_GetTeamColors");
static_assert(offsetof(UiHelperFunctions_GetTeamColors, TeamCount) == 0x000000, "Member 'UiHelperFunctions_GetTeamColors::TeamCount' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetTeamColors, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetTeamColors::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetTeamId
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetTeamId final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_GetTeamId) == 0x000008, "Wrong alignment on UiHelperFunctions_GetTeamId");
static_assert(sizeof(UiHelperFunctions_GetTeamId) == 0x000010, "Wrong size on UiHelperFunctions_GetTeamId");
static_assert(offsetof(UiHelperFunctions_GetTeamId, Character) == 0x000000, "Member 'UiHelperFunctions_GetTeamId::Character' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetTeamId, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetTeamId::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetTslHUD
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetTslHUD final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslHUD*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetTslHUD) == 0x000008, "Wrong alignment on UiHelperFunctions_GetTslHUD");
static_assert(sizeof(UiHelperFunctions_GetTslHUD) == 0x000010, "Wrong size on UiHelperFunctions_GetTslHUD");
static_assert(offsetof(UiHelperFunctions_GetTslHUD, Widget) == 0x000000, "Member 'UiHelperFunctions_GetTslHUD::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetTslHUD, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetTslHUD::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetTslSpectatorPawn
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetTslSpectatorPawn final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslSpectatorPawn*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetTslSpectatorPawn) == 0x000008, "Wrong alignment on UiHelperFunctions_GetTslSpectatorPawn");
static_assert(sizeof(UiHelperFunctions_GetTslSpectatorPawn) == 0x000010, "Wrong size on UiHelperFunctions_GetTslSpectatorPawn");
static_assert(offsetof(UiHelperFunctions_GetTslSpectatorPawn, Widget) == 0x000000, "Member 'UiHelperFunctions_GetTslSpectatorPawn::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetTslSpectatorPawn, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetTslSpectatorPawn::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetUpWidgetByTslFocusableWidget
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetUpWidgetByTslFocusableWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetUpWidgetByTslFocusableWidget) == 0x000008, "Wrong alignment on UiHelperFunctions_GetUpWidgetByTslFocusableWidget");
static_assert(sizeof(UiHelperFunctions_GetUpWidgetByTslFocusableWidget) == 0x000010, "Wrong size on UiHelperFunctions_GetUpWidgetByTslFocusableWidget");
static_assert(offsetof(UiHelperFunctions_GetUpWidgetByTslFocusableWidget, Widget) == 0x000000, "Member 'UiHelperFunctions_GetUpWidgetByTslFocusableWidget::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetUpWidgetByTslFocusableWidget, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetUpWidgetByTslFocusableWidget::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetVehicleUI
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetVehicleUI final
{
public:
	class APawn*                                  VehiclePawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetVehicleUI) == 0x000008, "Wrong alignment on UiHelperFunctions_GetVehicleUI");
static_assert(sizeof(UiHelperFunctions_GetVehicleUI) == 0x000010, "Wrong size on UiHelperFunctions_GetVehicleUI");
static_assert(offsetof(UiHelperFunctions_GetVehicleUI, VehiclePawn) == 0x000000, "Member 'UiHelperFunctions_GetVehicleUI::VehiclePawn' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetVehicleUI, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetVehicleUI::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.GetViewTargetTslCharacter
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_GetViewTargetTslCharacter final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_GetViewTargetTslCharacter) == 0x000008, "Wrong alignment on UiHelperFunctions_GetViewTargetTslCharacter");
static_assert(sizeof(UiHelperFunctions_GetViewTargetTslCharacter) == 0x000010, "Wrong size on UiHelperFunctions_GetViewTargetTslCharacter");
static_assert(offsetof(UiHelperFunctions_GetViewTargetTslCharacter, Widget) == 0x000000, "Member 'UiHelperFunctions_GetViewTargetTslCharacter::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_GetViewTargetTslCharacter, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_GetViewTargetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.HaveDurability
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_HaveDurability final
{
public:
	TScriptInterface<class ISlotInterface>        ItemSlot;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_HaveDurability) == 0x000008, "Wrong alignment on UiHelperFunctions_HaveDurability");
static_assert(sizeof(UiHelperFunctions_HaveDurability) == 0x000018, "Wrong size on UiHelperFunctions_HaveDurability");
static_assert(offsetof(UiHelperFunctions_HaveDurability, ItemSlot) == 0x000000, "Member 'UiHelperFunctions_HaveDurability::ItemSlot' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_HaveDurability, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_HaveDurability::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsAttacked
// 0x0008 (0x0008 - 0x0000)
struct UiHelperFunctions_IsAttacked final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsAttacked) == 0x000004, "Wrong alignment on UiHelperFunctions_IsAttacked");
static_assert(sizeof(UiHelperFunctions_IsAttacked) == 0x000008, "Wrong size on UiHelperFunctions_IsAttacked");
static_assert(offsetof(UiHelperFunctions_IsAttacked, State) == 0x000000, "Member 'UiHelperFunctions_IsAttacked::State' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsAttacked, ReturnValue) == 0x000004, "Member 'UiHelperFunctions_IsAttacked::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsBluezoneGpsReset
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_IsBluezoneGpsReset final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsBluezoneGpsReset) == 0x000008, "Wrong alignment on UiHelperFunctions_IsBluezoneGpsReset");
static_assert(sizeof(UiHelperFunctions_IsBluezoneGpsReset) == 0x000010, "Wrong size on UiHelperFunctions_IsBluezoneGpsReset");
static_assert(offsetof(UiHelperFunctions_IsBluezoneGpsReset, Widget) == 0x000000, "Member 'UiHelperFunctions_IsBluezoneGpsReset::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsBluezoneGpsReset, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_IsBluezoneGpsReset::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsGroggyByTeam
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_IsGroggyByTeam final
{
public:
	class ATeam*                                  Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsGroggyByTeam) == 0x000008, "Wrong alignment on UiHelperFunctions_IsGroggyByTeam");
static_assert(sizeof(UiHelperFunctions_IsGroggyByTeam) == 0x000010, "Wrong size on UiHelperFunctions_IsGroggyByTeam");
static_assert(offsetof(UiHelperFunctions_IsGroggyByTeam, Team) == 0x000000, "Member 'UiHelperFunctions_IsGroggyByTeam::Team' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsGroggyByTeam, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_IsGroggyByTeam::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsHitted
// 0x0008 (0x0008 - 0x0000)
struct UiHelperFunctions_IsHitted final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsHitted) == 0x000004, "Wrong alignment on UiHelperFunctions_IsHitted");
static_assert(sizeof(UiHelperFunctions_IsHitted) == 0x000008, "Wrong size on UiHelperFunctions_IsHitted");
static_assert(offsetof(UiHelperFunctions_IsHitted, State) == 0x000000, "Member 'UiHelperFunctions_IsHitted::State' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsHitted, ReturnValue) == 0x000004, "Member 'UiHelperFunctions_IsHitted::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsInNextPlayzone
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_IsInNextPlayzone final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsInNextPlayzone) == 0x000008, "Wrong alignment on UiHelperFunctions_IsInNextPlayzone");
static_assert(sizeof(UiHelperFunctions_IsInNextPlayzone) == 0x000010, "Wrong size on UiHelperFunctions_IsInNextPlayzone");
static_assert(offsetof(UiHelperFunctions_IsInNextPlayzone, Widget) == 0x000000, "Member 'UiHelperFunctions_IsInNextPlayzone::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsInNextPlayzone, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_IsInNextPlayzone::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsKickEnableCharacter
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_IsKickEnableCharacter final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsKickEnableCharacter) == 0x000008, "Wrong alignment on UiHelperFunctions_IsKickEnableCharacter");
static_assert(sizeof(UiHelperFunctions_IsKickEnableCharacter) == 0x000010, "Wrong size on UiHelperFunctions_IsKickEnableCharacter");
static_assert(offsetof(UiHelperFunctions_IsKickEnableCharacter, Character) == 0x000000, "Member 'UiHelperFunctions_IsKickEnableCharacter::Character' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsKickEnableCharacter, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_IsKickEnableCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsLastSpectatedCharacter
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_IsLastSpectatedCharacter final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsLastSpectatedCharacter) == 0x000008, "Wrong alignment on UiHelperFunctions_IsLastSpectatedCharacter");
static_assert(sizeof(UiHelperFunctions_IsLastSpectatedCharacter) == 0x000018, "Wrong size on UiHelperFunctions_IsLastSpectatedCharacter");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatedCharacter, Widget) == 0x000000, "Member 'UiHelperFunctions_IsLastSpectatedCharacter::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatedCharacter, Character) == 0x000008, "Member 'UiHelperFunctions_IsLastSpectatedCharacter::Character' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatedCharacter, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_IsLastSpectatedCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsLastSpectatorTeam
// 0x0018 (0x0018 - 0x0000)
struct UiHelperFunctions_IsLastSpectatorTeam final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsLastSpectatorTeam) == 0x000008, "Wrong alignment on UiHelperFunctions_IsLastSpectatorTeam");
static_assert(sizeof(UiHelperFunctions_IsLastSpectatorTeam) == 0x000018, "Wrong size on UiHelperFunctions_IsLastSpectatorTeam");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatorTeam, Widget) == 0x000000, "Member 'UiHelperFunctions_IsLastSpectatorTeam::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatorTeam, Character) == 0x000008, "Member 'UiHelperFunctions_IsLastSpectatorTeam::Character' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsLastSpectatorTeam, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_IsLastSpectatorTeam::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsThereAnyPlayingAnimation
// 0x0020 (0x0020 - 0x0000)
struct UiHelperFunctions_IsThereAnyPlayingAnimation final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               AnimationArray;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsThereAnyPlayingAnimation) == 0x000008, "Wrong alignment on UiHelperFunctions_IsThereAnyPlayingAnimation");
static_assert(sizeof(UiHelperFunctions_IsThereAnyPlayingAnimation) == 0x000020, "Wrong size on UiHelperFunctions_IsThereAnyPlayingAnimation");
static_assert(offsetof(UiHelperFunctions_IsThereAnyPlayingAnimation, Widget) == 0x000000, "Member 'UiHelperFunctions_IsThereAnyPlayingAnimation::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsThereAnyPlayingAnimation, AnimationArray) == 0x000008, "Member 'UiHelperFunctions_IsThereAnyPlayingAnimation::AnimationArray' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsThereAnyPlayingAnimation, ReturnValue) == 0x000018, "Member 'UiHelperFunctions_IsThereAnyPlayingAnimation::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.IsWarning
// 0x0010 (0x0010 - 0x0000)
struct UiHelperFunctions_IsWarning final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiHelperFunctions_IsWarning) == 0x000008, "Wrong alignment on UiHelperFunctions_IsWarning");
static_assert(sizeof(UiHelperFunctions_IsWarning) == 0x000010, "Wrong size on UiHelperFunctions_IsWarning");
static_assert(offsetof(UiHelperFunctions_IsWarning, Widget) == 0x000000, "Member 'UiHelperFunctions_IsWarning::Widget' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_IsWarning, ReturnValue) == 0x000008, "Member 'UiHelperFunctions_IsWarning::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.SortItem
// 0x0020 (0x0020 - 0x0000)
struct UiHelperFunctions_SortItem final
{
public:
	TArray<TScriptInterface<class ISlotInterface>> InItemList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class ISlotInterface>> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_SortItem) == 0x000008, "Wrong alignment on UiHelperFunctions_SortItem");
static_assert(sizeof(UiHelperFunctions_SortItem) == 0x000020, "Wrong size on UiHelperFunctions_SortItem");
static_assert(offsetof(UiHelperFunctions_SortItem, InItemList) == 0x000000, "Member 'UiHelperFunctions_SortItem::InItemList' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortItem, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_SortItem::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.SortPlayerMatchResultInfosByRanking
// 0x0020 (0x0020 - 0x0000)
struct UiHelperFunctions_SortPlayerMatchResultInfosByRanking final
{
public:
	TArray<struct FTslPlayerMatchResultInfo>      PlayerMatchResultInfos;                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTslPlayerMatchResultInfo>      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_SortPlayerMatchResultInfosByRanking) == 0x000008, "Wrong alignment on UiHelperFunctions_SortPlayerMatchResultInfosByRanking");
static_assert(sizeof(UiHelperFunctions_SortPlayerMatchResultInfosByRanking) == 0x000020, "Wrong size on UiHelperFunctions_SortPlayerMatchResultInfosByRanking");
static_assert(offsetof(UiHelperFunctions_SortPlayerMatchResultInfosByRanking, PlayerMatchResultInfos) == 0x000000, "Member 'UiHelperFunctions_SortPlayerMatchResultInfosByRanking::PlayerMatchResultInfos' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortPlayerMatchResultInfosByRanking, ReturnValue) == 0x000010, "Member 'UiHelperFunctions_SortPlayerMatchResultInfosByRanking::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.SortWidgetFormPositionX
// 0x0028 (0x0028 - 0x0000)
struct UiHelperFunctions_SortWidgetFormPositionX final
{
public:
	TArray<class UWidget*>                        Widgets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDescendingOrder;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_SortWidgetFormPositionX) == 0x000008, "Wrong alignment on UiHelperFunctions_SortWidgetFormPositionX");
static_assert(sizeof(UiHelperFunctions_SortWidgetFormPositionX) == 0x000028, "Wrong size on UiHelperFunctions_SortWidgetFormPositionX");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionX, Widgets) == 0x000000, "Member 'UiHelperFunctions_SortWidgetFormPositionX::Widgets' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionX, bDescendingOrder) == 0x000010, "Member 'UiHelperFunctions_SortWidgetFormPositionX::bDescendingOrder' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionX, ReturnValue) == 0x000018, "Member 'UiHelperFunctions_SortWidgetFormPositionX::ReturnValue' has a wrong offset!");

// Function TslGame.UiHelperFunctions.SortWidgetFormPositionY
// 0x0028 (0x0028 - 0x0000)
struct UiHelperFunctions_SortWidgetFormPositionY final
{
public:
	TArray<class UWidget*>                        Widgets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDescendingOrder;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiHelperFunctions_SortWidgetFormPositionY) == 0x000008, "Wrong alignment on UiHelperFunctions_SortWidgetFormPositionY");
static_assert(sizeof(UiHelperFunctions_SortWidgetFormPositionY) == 0x000028, "Wrong size on UiHelperFunctions_SortWidgetFormPositionY");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionY, Widgets) == 0x000000, "Member 'UiHelperFunctions_SortWidgetFormPositionY::Widgets' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionY, bDescendingOrder) == 0x000010, "Member 'UiHelperFunctions_SortWidgetFormPositionY::bDescendingOrder' has a wrong offset!");
static_assert(offsetof(UiHelperFunctions_SortWidgetFormPositionY, ReturnValue) == 0x000018, "Member 'UiHelperFunctions_SortWidgetFormPositionY::ReturnValue' has a wrong offset!");

// Function TslGame.DoorFrameComponent.GetDoorStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct DoorFrameComponent_GetDoorStaticMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorFrameComponent_GetDoorStaticMesh) == 0x000008, "Wrong alignment on DoorFrameComponent_GetDoorStaticMesh");
static_assert(sizeof(DoorFrameComponent_GetDoorStaticMesh) == 0x000008, "Wrong size on DoorFrameComponent_GetDoorStaticMesh");
static_assert(offsetof(DoorFrameComponent_GetDoorStaticMesh, ReturnValue) == 0x000000, "Member 'DoorFrameComponent_GetDoorStaticMesh::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotoSeatActor.IsEntryAllowed
// 0x0001 (0x0001 - 0x0000)
struct TslMotoSeatActor_IsEntryAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotoSeatActor_IsEntryAllowed) == 0x000001, "Wrong alignment on TslMotoSeatActor_IsEntryAllowed");
static_assert(sizeof(TslMotoSeatActor_IsEntryAllowed) == 0x000001, "Wrong size on TslMotoSeatActor_IsEntryAllowed");
static_assert(offsetof(TslMotoSeatActor_IsEntryAllowed, ReturnValue) == 0x000000, "Member 'TslMotoSeatActor_IsEntryAllowed::ReturnValue' has a wrong offset!");

// Function TslGame.DroppedItemGroup.AddItem
// 0x0018 (0x0018 - 0x0000)
struct DroppedItemGroup_AddItem final
{
public:
	class UItem*                                  NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewWorldLocation;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DroppedItemGroup_AddItem) == 0x000008, "Wrong alignment on DroppedItemGroup_AddItem");
static_assert(sizeof(DroppedItemGroup_AddItem) == 0x000018, "Wrong size on DroppedItemGroup_AddItem");
static_assert(offsetof(DroppedItemGroup_AddItem, NewItem) == 0x000000, "Member 'DroppedItemGroup_AddItem::NewItem' has a wrong offset!");
static_assert(offsetof(DroppedItemGroup_AddItem, NewWorldLocation) == 0x000008, "Member 'DroppedItemGroup_AddItem::NewWorldLocation' has a wrong offset!");
static_assert(offsetof(DroppedItemGroup_AddItem, ReturnValue) == 0x000014, "Member 'DroppedItemGroup_AddItem::ReturnValue' has a wrong offset!");

// Function TslGame.DroppedItemInterface.GetDroppedItem
// 0x0008 (0x0008 - 0x0000)
struct DroppedItemInterface_GetDroppedItem final
{
public:
	class UItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedItemInterface_GetDroppedItem) == 0x000008, "Wrong alignment on DroppedItemInterface_GetDroppedItem");
static_assert(sizeof(DroppedItemInterface_GetDroppedItem) == 0x000008, "Wrong size on DroppedItemInterface_GetDroppedItem");
static_assert(offsetof(DroppedItemInterface_GetDroppedItem, ReturnValue) == 0x000000, "Member 'DroppedItemInterface_GetDroppedItem::ReturnValue' has a wrong offset!");

// Function TslGame.GeneralItemSpawner.CreateItemInitiators
// 0x0010 (0x0010 - 0x0000)
struct GeneralItemSpawner_CreateItemInitiators final
{
public:
	TArray<struct FItemInitiator>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralItemSpawner_CreateItemInitiators) == 0x000008, "Wrong alignment on GeneralItemSpawner_CreateItemInitiators");
static_assert(sizeof(GeneralItemSpawner_CreateItemInitiators) == 0x000010, "Wrong size on GeneralItemSpawner_CreateItemInitiators");
static_assert(offsetof(GeneralItemSpawner_CreateItemInitiators, ReturnValue) == 0x000000, "Member 'GeneralItemSpawner_CreateItemInitiators::ReturnValue' has a wrong offset!");

// Function TslGame.GeneralItemSpawner.CreateItems
// 0x0010 (0x0010 - 0x0000)
struct GeneralItemSpawner_CreateItems final
{
public:
	TArray<class UItem*>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralItemSpawner_CreateItems) == 0x000008, "Wrong alignment on GeneralItemSpawner_CreateItems");
static_assert(sizeof(GeneralItemSpawner_CreateItems) == 0x000010, "Wrong size on GeneralItemSpawner_CreateItems");
static_assert(offsetof(GeneralItemSpawner_CreateItems, ReturnValue) == 0x000000, "Member 'GeneralItemSpawner_CreateItems::ReturnValue' has a wrong offset!");

// Function TslGame.InteractionInterface.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct InteractionInterface_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionInterface_AllowInteractBy) == 0x000008, "Wrong alignment on InteractionInterface_AllowInteractBy");
static_assert(sizeof(InteractionInterface_AllowInteractBy) == 0x000010, "Wrong size on InteractionInterface_AllowInteractBy");
static_assert(offsetof(InteractionInterface_AllowInteractBy, Character) == 0x000000, "Member 'InteractionInterface_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(InteractionInterface_AllowInteractBy, ReturnValue) == 0x000008, "Member 'InteractionInterface_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.InteractionInterface.GetInteractionVerb
// 0x0018 (0x0018 - 0x0000)
struct InteractionInterface_GetInteractionVerb final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionInterface_GetInteractionVerb) == 0x000008, "Wrong alignment on InteractionInterface_GetInteractionVerb");
static_assert(sizeof(InteractionInterface_GetInteractionVerb) == 0x000018, "Wrong size on InteractionInterface_GetInteractionVerb");
static_assert(offsetof(InteractionInterface_GetInteractionVerb, ReturnValue) == 0x000000, "Member 'InteractionInterface_GetInteractionVerb::ReturnValue' has a wrong offset!");

// Function TslGame.InteractionInterface.GetInteractiveObjectName
// 0x0018 (0x0018 - 0x0000)
struct InteractionInterface_GetInteractiveObjectName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionInterface_GetInteractiveObjectName) == 0x000008, "Wrong alignment on InteractionInterface_GetInteractiveObjectName");
static_assert(sizeof(InteractionInterface_GetInteractiveObjectName) == 0x000018, "Wrong size on InteractionInterface_GetInteractiveObjectName");
static_assert(offsetof(InteractionInterface_GetInteractiveObjectName, ReturnValue) == 0x000000, "Member 'InteractionInterface_GetInteractiveObjectName::ReturnValue' has a wrong offset!");

// Function TslGame.AttachableItem.GetAttachmentData
// 0x00C0 (0x00C0 - 0x0000)
struct AttachableItem_GetAttachmentData final
{
public:
	struct FName                                   WeaponTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAttachmentData                  ReturnValue;                                       // 0x0008(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachableItem_GetAttachmentData) == 0x000008, "Wrong alignment on AttachableItem_GetAttachmentData");
static_assert(sizeof(AttachableItem_GetAttachmentData) == 0x0000C0, "Wrong size on AttachableItem_GetAttachmentData");
static_assert(offsetof(AttachableItem_GetAttachmentData, WeaponTag) == 0x000000, "Member 'AttachableItem_GetAttachmentData::WeaponTag' has a wrong offset!");
static_assert(offsetof(AttachableItem_GetAttachmentData, ReturnValue) == 0x000008, "Member 'AttachableItem_GetAttachmentData::ReturnValue' has a wrong offset!");

// Function TslGame.AttachableItem.GetAttachmentSlotID
// 0x0010 (0x0010 - 0x0000)
struct AttachableItem_GetAttachmentSlotID final
{
public:
	struct FName                                   WeaponTag;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAttachmentSlotID                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttachableItem_GetAttachmentSlotID) == 0x000004, "Wrong alignment on AttachableItem_GetAttachmentSlotID");
static_assert(sizeof(AttachableItem_GetAttachmentSlotID) == 0x000010, "Wrong size on AttachableItem_GetAttachmentSlotID");
static_assert(offsetof(AttachableItem_GetAttachmentSlotID, WeaponTag) == 0x000000, "Member 'AttachableItem_GetAttachmentSlotID::WeaponTag' has a wrong offset!");
static_assert(offsetof(AttachableItem_GetAttachmentSlotID, ReturnValue) == 0x000008, "Member 'AttachableItem_GetAttachmentSlotID::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetItemLevel
// 0x0004 (0x0004 - 0x0000)
struct CustomEquipableItem_GetItemLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetItemLevel) == 0x000004, "Wrong alignment on CustomEquipableItem_GetItemLevel");
static_assert(sizeof(CustomEquipableItem_GetItemLevel) == 0x000004, "Wrong size on CustomEquipableItem_GetItemLevel");
static_assert(offsetof(CustomEquipableItem_GetItemLevel, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetItemLevel::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetOffset_Melee
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipableItem_GetOffset_Melee final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetOffset_Melee) == 0x000010, "Wrong alignment on CustomEquipableItem_GetOffset_Melee");
static_assert(sizeof(CustomEquipableItem_GetOffset_Melee) == 0x000030, "Wrong size on CustomEquipableItem_GetOffset_Melee");
static_assert(offsetof(CustomEquipableItem_GetOffset_Melee, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetOffset_Melee::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetOffset_Primary
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipableItem_GetOffset_Primary final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetOffset_Primary) == 0x000010, "Wrong alignment on CustomEquipableItem_GetOffset_Primary");
static_assert(sizeof(CustomEquipableItem_GetOffset_Primary) == 0x000030, "Wrong size on CustomEquipableItem_GetOffset_Primary");
static_assert(offsetof(CustomEquipableItem_GetOffset_Primary, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetOffset_Primary::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetOffset_Secondary
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipableItem_GetOffset_Secondary final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetOffset_Secondary) == 0x000010, "Wrong alignment on CustomEquipableItem_GetOffset_Secondary");
static_assert(sizeof(CustomEquipableItem_GetOffset_Secondary) == 0x000030, "Wrong size on CustomEquipableItem_GetOffset_Secondary");
static_assert(offsetof(CustomEquipableItem_GetOffset_Secondary, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetOffset_Secondary::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetOffset_SideArm
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipableItem_GetOffset_SideArm final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetOffset_SideArm) == 0x000010, "Wrong alignment on CustomEquipableItem_GetOffset_SideArm");
static_assert(sizeof(CustomEquipableItem_GetOffset_SideArm) == 0x000030, "Wrong size on CustomEquipableItem_GetOffset_SideArm");
static_assert(offsetof(CustomEquipableItem_GetOffset_SideArm, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetOffset_SideArm::ReturnValue' has a wrong offset!");

// Function TslGame.CustomEquipableItem.GetOffset_Thrown
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipableItem_GetOffset_Thrown final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipableItem_GetOffset_Thrown) == 0x000010, "Wrong alignment on CustomEquipableItem_GetOffset_Thrown");
static_assert(sizeof(CustomEquipableItem_GetOffset_Thrown) == 0x000030, "Wrong size on CustomEquipableItem_GetOffset_Thrown");
static_assert(offsetof(CustomEquipableItem_GetOffset_Thrown, ReturnValue) == 0x000000, "Member 'CustomEquipableItem_GetOffset_Thrown::ReturnValue' has a wrong offset!");

// Function TslGame.ThrowableItem.GetDefaultWeaponObject
// 0x0008 (0x0008 - 0x0000)
struct ThrowableItem_GetDefaultWeaponObject final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableItem_GetDefaultWeaponObject) == 0x000008, "Wrong alignment on ThrowableItem_GetDefaultWeaponObject");
static_assert(sizeof(ThrowableItem_GetDefaultWeaponObject) == 0x000008, "Wrong size on ThrowableItem_GetDefaultWeaponObject");
static_assert(offsetof(ThrowableItem_GetDefaultWeaponObject, ReturnValue) == 0x000000, "Member 'ThrowableItem_GetDefaultWeaponObject::ReturnValue' has a wrong offset!");

// Function TslGame.ThrowableItem.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct ThrowableItem_GetEquippedWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableItem_GetEquippedWeapon) == 0x000008, "Wrong alignment on ThrowableItem_GetEquippedWeapon");
static_assert(sizeof(ThrowableItem_GetEquippedWeapon) == 0x000008, "Wrong size on ThrowableItem_GetEquippedWeapon");
static_assert(offsetof(ThrowableItem_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'ThrowableItem_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.AttachWeaponToSlot
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_AttachWeaponToSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_AttachWeaponToSlot) == 0x000004, "Wrong alignment on TslWeapon_AttachWeaponToSlot");
static_assert(sizeof(TslWeapon_AttachWeaponToSlot) == 0x000004, "Wrong size on TslWeapon_AttachWeaponToSlot");
static_assert(offsetof(TslWeapon_AttachWeaponToSlot, SlotIndex) == 0x000000, "Member 'TslWeapon_AttachWeaponToSlot::SlotIndex' has a wrong offset!");

// Function TslGame.TslWeapon.ClientInitByReconnection
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_ClientInitByReconnection final
{
public:
	bool                                          bIsArmed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_ClientInitByReconnection) == 0x000001, "Wrong alignment on TslWeapon_ClientInitByReconnection");
static_assert(sizeof(TslWeapon_ClientInitByReconnection) == 0x000001, "Wrong size on TslWeapon_ClientInitByReconnection");
static_assert(offsetof(TslWeapon_ClientInitByReconnection, bIsArmed) == 0x000000, "Member 'TslWeapon_ClientInitByReconnection::bIsArmed' has a wrong offset!");

// Function TslGame.TslWeapon.OnAnimationNotify
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_OnAnimationNotify final
{
public:
	struct FName                                   NotifyName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_OnAnimationNotify) == 0x000004, "Wrong alignment on TslWeapon_OnAnimationNotify");
static_assert(sizeof(TslWeapon_OnAnimationNotify) == 0x000008, "Wrong size on TslWeapon_OnAnimationNotify");
static_assert(offsetof(TslWeapon_OnAnimationNotify, NotifyName) == 0x000000, "Member 'TslWeapon_OnAnimationNotify::NotifyName' has a wrong offset!");

// Function TslGame.TslWeapon.ServerLogFireWeapon
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_ServerLogFireWeapon final
{
public:
	struct FAttackId                              AttackId;                                          // 0x0000(0x0004)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_ServerLogFireWeapon) == 0x000004, "Wrong alignment on TslWeapon_ServerLogFireWeapon");
static_assert(sizeof(TslWeapon_ServerLogFireWeapon) == 0x000004, "Wrong size on TslWeapon_ServerLogFireWeapon");
static_assert(offsetof(TslWeapon_ServerLogFireWeapon, AttackId) == 0x000000, "Member 'TslWeapon_ServerLogFireWeapon::AttackId' has a wrong offset!");

// Function TslGame.TslWeapon.SetCurrentWeaponZero
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_SetCurrentWeaponZero final
{
public:
	float                                         newZero;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_SetCurrentWeaponZero) == 0x000004, "Wrong alignment on TslWeapon_SetCurrentWeaponZero");
static_assert(sizeof(TslWeapon_SetCurrentWeaponZero) == 0x000004, "Wrong size on TslWeapon_SetCurrentWeaponZero");
static_assert(offsetof(TslWeapon_SetCurrentWeaponZero, newZero) == 0x000000, "Member 'TslWeapon_SetCurrentWeaponZero::newZero' has a wrong offset!");

// Function TslGame.TslWeapon.SimulatePhysicalBodyHit
// 0x0098 (0x0098 - 0x0000)
struct TslWeapon_SimulatePhysicalBodyHit final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ShotDirection;                                     // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWeapon_SimulatePhysicalBodyHit) == 0x000008, "Wrong alignment on TslWeapon_SimulatePhysicalBodyHit");
static_assert(sizeof(TslWeapon_SimulatePhysicalBodyHit) == 0x000098, "Wrong size on TslWeapon_SimulatePhysicalBodyHit");
static_assert(offsetof(TslWeapon_SimulatePhysicalBodyHit, Impact) == 0x000000, "Member 'TslWeapon_SimulatePhysicalBodyHit::Impact' has a wrong offset!");
static_assert(offsetof(TslWeapon_SimulatePhysicalBodyHit, ShotDirection) == 0x000088, "Member 'TslWeapon_SimulatePhysicalBodyHit::ShotDirection' has a wrong offset!");

// Function TslGame.TslWeapon.GetAllWeaponAttachmentAssets
// 0x0010 (0x0010 - 0x0000)
struct TslWeapon_GetAllWeaponAttachmentAssets final
{
public:
	TArray<struct FWeaponAttachmentAssetData>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetAllWeaponAttachmentAssets) == 0x000008, "Wrong alignment on TslWeapon_GetAllWeaponAttachmentAssets");
static_assert(sizeof(TslWeapon_GetAllWeaponAttachmentAssets) == 0x000010, "Wrong size on TslWeapon_GetAllWeaponAttachmentAssets");
static_assert(offsetof(TslWeapon_GetAllWeaponAttachmentAssets, ReturnValue) == 0x000000, "Member 'TslWeapon_GetAllWeaponAttachmentAssets::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetAllWeaponAttachmentData
// 0x0010 (0x0010 - 0x0000)
struct TslWeapon_GetAllWeaponAttachmentData final
{
public:
	TArray<struct FWeaponAttachmentData>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetAllWeaponAttachmentData) == 0x000008, "Wrong alignment on TslWeapon_GetAllWeaponAttachmentData");
static_assert(sizeof(TslWeapon_GetAllWeaponAttachmentData) == 0x000010, "Wrong size on TslWeapon_GetAllWeaponAttachmentData");
static_assert(offsetof(TslWeapon_GetAllWeaponAttachmentData, ReturnValue) == 0x000000, "Member 'TslWeapon_GetAllWeaponAttachmentData::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetAnimWeaponType
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_GetAnimWeaponType final
{
public:
	EAnimWeaponType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetAnimWeaponType) == 0x000001, "Wrong alignment on TslWeapon_GetAnimWeaponType");
static_assert(sizeof(TslWeapon_GetAnimWeaponType) == 0x000001, "Wrong size on TslWeapon_GetAnimWeaponType");
static_assert(offsetof(TslWeapon_GetAnimWeaponType, ReturnValue) == 0x000000, "Member 'TslWeapon_GetAnimWeaponType::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetAttachedMesh
// 0x0010 (0x0010 - 0x0000)
struct TslWeapon_GetAttachedMesh final
{
public:
	TArray<class UAsyncStaticMeshComponent*>      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetAttachedMesh) == 0x000008, "Wrong alignment on TslWeapon_GetAttachedMesh");
static_assert(sizeof(TslWeapon_GetAttachedMesh) == 0x000010, "Wrong size on TslWeapon_GetAttachedMesh");
static_assert(offsetof(TslWeapon_GetAttachedMesh, ReturnValue) == 0x000000, "Member 'TslWeapon_GetAttachedMesh::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetCurrentWeaponZero
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_GetCurrentWeaponZero final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetCurrentWeaponZero) == 0x000004, "Wrong alignment on TslWeapon_GetCurrentWeaponZero");
static_assert(sizeof(TslWeapon_GetCurrentWeaponZero) == 0x000004, "Wrong size on TslWeapon_GetCurrentWeaponZero");
static_assert(offsetof(TslWeapon_GetCurrentWeaponZero, ReturnValue) == 0x000000, "Member 'TslWeapon_GetCurrentWeaponZero::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetDoGripPose
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_GetDoGripPose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetDoGripPose) == 0x000001, "Wrong alignment on TslWeapon_GetDoGripPose");
static_assert(sizeof(TslWeapon_GetDoGripPose) == 0x000001, "Wrong size on TslWeapon_GetDoGripPose");
static_assert(offsetof(TslWeapon_GetDoGripPose, ReturnValue) == 0x000000, "Member 'TslWeapon_GetDoGripPose::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetHandIK_Left
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetHandIK_Left final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetHandIK_Left) == 0x000008, "Wrong alignment on TslWeapon_GetHandIK_Left");
static_assert(sizeof(TslWeapon_GetHandIK_Left) == 0x000008, "Wrong size on TslWeapon_GetHandIK_Left");
static_assert(offsetof(TslWeapon_GetHandIK_Left, ReturnValue) == 0x000000, "Member 'TslWeapon_GetHandIK_Left::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetHandIK_Right
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetHandIK_Right final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetHandIK_Right) == 0x000008, "Wrong alignment on TslWeapon_GetHandIK_Right");
static_assert(sizeof(TslWeapon_GetHandIK_Right) == 0x000008, "Wrong size on TslWeapon_GetHandIK_Right");
static_assert(offsetof(TslWeapon_GetHandIK_Right, ReturnValue) == 0x000000, "Member 'TslWeapon_GetHandIK_Right::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_GetItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetItemName) == 0x000008, "Wrong alignment on TslWeapon_GetItemName");
static_assert(sizeof(TslWeapon_GetItemName) == 0x000018, "Wrong size on TslWeapon_GetItemName");
static_assert(offsetof(TslWeapon_GetItemName, ReturnValue) == 0x000000, "Member 'TslWeapon_GetItemName::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetLowerRailOffset
// 0x000C (0x000C - 0x0000)
struct TslWeapon_GetLowerRailOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetLowerRailOffset) == 0x000004, "Wrong alignment on TslWeapon_GetLowerRailOffset");
static_assert(sizeof(TslWeapon_GetLowerRailOffset) == 0x00000C, "Wrong size on TslWeapon_GetLowerRailOffset");
static_assert(offsetof(TslWeapon_GetLowerRailOffset, ReturnValue) == 0x000000, "Member 'TslWeapon_GetLowerRailOffset::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetPawnOwner final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetPawnOwner) == 0x000008, "Wrong alignment on TslWeapon_GetPawnOwner");
static_assert(sizeof(TslWeapon_GetPawnOwner) == 0x000008, "Wrong size on TslWeapon_GetPawnOwner");
static_assert(offsetof(TslWeapon_GetPawnOwner, ReturnValue) == 0x000000, "Member 'TslWeapon_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetRecoilMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetRecoilMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetRecoilMontage) == 0x000008, "Wrong alignment on TslWeapon_GetRecoilMontage");
static_assert(sizeof(TslWeapon_GetRecoilMontage) == 0x000008, "Wrong size on TslWeapon_GetRecoilMontage");
static_assert(offsetof(TslWeapon_GetRecoilMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_GetRecoilMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetStanceSwayModifier
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetStanceSwayModifier final
{
public:
	EAnimStance                                   Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetStanceSwayModifier) == 0x000004, "Wrong alignment on TslWeapon_GetStanceSwayModifier");
static_assert(sizeof(TslWeapon_GetStanceSwayModifier) == 0x000008, "Wrong size on TslWeapon_GetStanceSwayModifier");
static_assert(offsetof(TslWeapon_GetStanceSwayModifier, Stance) == 0x000000, "Member 'TslWeapon_GetStanceSwayModifier::Stance' has a wrong offset!");
static_assert(offsetof(TslWeapon_GetStanceSwayModifier, ReturnValue) == 0x000004, "Member 'TslWeapon_GetStanceSwayModifier::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetSwayModifier
// 0x000C (0x000C - 0x0000)
struct TslWeapon_GetSwayModifier final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetSwayModifier) == 0x000004, "Wrong alignment on TslWeapon_GetSwayModifier");
static_assert(sizeof(TslWeapon_GetSwayModifier) == 0x00000C, "Wrong size on TslWeapon_GetSwayModifier");
static_assert(offsetof(TslWeapon_GetSwayModifier, ReturnValue) == 0x000000, "Member 'TslWeapon_GetSwayModifier::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetThrownType
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_GetThrownType final
{
public:
	EThrownWeaponType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetThrownType) == 0x000001, "Wrong alignment on TslWeapon_GetThrownType");
static_assert(sizeof(TslWeapon_GetThrownType) == 0x000001, "Wrong size on TslWeapon_GetThrownType");
static_assert(offsetof(TslWeapon_GetThrownType, ReturnValue) == 0x000000, "Member 'TslWeapon_GetThrownType::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponAnimationKick
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_GetWeaponAnimationKick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponAnimationKick) == 0x000004, "Wrong alignment on TslWeapon_GetWeaponAnimationKick");
static_assert(sizeof(TslWeapon_GetWeaponAnimationKick) == 0x000004, "Wrong size on TslWeapon_GetWeaponAnimationKick");
static_assert(offsetof(TslWeapon_GetWeaponAnimationKick, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponAnimationKick::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponAttachmentAsset
// 0x0038 (0x0038 - 0x0000)
struct TslWeapon_GetWeaponAttachmentAsset final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponAttachmentAssetData             ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponAttachmentAsset) == 0x000008, "Wrong alignment on TslWeapon_GetWeaponAttachmentAsset");
static_assert(sizeof(TslWeapon_GetWeaponAttachmentAsset) == 0x000038, "Wrong size on TslWeapon_GetWeaponAttachmentAsset");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentAsset, SlotID) == 0x000000, "Member 'TslWeapon_GetWeaponAttachmentAsset::SlotID' has a wrong offset!");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentAsset, ReturnValue) == 0x000008, "Member 'TslWeapon_GetWeaponAttachmentAsset::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponAttachmentAssetDatas
// 0x0010 (0x0010 - 0x0000)
struct TslWeapon_GetWeaponAttachmentAssetDatas final
{
public:
	TArray<struct FWeaponAttachmentAssetData>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponAttachmentAssetDatas) == 0x000008, "Wrong alignment on TslWeapon_GetWeaponAttachmentAssetDatas");
static_assert(sizeof(TslWeapon_GetWeaponAttachmentAssetDatas) == 0x000010, "Wrong size on TslWeapon_GetWeaponAttachmentAssetDatas");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentAssetDatas, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponAttachmentAssetDatas::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponAttachmentData
// 0x00C0 (0x00C0 - 0x0000)
struct TslWeapon_GetWeaponAttachmentData final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponAttachmentData                  ReturnValue;                                       // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponAttachmentData) == 0x000008, "Wrong alignment on TslWeapon_GetWeaponAttachmentData");
static_assert(sizeof(TslWeapon_GetWeaponAttachmentData) == 0x0000C0, "Wrong size on TslWeapon_GetWeaponAttachmentData");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentData, SlotID) == 0x000000, "Member 'TslWeapon_GetWeaponAttachmentData::SlotID' has a wrong offset!");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentData, ReturnValue) == 0x000008, "Member 'TslWeapon_GetWeaponAttachmentData::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponAttachmentPoint
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_GetWeaponAttachmentPoint final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponAttachmentPoint) == 0x000004, "Wrong alignment on TslWeapon_GetWeaponAttachmentPoint");
static_assert(sizeof(TslWeapon_GetWeaponAttachmentPoint) == 0x000018, "Wrong size on TslWeapon_GetWeaponAttachmentPoint");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentPoint, SlotID) == 0x000000, "Member 'TslWeapon_GetWeaponAttachmentPoint::SlotID' has a wrong offset!");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentPoint, Tag) == 0x000008, "Member 'TslWeapon_GetWeaponAttachmentPoint::Tag' has a wrong offset!");
static_assert(offsetof(TslWeapon_GetWeaponAttachmentPoint, ReturnValue) == 0x000010, "Member 'TslWeapon_GetWeaponAttachmentPoint::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponClassEnum
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_GetWeaponClassEnum final
{
public:
	EWeaponClass                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponClassEnum) == 0x000001, "Wrong alignment on TslWeapon_GetWeaponClassEnum");
static_assert(sizeof(TslWeapon_GetWeaponClassEnum) == 0x000001, "Wrong size on TslWeapon_GetWeaponClassEnum");
static_assert(offsetof(TslWeapon_GetWeaponClassEnum, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponClassEnum::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponConfig
// 0x0090 (0x0090 - 0x0000)
struct TslWeapon_GetWeaponConfig final
{
public:
	struct FWeaponData                            ReturnValue;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponConfig) == 0x000008, "Wrong alignment on TslWeapon_GetWeaponConfig");
static_assert(sizeof(TslWeapon_GetWeaponConfig) == 0x000090, "Wrong size on TslWeapon_GetWeaponConfig");
static_assert(offsetof(TslWeapon_GetWeaponConfig, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponConfig::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponDamage
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_GetWeaponDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponDamage) == 0x000004, "Wrong alignment on TslWeapon_GetWeaponDamage");
static_assert(sizeof(TslWeapon_GetWeaponDamage) == 0x000004, "Wrong size on TslWeapon_GetWeaponDamage");
static_assert(offsetof(TslWeapon_GetWeaponDamage, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponDamage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponEquipDuration
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_GetWeaponEquipDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponEquipDuration) == 0x000004, "Wrong alignment on TslWeapon_GetWeaponEquipDuration");
static_assert(sizeof(TslWeapon_GetWeaponEquipDuration) == 0x000004, "Wrong size on TslWeapon_GetWeaponEquipDuration");
static_assert(offsetof(TslWeapon_GetWeaponEquipDuration, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponEquipDuration::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponGripTypeLeft
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_GetWeaponGripTypeLeft final
{
public:
	EWeaponGripLeftHand                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponGripTypeLeft) == 0x000001, "Wrong alignment on TslWeapon_GetWeaponGripTypeLeft");
static_assert(sizeof(TslWeapon_GetWeaponGripTypeLeft) == 0x000001, "Wrong size on TslWeapon_GetWeaponGripTypeLeft");
static_assert(offsetof(TslWeapon_GetWeaponGripTypeLeft, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponGripTypeLeft::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_GetWeaponMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponMesh) == 0x000008, "Wrong alignment on TslWeapon_GetWeaponMesh");
static_assert(sizeof(TslWeapon_GetWeaponMesh) == 0x000008, "Wrong size on TslWeapon_GetWeaponMesh");
static_assert(offsetof(TslWeapon_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.GetWeaponReadyDuration
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_GetWeaponReadyDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_GetWeaponReadyDuration) == 0x000004, "Wrong alignment on TslWeapon_GetWeaponReadyDuration");
static_assert(sizeof(TslWeapon_GetWeaponReadyDuration) == 0x000004, "Wrong size on TslWeapon_GetWeaponReadyDuration");
static_assert(offsetof(TslWeapon_GetWeaponReadyDuration, ReturnValue) == 0x000000, "Member 'TslWeapon_GetWeaponReadyDuration::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.IsCustomSightAttached
// 0x0002 (0x0002 - 0x0000)
struct TslWeapon_IsCustomSightAttached final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_IsCustomSightAttached) == 0x000001, "Wrong alignment on TslWeapon_IsCustomSightAttached");
static_assert(sizeof(TslWeapon_IsCustomSightAttached) == 0x000002, "Wrong size on TslWeapon_IsCustomSightAttached");
static_assert(offsetof(TslWeapon_IsCustomSightAttached, SlotID) == 0x000000, "Member 'TslWeapon_IsCustomSightAttached::SlotID' has a wrong offset!");
static_assert(offsetof(TslWeapon_IsCustomSightAttached, ReturnValue) == 0x000001, "Member 'TslWeapon_IsCustomSightAttached::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon.IsWeaponAttachedToShoulder
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_IsWeaponAttachedToShoulder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_IsWeaponAttachedToShoulder) == 0x000001, "Wrong alignment on TslWeapon_IsWeaponAttachedToShoulder");
static_assert(sizeof(TslWeapon_IsWeaponAttachedToShoulder) == 0x000001, "Wrong size on TslWeapon_IsWeaponAttachedToShoulder");
static_assert(offsetof(TslWeapon_IsWeaponAttachedToShoulder, ReturnValue) == 0x000000, "Member 'TslWeapon_IsWeaponAttachedToShoulder::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.AttachItem
// 0x0010 (0x0010 - 0x0000)
struct WeaponItem_AttachItem final
{
public:
	class UAttachableItem*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponItem_AttachItem) == 0x000008, "Wrong alignment on WeaponItem_AttachItem");
static_assert(sizeof(WeaponItem_AttachItem) == 0x000010, "Wrong size on WeaponItem_AttachItem");
static_assert(offsetof(WeaponItem_AttachItem, Item) == 0x000000, "Member 'WeaponItem_AttachItem::Item' has a wrong offset!");
static_assert(offsetof(WeaponItem_AttachItem, ReturnValue) == 0x000008, "Member 'WeaponItem_AttachItem::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.DetachItem
// 0x0010 (0x0010 - 0x0000)
struct WeaponItem_DetachItem final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttachableItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_DetachItem) == 0x000008, "Wrong alignment on WeaponItem_DetachItem");
static_assert(sizeof(WeaponItem_DetachItem) == 0x000010, "Wrong size on WeaponItem_DetachItem");
static_assert(offsetof(WeaponItem_DetachItem, SlotID) == 0x000000, "Member 'WeaponItem_DetachItem::SlotID' has a wrong offset!");
static_assert(offsetof(WeaponItem_DetachItem, ReturnValue) == 0x000008, "Member 'WeaponItem_DetachItem::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.SetFiringMode
// 0x0001 (0x0001 - 0x0000)
struct WeaponItem_SetFiringMode final
{
public:
	EFiringMode                                   fMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_SetFiringMode) == 0x000001, "Wrong alignment on WeaponItem_SetFiringMode");
static_assert(sizeof(WeaponItem_SetFiringMode) == 0x000001, "Wrong size on WeaponItem_SetFiringMode");
static_assert(offsetof(WeaponItem_SetFiringMode, fMode) == 0x000000, "Member 'WeaponItem_SetFiringMode::fMode' has a wrong offset!");

// Function TslGame.WeaponItem.GetAllAttachedItems
// 0x0010 (0x0010 - 0x0000)
struct WeaponItem_GetAllAttachedItems final
{
public:
	TArray<class UAttachableItem*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetAllAttachedItems) == 0x000008, "Wrong alignment on WeaponItem_GetAllAttachedItems");
static_assert(sizeof(WeaponItem_GetAllAttachedItems) == 0x000010, "Wrong size on WeaponItem_GetAllAttachedItems");
static_assert(offsetof(WeaponItem_GetAllAttachedItems, ReturnValue) == 0x000000, "Member 'WeaponItem_GetAllAttachedItems::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.GetAttachableItemCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponItem_GetAttachableItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetAttachableItemCount) == 0x000004, "Wrong alignment on WeaponItem_GetAttachableItemCount");
static_assert(sizeof(WeaponItem_GetAttachableItemCount) == 0x000004, "Wrong size on WeaponItem_GetAttachableItemCount");
static_assert(offsetof(WeaponItem_GetAttachableItemCount, ReturnValue) == 0x000000, "Member 'WeaponItem_GetAttachableItemCount::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.GetAttachedItem
// 0x0010 (0x0010 - 0x0000)
struct WeaponItem_GetAttachedItem final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttachableItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetAttachedItem) == 0x000008, "Wrong alignment on WeaponItem_GetAttachedItem");
static_assert(sizeof(WeaponItem_GetAttachedItem) == 0x000010, "Wrong size on WeaponItem_GetAttachedItem");
static_assert(offsetof(WeaponItem_GetAttachedItem, SlotID) == 0x000000, "Member 'WeaponItem_GetAttachedItem::SlotID' has a wrong offset!");
static_assert(offsetof(WeaponItem_GetAttachedItem, ReturnValue) == 0x000008, "Member 'WeaponItem_GetAttachedItem::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.GetDefaultWeaponObject
// 0x0008 (0x0008 - 0x0000)
struct WeaponItem_GetDefaultWeaponObject final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetDefaultWeaponObject) == 0x000008, "Wrong alignment on WeaponItem_GetDefaultWeaponObject");
static_assert(sizeof(WeaponItem_GetDefaultWeaponObject) == 0x000008, "Wrong size on WeaponItem_GetDefaultWeaponObject");
static_assert(offsetof(WeaponItem_GetDefaultWeaponObject, ReturnValue) == 0x000000, "Member 'WeaponItem_GetDefaultWeaponObject::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponItem_GetEquippedWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetEquippedWeapon) == 0x000008, "Wrong alignment on WeaponItem_GetEquippedWeapon");
static_assert(sizeof(WeaponItem_GetEquippedWeapon) == 0x000008, "Wrong size on WeaponItem_GetEquippedWeapon");
static_assert(offsetof(WeaponItem_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'WeaponItem_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.GetFiringMode
// 0x0001 (0x0001 - 0x0000)
struct WeaponItem_GetFiringMode final
{
public:
	EFiringMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_GetFiringMode) == 0x000001, "Wrong alignment on WeaponItem_GetFiringMode");
static_assert(sizeof(WeaponItem_GetFiringMode) == 0x000001, "Wrong size on WeaponItem_GetFiringMode");
static_assert(offsetof(WeaponItem_GetFiringMode, ReturnValue) == 0x000000, "Member 'WeaponItem_GetFiringMode::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.HasAttachmentSlot
// 0x0002 (0x0002 - 0x0000)
struct WeaponItem_HasAttachmentSlot final
{
public:
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponItem_HasAttachmentSlot) == 0x000001, "Wrong alignment on WeaponItem_HasAttachmentSlot");
static_assert(sizeof(WeaponItem_HasAttachmentSlot) == 0x000002, "Wrong size on WeaponItem_HasAttachmentSlot");
static_assert(offsetof(WeaponItem_HasAttachmentSlot, SlotID) == 0x000000, "Member 'WeaponItem_HasAttachmentSlot::SlotID' has a wrong offset!");
static_assert(offsetof(WeaponItem_HasAttachmentSlot, ReturnValue) == 0x000001, "Member 'WeaponItem_HasAttachmentSlot::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponItem.IsAttachable
// 0x0010 (0x0010 - 0x0000)
struct WeaponItem_IsAttachable final
{
public:
	class UAttachableItem*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponItem_IsAttachable) == 0x000008, "Wrong alignment on WeaponItem_IsAttachable");
static_assert(sizeof(WeaponItem_IsAttachable) == 0x000010, "Wrong size on WeaponItem_IsAttachable");
static_assert(offsetof(WeaponItem_IsAttachable, Item) == 0x000000, "Member 'WeaponItem_IsAttachable::Item' has a wrong offset!");
static_assert(offsetof(WeaponItem_IsAttachable, ReturnValue) == 0x000008, "Member 'WeaponItem_IsAttachable::ReturnValue' has a wrong offset!");

// Function TslGame.ItemSpawnProcessor.ProcessGroup
// 0x0018 (0x0018 - 0x0000)
struct ItemSpawnProcessor_ProcessGroup final
{
public:
	class UItemSpotGroupComponent*                SpotGroup;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UItemSpotComponent*>             Spots;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSpawnProcessor_ProcessGroup) == 0x000008, "Wrong alignment on ItemSpawnProcessor_ProcessGroup");
static_assert(sizeof(ItemSpawnProcessor_ProcessGroup) == 0x000018, "Wrong size on ItemSpawnProcessor_ProcessGroup");
static_assert(offsetof(ItemSpawnProcessor_ProcessGroup, SpotGroup) == 0x000000, "Member 'ItemSpawnProcessor_ProcessGroup::SpotGroup' has a wrong offset!");
static_assert(offsetof(ItemSpawnProcessor_ProcessGroup, Spots) == 0x000008, "Member 'ItemSpawnProcessor_ProcessGroup::Spots' has a wrong offset!");

// Function TslGame.ItemSpawnProcessor.ProcessSpawnItem
// 0x0008 (0x0008 - 0x0000)
struct ItemSpawnProcessor_ProcessSpawnItem final
{
public:
	class UItemSpotGroupComponent*                Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSpawnProcessor_ProcessSpawnItem) == 0x000008, "Wrong alignment on ItemSpawnProcessor_ProcessSpawnItem");
static_assert(sizeof(ItemSpawnProcessor_ProcessSpawnItem) == 0x000008, "Wrong size on ItemSpawnProcessor_ProcessSpawnItem");
static_assert(offsetof(ItemSpawnProcessor_ProcessSpawnItem, Spawner) == 0x000000, "Member 'ItemSpawnProcessor_ProcessSpawnItem::Spawner' has a wrong offset!");

// Function TslGame.ItemSpawnProcessor.CheckItemGroup
// 0x0010 (0x0010 - 0x0000)
struct ItemSpawnProcessor_CheckItemGroup final
{
public:
	class UItemSpotGroupComponent*                SpotGroup;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemSpawnProcessor_CheckItemGroup) == 0x000008, "Wrong alignment on ItemSpawnProcessor_CheckItemGroup");
static_assert(sizeof(ItemSpawnProcessor_CheckItemGroup) == 0x000010, "Wrong size on ItemSpawnProcessor_CheckItemGroup");
static_assert(offsetof(ItemSpawnProcessor_CheckItemGroup, SpotGroup) == 0x000000, "Member 'ItemSpawnProcessor_CheckItemGroup::SpotGroup' has a wrong offset!");
static_assert(offsetof(ItemSpawnProcessor_CheckItemGroup, ReturnValue) == 0x000008, "Member 'ItemSpawnProcessor_CheckItemGroup::ReturnValue' has a wrong offset!");

// Function TslGame.ItemStudio.AddYaw
// 0x0004 (0x0004 - 0x0000)
struct ItemStudio_AddYaw final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemStudio_AddYaw) == 0x000004, "Wrong alignment on ItemStudio_AddYaw");
static_assert(sizeof(ItemStudio_AddYaw) == 0x000004, "Wrong size on ItemStudio_AddYaw");
static_assert(offsetof(ItemStudio_AddYaw, Value) == 0x000000, "Member 'ItemStudio_AddYaw::Value' has a wrong offset!");

// Function TslGame.ItemStudio.SetItem
// 0x0008 (0x0008 - 0x0000)
struct ItemStudio_SetItem final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemStudio_SetItem) == 0x000008, "Wrong alignment on ItemStudio_SetItem");
static_assert(sizeof(ItemStudio_SetItem) == 0x000008, "Wrong size on ItemStudio_SetItem");
static_assert(offsetof(ItemStudio_SetItem, Item) == 0x000000, "Member 'ItemStudio_SetItem::Item' has a wrong offset!");

// Function TslGame.ItemStudio.SetTextureRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct ItemStudio_SetTextureRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 NewTextureTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemStudio_SetTextureRenderTarget) == 0x000008, "Wrong alignment on ItemStudio_SetTextureRenderTarget");
static_assert(sizeof(ItemStudio_SetTextureRenderTarget) == 0x000008, "Wrong size on ItemStudio_SetTextureRenderTarget");
static_assert(offsetof(ItemStudio_SetTextureRenderTarget, NewTextureTarget) == 0x000000, "Member 'ItemStudio_SetTextureRenderTarget::NewTextureTarget' has a wrong offset!");

// Function TslGame.ItemStudio.UpdateComponentToWorld
// 0x0008 (0x0008 - 0x0000)
struct ItemStudio_UpdateComponentToWorld final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemStudio_UpdateComponentToWorld) == 0x000008, "Wrong alignment on ItemStudio_UpdateComponentToWorld");
static_assert(sizeof(ItemStudio_UpdateComponentToWorld) == 0x000008, "Wrong size on ItemStudio_UpdateComponentToWorld");
static_assert(offsetof(ItemStudio_UpdateComponentToWorld, Mesh) == 0x000000, "Member 'ItemStudio_UpdateComponentToWorld::Mesh' has a wrong offset!");

// Function TslGame.ItemToolTipWidget.UpdateEquipmentSlotItemToolTip
// 0x0008 (0x0008 - 0x0000)
struct ItemToolTipWidget_UpdateEquipmentSlotItemToolTip final
{
public:
	class UEquipableItem*                         EquipableItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemToolTipWidget_UpdateEquipmentSlotItemToolTip) == 0x000008, "Wrong alignment on ItemToolTipWidget_UpdateEquipmentSlotItemToolTip");
static_assert(sizeof(ItemToolTipWidget_UpdateEquipmentSlotItemToolTip) == 0x000008, "Wrong size on ItemToolTipWidget_UpdateEquipmentSlotItemToolTip");
static_assert(offsetof(ItemToolTipWidget_UpdateEquipmentSlotItemToolTip, EquipableItem) == 0x000000, "Member 'ItemToolTipWidget_UpdateEquipmentSlotItemToolTip::EquipableItem' has a wrong offset!");

// Function TslGame.ItemToolTipWidget.UpdateSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct ItemToolTipWidget_UpdateSlotInfo final
{
public:
	TScriptInterface<class ISlotInterface>        SlotInterface;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemToolTipWidget_UpdateSlotInfo) == 0x000008, "Wrong alignment on ItemToolTipWidget_UpdateSlotInfo");
static_assert(sizeof(ItemToolTipWidget_UpdateSlotInfo) == 0x000010, "Wrong size on ItemToolTipWidget_UpdateSlotInfo");
static_assert(offsetof(ItemToolTipWidget_UpdateSlotInfo, SlotInterface) == 0x000000, "Member 'ItemToolTipWidget_UpdateSlotInfo::SlotInterface' has a wrong offset!");

// Function TslGame.ItemToolTipWidget.UpdateToolTipBySlotInterface
// 0x0020 (0x0020 - 0x0000)
struct ItemToolTipWidget_UpdateToolTipBySlotInterface final
{
public:
	TScriptInterface<class ISlotInterface>        SlotInterface;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotContainerInterface> Container;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemToolTipWidget_UpdateToolTipBySlotInterface) == 0x000008, "Wrong alignment on ItemToolTipWidget_UpdateToolTipBySlotInterface");
static_assert(sizeof(ItemToolTipWidget_UpdateToolTipBySlotInterface) == 0x000020, "Wrong size on ItemToolTipWidget_UpdateToolTipBySlotInterface");
static_assert(offsetof(ItemToolTipWidget_UpdateToolTipBySlotInterface, SlotInterface) == 0x000000, "Member 'ItemToolTipWidget_UpdateToolTipBySlotInterface::SlotInterface' has a wrong offset!");
static_assert(offsetof(ItemToolTipWidget_UpdateToolTipBySlotInterface, Container) == 0x000010, "Member 'ItemToolTipWidget_UpdateToolTipBySlotInterface::Container' has a wrong offset!");

// Function TslGame.ItemToolTipWidget.UpdateVicinityOrInventorySlotItemToolTip
// 0x0010 (0x0010 - 0x0000)
struct ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip final
{
public:
	class UEquipableItem*                         EquipableItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipableItem*                         EquipmentSlotItem;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip) == 0x000008, "Wrong alignment on ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip");
static_assert(sizeof(ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip) == 0x000010, "Wrong size on ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip");
static_assert(offsetof(ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip, EquipableItem) == 0x000000, "Member 'ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip::EquipableItem' has a wrong offset!");
static_assert(offsetof(ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip, EquipmentSlotItem) == 0x000008, "Member 'ItemToolTipWidget_UpdateVicinityOrInventorySlotItemToolTip::EquipmentSlotItem' has a wrong offset!");

// Function TslGame.LobbyWidget.GameStateChanging
// 0x0010 (0x0010 - 0x0000)
struct LobbyWidget_GameStateChanging final
{
public:
	struct FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   OldState;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyWidget_GameStateChanging) == 0x000004, "Wrong alignment on LobbyWidget_GameStateChanging");
static_assert(sizeof(LobbyWidget_GameStateChanging) == 0x000010, "Wrong size on LobbyWidget_GameStateChanging");
static_assert(offsetof(LobbyWidget_GameStateChanging, NewState) == 0x000000, "Member 'LobbyWidget_GameStateChanging::NewState' has a wrong offset!");
static_assert(offsetof(LobbyWidget_GameStateChanging, OldState) == 0x000008, "Member 'LobbyWidget_GameStateChanging::OldState' has a wrong offset!");

// Function TslGame.ModeController.HandleServerAdminBlueprint
// 0x0018 (0x0018 - 0x0000)
struct ModeController_HandleServerAdminBlueprint final
{
public:
	class FString                                 AdminCommand;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModeController_HandleServerAdminBlueprint) == 0x000008, "Wrong alignment on ModeController_HandleServerAdminBlueprint");
static_assert(sizeof(ModeController_HandleServerAdminBlueprint) == 0x000018, "Wrong size on ModeController_HandleServerAdminBlueprint");
static_assert(offsetof(ModeController_HandleServerAdminBlueprint, AdminCommand) == 0x000000, "Member 'ModeController_HandleServerAdminBlueprint::AdminCommand' has a wrong offset!");
static_assert(offsetof(ModeController_HandleServerAdminBlueprint, ReturnValue) == 0x000010, "Member 'ModeController_HandleServerAdminBlueprint::ReturnValue' has a wrong offset!");

// Function TslGame.ModeController.SendSystemMessageToAll
// 0x0028 (0x0028 - 0x0000)
struct ModeController_SendSystemMessageToAll final
{
public:
	ESystemMessageType                            MessageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         MessageDuration;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModeController_SendSystemMessageToAll) == 0x000008, "Wrong alignment on ModeController_SendSystemMessageToAll");
static_assert(sizeof(ModeController_SendSystemMessageToAll) == 0x000028, "Wrong size on ModeController_SendSystemMessageToAll");
static_assert(offsetof(ModeController_SendSystemMessageToAll, MessageType) == 0x000000, "Member 'ModeController_SendSystemMessageToAll::MessageType' has a wrong offset!");
static_assert(offsetof(ModeController_SendSystemMessageToAll, Message) == 0x000008, "Member 'ModeController_SendSystemMessageToAll::Message' has a wrong offset!");
static_assert(offsetof(ModeController_SendSystemMessageToAll, MessageDuration) == 0x000020, "Member 'ModeController_SendSystemMessageToAll::MessageDuration' has a wrong offset!");

// Function TslGame.ModeController.CanDealDamage
// 0x0018 (0x0018 - 0x0000)
struct ModeController_CanDealDamage final
{
public:
	const class ATslPlayerState*                  DamageInstigator;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATslPlayerState*                  DamagedPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModeController_CanDealDamage) == 0x000008, "Wrong alignment on ModeController_CanDealDamage");
static_assert(sizeof(ModeController_CanDealDamage) == 0x000018, "Wrong size on ModeController_CanDealDamage");
static_assert(offsetof(ModeController_CanDealDamage, DamageInstigator) == 0x000000, "Member 'ModeController_CanDealDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(ModeController_CanDealDamage, DamagedPlayer) == 0x000008, "Member 'ModeController_CanDealDamage::DamagedPlayer' has a wrong offset!");
static_assert(offsetof(ModeController_CanDealDamage, ReturnValue) == 0x000010, "Member 'ModeController_CanDealDamage::ReturnValue' has a wrong offset!");

// Function TslGame.ModeController.GetGameMode
// 0x0008 (0x0008 - 0x0000)
struct ModeController_GetGameMode final
{
public:
	class ATslGameMode*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModeController_GetGameMode) == 0x000008, "Wrong alignment on ModeController_GetGameMode");
static_assert(sizeof(ModeController_GetGameMode) == 0x000008, "Wrong size on ModeController_GetGameMode");
static_assert(offsetof(ModeController_GetGameMode, ReturnValue) == 0x000000, "Member 'ModeController_GetGameMode::ReturnValue' has a wrong offset!");

// Function TslGame.ModeController.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct ModeController_GetGameState final
{
public:
	class ATslGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModeController_GetGameState) == 0x000008, "Wrong alignment on ModeController_GetGameState");
static_assert(sizeof(ModeController_GetGameState) == 0x000008, "Wrong size on ModeController_GetGameState");
static_assert(offsetof(ModeController_GetGameState, ReturnValue) == 0x000000, "Member 'ModeController_GetGameState::ReturnValue' has a wrong offset!");

// Function TslGame.ModeController.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct ModeController_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModeController_IsPlayInEditor) == 0x000001, "Wrong alignment on ModeController_IsPlayInEditor");
static_assert(sizeof(ModeController_IsPlayInEditor) == 0x000001, "Wrong size on ModeController_IsPlayInEditor");
static_assert(offsetof(ModeController_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'ModeController_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function TslGame.BattleRoyaleModeController.SetNextGasInBlackboard
// 0x0001 (0x0001 - 0x0000)
struct BattleRoyaleModeController_SetNextGasInBlackboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRoyaleModeController_SetNextGasInBlackboard) == 0x000001, "Wrong alignment on BattleRoyaleModeController_SetNextGasInBlackboard");
static_assert(sizeof(BattleRoyaleModeController_SetNextGasInBlackboard) == 0x000001, "Wrong size on BattleRoyaleModeController_SetNextGasInBlackboard");
static_assert(offsetof(BattleRoyaleModeController_SetNextGasInBlackboard, ReturnValue) == 0x000000, "Member 'BattleRoyaleModeController_SetNextGasInBlackboard::ReturnValue' has a wrong offset!");

// Function TslGame.BattleRoyaleModeController.GetMaxPhaseCount
// 0x0004 (0x0004 - 0x0000)
struct BattleRoyaleModeController_GetMaxPhaseCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRoyaleModeController_GetMaxPhaseCount) == 0x000004, "Wrong alignment on BattleRoyaleModeController_GetMaxPhaseCount");
static_assert(sizeof(BattleRoyaleModeController_GetMaxPhaseCount) == 0x000004, "Wrong size on BattleRoyaleModeController_GetMaxPhaseCount");
static_assert(offsetof(BattleRoyaleModeController_GetMaxPhaseCount, ReturnValue) == 0x000000, "Member 'BattleRoyaleModeController_GetMaxPhaseCount::ReturnValue' has a wrong offset!");

// Function TslGame.BattleRoyaleModeController.GetPoisonGasDamagePerSecond
// 0x0004 (0x0004 - 0x0000)
struct BattleRoyaleModeController_GetPoisonGasDamagePerSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRoyaleModeController_GetPoisonGasDamagePerSecond) == 0x000004, "Wrong alignment on BattleRoyaleModeController_GetPoisonGasDamagePerSecond");
static_assert(sizeof(BattleRoyaleModeController_GetPoisonGasDamagePerSecond) == 0x000004, "Wrong size on BattleRoyaleModeController_GetPoisonGasDamagePerSecond");
static_assert(offsetof(BattleRoyaleModeController_GetPoisonGasDamagePerSecond, ReturnValue) == 0x000000, "Member 'BattleRoyaleModeController_GetPoisonGasDamagePerSecond::ReturnValue' has a wrong offset!");

// Function TslGame.CarePackageController.SetNextCarePackageInBlackboard
// 0x0001 (0x0001 - 0x0000)
struct CarePackageController_SetNextCarePackageInBlackboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarePackageController_SetNextCarePackageInBlackboard) == 0x000001, "Wrong alignment on CarePackageController_SetNextCarePackageInBlackboard");
static_assert(sizeof(CarePackageController_SetNextCarePackageInBlackboard) == 0x000001, "Wrong size on CarePackageController_SetNextCarePackageInBlackboard");
static_assert(offsetof(CarePackageController_SetNextCarePackageInBlackboard, ReturnValue) == 0x000000, "Member 'CarePackageController_SetNextCarePackageInBlackboard::ReturnValue' has a wrong offset!");

// Function TslGame.CarePackageController.SpawnAircraftCarePackage
// 0x0010 (0x0010 - 0x0000)
struct CarePackageController_SpawnAircraftCarePackage final
{
public:
	bool                                          CopyIntersectionInfo;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarePackageController_SpawnAircraftCarePackage) == 0x000004, "Wrong alignment on CarePackageController_SpawnAircraftCarePackage");
static_assert(sizeof(CarePackageController_SpawnAircraftCarePackage) == 0x000010, "Wrong size on CarePackageController_SpawnAircraftCarePackage");
static_assert(offsetof(CarePackageController_SpawnAircraftCarePackage, CopyIntersectionInfo) == 0x000000, "Member 'CarePackageController_SpawnAircraftCarePackage::CopyIntersectionInfo' has a wrong offset!");
static_assert(offsetof(CarePackageController_SpawnAircraftCarePackage, ReturnValue) == 0x000004, "Member 'CarePackageController_SpawnAircraftCarePackage::ReturnValue' has a wrong offset!");

// Function TslGame.CarePackageController.GetSpawnInterval
// 0x0004 (0x0004 - 0x0000)
struct CarePackageController_GetSpawnInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarePackageController_GetSpawnInterval) == 0x000004, "Wrong alignment on CarePackageController_GetSpawnInterval");
static_assert(sizeof(CarePackageController_GetSpawnInterval) == 0x000004, "Wrong size on CarePackageController_GetSpawnInterval");
static_assert(offsetof(CarePackageController_GetSpawnInterval, ReturnValue) == 0x000000, "Member 'CarePackageController_GetSpawnInterval::ReturnValue' has a wrong offset!");

// Function TslGame.RedZoneController.SetNextRedZoneInBlackboard
// 0x0001 (0x0001 - 0x0000)
struct RedZoneController_SetNextRedZoneInBlackboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedZoneController_SetNextRedZoneInBlackboard) == 0x000001, "Wrong alignment on RedZoneController_SetNextRedZoneInBlackboard");
static_assert(sizeof(RedZoneController_SetNextRedZoneInBlackboard) == 0x000001, "Wrong size on RedZoneController_SetNextRedZoneInBlackboard");
static_assert(offsetof(RedZoneController_SetNextRedZoneInBlackboard, ReturnValue) == 0x000000, "Member 'RedZoneController_SetNextRedZoneInBlackboard::ReturnValue' has a wrong offset!");

// Function TslGame.RedZoneController.GetRandomBombingInterval
// 0x0004 (0x0004 - 0x0000)
struct RedZoneController_GetRandomBombingInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedZoneController_GetRandomBombingInterval) == 0x000004, "Wrong alignment on RedZoneController_GetRandomBombingInterval");
static_assert(sizeof(RedZoneController_GetRandomBombingInterval) == 0x000004, "Wrong size on RedZoneController_GetRandomBombingInterval");
static_assert(offsetof(RedZoneController_GetRandomBombingInterval, ReturnValue) == 0x000000, "Member 'RedZoneController_GetRandomBombingInterval::ReturnValue' has a wrong offset!");

// Function TslGame.MutableCharacter.GetGender
// 0x0001 (0x0001 - 0x0000)
struct MutableCharacter_GetGender final
{
public:
	EGender                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MutableCharacter_GetGender) == 0x000001, "Wrong alignment on MutableCharacter_GetGender");
static_assert(sizeof(MutableCharacter_GetGender) == 0x000001, "Wrong size on MutableCharacter_GetGender");
static_assert(offsetof(MutableCharacter_GetGender, ReturnValue) == 0x000000, "Member 'MutableCharacter_GetGender::ReturnValue' has a wrong offset!");

// Function TslGame.LobbyCharacter.GetNetId
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharacter_GetNetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharacter_GetNetId) == 0x000008, "Wrong alignment on LobbyCharacter_GetNetId");
static_assert(sizeof(LobbyCharacter_GetNetId) == 0x000010, "Wrong size on LobbyCharacter_GetNetId");
static_assert(offsetof(LobbyCharacter_GetNetId, ReturnValue) == 0x000000, "Member 'LobbyCharacter_GetNetId::ReturnValue' has a wrong offset!");

// Function TslGame.LobbyCharacter.GetNickName
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharacter_GetNickName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharacter_GetNickName) == 0x000008, "Wrong alignment on LobbyCharacter_GetNickName");
static_assert(sizeof(LobbyCharacter_GetNickName) == 0x000010, "Wrong size on LobbyCharacter_GetNickName");
static_assert(offsetof(LobbyCharacter_GetNickName, ReturnValue) == 0x000000, "Member 'LobbyCharacter_GetNickName::ReturnValue' has a wrong offset!");

// Function TslGame.TslVaultingHelper.GetActorAttachScene
// 0x000C (0x000C - 0x0000)
struct TslVaultingHelper_GetActorAttachScene final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVaultingHelper_GetActorAttachScene) == 0x000004, "Wrong alignment on TslVaultingHelper_GetActorAttachScene");
static_assert(sizeof(TslVaultingHelper_GetActorAttachScene) == 0x00000C, "Wrong size on TslVaultingHelper_GetActorAttachScene");
static_assert(offsetof(TslVaultingHelper_GetActorAttachScene, ReturnValue) == 0x000000, "Member 'TslVaultingHelper_GetActorAttachScene::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.CheckMiddlePointCollision
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_CheckMiddlePointCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_CheckMiddlePointCollision) == 0x000001, "Wrong alignment on TslWeapon_Gun_CheckMiddlePointCollision");
static_assert(sizeof(TslWeapon_Gun_CheckMiddlePointCollision) == 0x000001, "Wrong size on TslWeapon_Gun_CheckMiddlePointCollision");
static_assert(offsetof(TslWeapon_Gun_CheckMiddlePointCollision, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_CheckMiddlePointCollision::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.ClientNotifyAmmo
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_ClientNotifyAmmo final
{
public:
	int32                                         InCurrentAmmoInClip;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_ClientNotifyAmmo) == 0x000004, "Wrong alignment on TslWeapon_Gun_ClientNotifyAmmo");
static_assert(sizeof(TslWeapon_Gun_ClientNotifyAmmo) == 0x000004, "Wrong size on TslWeapon_Gun_ClientNotifyAmmo");
static_assert(offsetof(TslWeapon_Gun_ClientNotifyAmmo, InCurrentAmmoInClip) == 0x000000, "Member 'TslWeapon_Gun_ClientNotifyAmmo::InCurrentAmmoInClip' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.ClientSimulateWeaponFire
// 0x0088 (0x0088 - 0x0000)
struct TslWeapon_Gun_ClientSimulateWeaponFire final
{
public:
	struct FHitResult                             ExceptTrajectoryHitResult;                         // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_ClientSimulateWeaponFire) == 0x000008, "Wrong alignment on TslWeapon_Gun_ClientSimulateWeaponFire");
static_assert(sizeof(TslWeapon_Gun_ClientSimulateWeaponFire) == 0x000088, "Wrong size on TslWeapon_Gun_ClientSimulateWeaponFire");
static_assert(offsetof(TslWeapon_Gun_ClientSimulateWeaponFire, ExceptTrajectoryHitResult) == 0x000000, "Member 'TslWeapon_Gun_ClientSimulateWeaponFire::ExceptTrajectoryHitResult' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.OnAnimationNotify
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_OnAnimationNotify final
{
public:
	struct FName                                   NotifyName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_OnAnimationNotify) == 0x000004, "Wrong alignment on TslWeapon_Gun_OnAnimationNotify");
static_assert(sizeof(TslWeapon_Gun_OnAnimationNotify) == 0x000008, "Wrong size on TslWeapon_Gun_OnAnimationNotify");
static_assert(offsetof(TslWeapon_Gun_OnAnimationNotify, NotifyName) == 0x000000, "Member 'TslWeapon_Gun_OnAnimationNotify::NotifyName' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.OnRep_AmmoCount
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_OnRep_AmmoCount final
{
public:
	int32                                         LastCurrentAmmoInClip;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_OnRep_AmmoCount) == 0x000004, "Wrong alignment on TslWeapon_Gun_OnRep_AmmoCount");
static_assert(sizeof(TslWeapon_Gun_OnRep_AmmoCount) == 0x000004, "Wrong size on TslWeapon_Gun_OnRep_AmmoCount");
static_assert(offsetof(TslWeapon_Gun_OnRep_AmmoCount, LastCurrentAmmoInClip) == 0x000000, "Member 'TslWeapon_Gun_OnRep_AmmoCount::LastCurrentAmmoInClip' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.OnRep_TimeBetweenShots
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_OnRep_TimeBetweenShots final
{
public:
	float                                         LastTimeBetweenShots;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_OnRep_TimeBetweenShots) == 0x000004, "Wrong alignment on TslWeapon_Gun_OnRep_TimeBetweenShots");
static_assert(sizeof(TslWeapon_Gun_OnRep_TimeBetweenShots) == 0x000004, "Wrong size on TslWeapon_Gun_OnRep_TimeBetweenShots");
static_assert(offsetof(TslWeapon_Gun_OnRep_TimeBetweenShots, LastTimeBetweenShots) == 0x000000, "Member 'TslWeapon_Gun_OnRep_TimeBetweenShots::LastTimeBetweenShots' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.ServerHandleFiring
// 0x0088 (0x0088 - 0x0000)
struct TslWeapon_Gun_ServerHandleFiring final
{
public:
	struct FHitResult                             ExceptTrajectoryHitResult;                         // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_ServerHandleFiring) == 0x000008, "Wrong alignment on TslWeapon_Gun_ServerHandleFiring");
static_assert(sizeof(TslWeapon_Gun_ServerHandleFiring) == 0x000088, "Wrong size on TslWeapon_Gun_ServerHandleFiring");
static_assert(offsetof(TslWeapon_Gun_ServerHandleFiring, ExceptTrajectoryHitResult) == 0x000000, "Member 'TslWeapon_Gun_ServerHandleFiring::ExceptTrajectoryHitResult' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.ServerSetHip
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_ServerSetHip final
{
public:
	bool                                          bNewIsHipped;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_ServerSetHip) == 0x000001, "Wrong alignment on TslWeapon_Gun_ServerSetHip");
static_assert(sizeof(TslWeapon_Gun_ServerSetHip) == 0x000001, "Wrong size on TslWeapon_Gun_ServerSetHip");
static_assert(offsetof(TslWeapon_Gun_ServerSetHip, bNewIsHipped) == 0x000000, "Member 'TslWeapon_Gun_ServerSetHip::bNewIsHipped' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.SetFiringMode
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_SetFiringMode final
{
public:
	EFiringMode                                   FiringMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_SetFiringMode) == 0x000001, "Wrong alignment on TslWeapon_Gun_SetFiringMode");
static_assert(sizeof(TslWeapon_Gun_SetFiringMode) == 0x000001, "Wrong size on TslWeapon_Gun_SetFiringMode");
static_assert(offsetof(TslWeapon_Gun_SetFiringMode, FiringMode) == 0x000000, "Member 'TslWeapon_Gun_SetFiringMode::FiringMode' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.SetSpawnBulletFromBarrel
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_SetSpawnBulletFromBarrel final
{
public:
	bool                                          DoSpawnBulletFromBarrel;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_SetSpawnBulletFromBarrel) == 0x000001, "Wrong alignment on TslWeapon_Gun_SetSpawnBulletFromBarrel");
static_assert(sizeof(TslWeapon_Gun_SetSpawnBulletFromBarrel) == 0x000001, "Wrong size on TslWeapon_Gun_SetSpawnBulletFromBarrel");
static_assert(offsetof(TslWeapon_Gun_SetSpawnBulletFromBarrel, DoSpawnBulletFromBarrel) == 0x000000, "Member 'TslWeapon_Gun_SetSpawnBulletFromBarrel::DoSpawnBulletFromBarrel' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.SetWeaponReloadInterrupted
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_SetWeaponReloadInterrupted final
{
public:
	bool                                          bIsInterrupted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_SetWeaponReloadInterrupted) == 0x000001, "Wrong alignment on TslWeapon_Gun_SetWeaponReloadInterrupted");
static_assert(sizeof(TslWeapon_Gun_SetWeaponReloadInterrupted) == 0x000001, "Wrong size on TslWeapon_Gun_SetWeaponReloadInterrupted");
static_assert(offsetof(TslWeapon_Gun_SetWeaponReloadInterrupted, bIsInterrupted) == 0x000000, "Member 'TslWeapon_Gun_SetWeaponReloadInterrupted::bIsInterrupted' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.SimulateWeaponReload
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_SimulateWeaponReload final
{
public:
	EWeaponReloadAnimExec                         ReloadAnimExec;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_SimulateWeaponReload) == 0x000001, "Wrong alignment on TslWeapon_Gun_SimulateWeaponReload");
static_assert(sizeof(TslWeapon_Gun_SimulateWeaponReload) == 0x000001, "Wrong size on TslWeapon_Gun_SimulateWeaponReload");
static_assert(offsetof(TslWeapon_Gun_SimulateWeaponReload, ReloadAnimExec) == 0x000000, "Member 'TslWeapon_Gun_SimulateWeaponReload::ReloadAnimExec' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetADSRecoilKick
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetADSRecoilKick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetADSRecoilKick) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetADSRecoilKick");
static_assert(sizeof(TslWeapon_Gun_GetADSRecoilKick) == 0x000004, "Wrong size on TslWeapon_Gun_GetADSRecoilKick");
static_assert(offsetof(TslWeapon_Gun_GetADSRecoilKick, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetADSRecoilKick::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetAmmoItemClass
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetAmmoItemClass final
{
public:
	TSubclassOf<class UAmmoItem>                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetAmmoItemClass) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetAmmoItemClass");
static_assert(sizeof(TslWeapon_Gun_GetAmmoItemClass) == 0x000008, "Wrong size on TslWeapon_Gun_GetAmmoItemClass");
static_assert(offsetof(TslWeapon_Gun_GetAmmoItemClass, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetAmmoItemClass::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetAmmoPerClip
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetAmmoPerClip final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetAmmoPerClip) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetAmmoPerClip");
static_assert(sizeof(TslWeapon_Gun_GetAmmoPerClip) == 0x000004, "Wrong size on TslWeapon_Gun_GetAmmoPerClip");
static_assert(offsetof(TslWeapon_Gun_GetAmmoPerClip, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetAmmoPerClip::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterChargeReloadFromAttach
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterChargeReloadFromAttach final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterChargeReloadFromAttach) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterChargeReloadFromAttach");
static_assert(sizeof(TslWeapon_Gun_GetCharacterChargeReloadFromAttach) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterChargeReloadFromAttach");
static_assert(offsetof(TslWeapon_Gun_GetCharacterChargeReloadFromAttach, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterChargeReloadFromAttach::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterFireCycle
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterFireCycle final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterFireCycle) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterFireCycle");
static_assert(sizeof(TslWeapon_Gun_GetCharacterFireCycle) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterFireCycle");
static_assert(offsetof(TslWeapon_Gun_GetCharacterFireCycle, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterFireCycle::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterFireMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterFireMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterFireMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterFireMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterFireMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterFireMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterFireMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterFireMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterFireSelectorMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterFireSelectorMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterFireSelectorMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterFireSelectorMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterFireSelectorMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterFireSelectorMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterFireSelectorMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterFireSelectorMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterGripBlendspace
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterGripBlendspace final
{
public:
	class UBlendSpace1D*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterGripBlendspace) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterGripBlendspace");
static_assert(sizeof(TslWeapon_Gun_GetCharacterGripBlendspace) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterGripBlendspace");
static_assert(offsetof(TslWeapon_Gun_GetCharacterGripBlendspace, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterGripBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterLHGripBlendspace
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterLHGripBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterLHGripBlendspace) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterLHGripBlendspace");
static_assert(sizeof(TslWeapon_Gun_GetCharacterLHGripBlendspace) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterLHGripBlendspace");
static_assert(offsetof(TslWeapon_Gun_GetCharacterLHGripBlendspace, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterLHGripBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterReloadByOneSingleMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterReloadByOneSingleMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterReloadByOneSingleMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterReloadByOneSingleMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterReloadByOneSingleMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterReloadByOneSingleMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterReloadByOneSingleMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterReloadByOneSingleMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterReloadByOneStartMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterReloadByOneStartMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterReloadByOneStartMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterReloadByOneStartMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterReloadByOneStartMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterReloadByOneStartMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterReloadByOneStartMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterReloadByOneStartMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterReloadByOneStopMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterReloadByOneStopMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterReloadByOneStopMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterReloadByOneStopMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterReloadByOneStopMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterReloadByOneStopMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterReloadByOneStopMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterReloadByOneStopMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterReloadChargeMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterReloadChargeMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterReloadChargeMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterReloadChargeMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterReloadChargeMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterReloadChargeMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterReloadChargeMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterReloadChargeMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterReloadTacticalMontage
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterReloadTacticalMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterReloadTacticalMontage) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterReloadTacticalMontage");
static_assert(sizeof(TslWeapon_Gun_GetCharacterReloadTacticalMontage) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterReloadTacticalMontage");
static_assert(offsetof(TslWeapon_Gun_GetCharacterReloadTacticalMontage, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterReloadTacticalMontage::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCharacterTacticalReloadFromAttach
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetCharacterTacticalReloadFromAttach final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCharacterTacticalReloadFromAttach) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetCharacterTacticalReloadFromAttach");
static_assert(sizeof(TslWeapon_Gun_GetCharacterTacticalReloadFromAttach) == 0x000008, "Wrong size on TslWeapon_Gun_GetCharacterTacticalReloadFromAttach");
static_assert(offsetof(TslWeapon_Gun_GetCharacterTacticalReloadFromAttach, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCharacterTacticalReloadFromAttach::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetCurrentAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCurrentAmmo) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetCurrentAmmo");
static_assert(sizeof(TslWeapon_Gun_GetCurrentAmmo) == 0x000004, "Wrong size on TslWeapon_Gun_GetCurrentAmmo");
static_assert(offsetof(TslWeapon_Gun_GetCurrentAmmo, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCurrentAmmo::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCurrentAmmoInClip
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetCurrentAmmoInClip final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCurrentAmmoInClip) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetCurrentAmmoInClip");
static_assert(sizeof(TslWeapon_Gun_GetCurrentAmmoInClip) == 0x000004, "Wrong size on TslWeapon_Gun_GetCurrentAmmoInClip");
static_assert(offsetof(TslWeapon_Gun_GetCurrentAmmoInClip, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCurrentAmmoInClip::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCurrentAmmoInInventory
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetCurrentAmmoInInventory final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCurrentAmmoInInventory) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetCurrentAmmoInInventory");
static_assert(sizeof(TslWeapon_Gun_GetCurrentAmmoInInventory) == 0x000004, "Wrong size on TslWeapon_Gun_GetCurrentAmmoInInventory");
static_assert(offsetof(TslWeapon_Gun_GetCurrentAmmoInInventory, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCurrentAmmoInInventory::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetCurrentDeviation
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetCurrentDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetCurrentDeviation) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetCurrentDeviation");
static_assert(sizeof(TslWeapon_Gun_GetCurrentDeviation) == 0x000004, "Wrong size on TslWeapon_Gun_GetCurrentDeviation");
static_assert(offsetof(TslWeapon_Gun_GetCurrentDeviation, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetCurrentDeviation::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetDefaultAmmoObject
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetDefaultAmmoObject final
{
public:
	class UAmmoItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetDefaultAmmoObject) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetDefaultAmmoObject");
static_assert(sizeof(TslWeapon_Gun_GetDefaultAmmoObject) == 0x000008, "Wrong size on TslWeapon_Gun_GetDefaultAmmoObject");
static_assert(offsetof(TslWeapon_Gun_GetDefaultAmmoObject, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetDefaultAmmoObject::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetFiringMode
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_GetFiringMode final
{
public:
	EFiringMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetFiringMode) == 0x000001, "Wrong alignment on TslWeapon_Gun_GetFiringMode");
static_assert(sizeof(TslWeapon_Gun_GetFiringMode) == 0x000001, "Wrong size on TslWeapon_Gun_GetFiringMode");
static_assert(offsetof(TslWeapon_Gun_GetFiringMode, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetFiringMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetGripTypeIndex
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetGripTypeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetGripTypeIndex) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetGripTypeIndex");
static_assert(sizeof(TslWeapon_Gun_GetGripTypeIndex) == 0x000004, "Wrong size on TslWeapon_Gun_GetGripTypeIndex");
static_assert(offsetof(TslWeapon_Gun_GetGripTypeIndex, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetGripTypeIndex::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMagDropAngularVelocity
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Gun_GetMagDropAngularVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMagDropAngularVelocity) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMagDropAngularVelocity");
static_assert(sizeof(TslWeapon_Gun_GetMagDropAngularVelocity) == 0x00000C, "Wrong size on TslWeapon_Gun_GetMagDropAngularVelocity");
static_assert(offsetof(TslWeapon_Gun_GetMagDropAngularVelocity, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMagDropAngularVelocity::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMagDropLinearVelocity
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Gun_GetMagDropLinearVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMagDropLinearVelocity) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMagDropLinearVelocity");
static_assert(sizeof(TslWeapon_Gun_GetMagDropLinearVelocity) == 0x00000C, "Wrong size on TslWeapon_Gun_GetMagDropLinearVelocity");
static_assert(offsetof(TslWeapon_Gun_GetMagDropLinearVelocity, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMagDropLinearVelocity::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMagOutDuration
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetMagOutDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMagOutDuration) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMagOutDuration");
static_assert(sizeof(TslWeapon_Gun_GetMagOutDuration) == 0x000004, "Wrong size on TslWeapon_Gun_GetMagOutDuration");
static_assert(offsetof(TslWeapon_Gun_GetMagOutDuration, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMagOutDuration::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetMaxAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMaxAmmo) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMaxAmmo");
static_assert(sizeof(TslWeapon_Gun_GetMaxAmmo) == 0x000004, "Wrong size on TslWeapon_Gun_GetMaxAmmo");
static_assert(offsetof(TslWeapon_Gun_GetMaxAmmo, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMaxAmmo::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMovementModifierAim
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetMovementModifierAim final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMovementModifierAim) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMovementModifierAim");
static_assert(sizeof(TslWeapon_Gun_GetMovementModifierAim) == 0x000004, "Wrong size on TslWeapon_Gun_GetMovementModifierAim");
static_assert(offsetof(TslWeapon_Gun_GetMovementModifierAim, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMovementModifierAim::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetMovementModifierScope
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetMovementModifierScope final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetMovementModifierScope) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetMovementModifierScope");
static_assert(sizeof(TslWeapon_Gun_GetMovementModifierScope) == 0x000004, "Wrong size on TslWeapon_Gun_GetMovementModifierScope");
static_assert(offsetof(TslWeapon_Gun_GetMovementModifierScope, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetMovementModifierScope::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetNumOfFiringMode
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetNumOfFiringMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetNumOfFiringMode) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetNumOfFiringMode");
static_assert(sizeof(TslWeapon_Gun_GetNumOfFiringMode) == 0x000004, "Wrong size on TslWeapon_Gun_GetNumOfFiringMode");
static_assert(offsetof(TslWeapon_Gun_GetNumOfFiringMode, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetNumOfFiringMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetRecoilADSSocketOffsetScale
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Gun_GetRecoilADSSocketOffsetScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetRecoilADSSocketOffsetScale) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetRecoilADSSocketOffsetScale");
static_assert(sizeof(TslWeapon_Gun_GetRecoilADSSocketOffsetScale) == 0x00000C, "Wrong size on TslWeapon_Gun_GetRecoilADSSocketOffsetScale");
static_assert(offsetof(TslWeapon_Gun_GetRecoilADSSocketOffsetScale, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetRecoilADSSocketOffsetScale::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetReloadAnimationPlayRate
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetReloadAnimationPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetReloadAnimationPlayRate) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetReloadAnimationPlayRate");
static_assert(sizeof(TslWeapon_Gun_GetReloadAnimationPlayRate) == 0x000004, "Wrong size on TslWeapon_Gun_GetReloadAnimationPlayRate");
static_assert(offsetof(TslWeapon_Gun_GetReloadAnimationPlayRate, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetReloadAnimationPlayRate::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponChargeReload
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetWeaponChargeReload final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponChargeReload) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetWeaponChargeReload");
static_assert(sizeof(TslWeapon_Gun_GetWeaponChargeReload) == 0x000008, "Wrong size on TslWeapon_Gun_GetWeaponChargeReload");
static_assert(offsetof(TslWeapon_Gun_GetWeaponChargeReload, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponChargeReload::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponCurrentDeviationValue
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetWeaponCurrentDeviationValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponCurrentDeviationValue) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponCurrentDeviationValue");
static_assert(sizeof(TslWeapon_Gun_GetWeaponCurrentDeviationValue) == 0x000004, "Wrong size on TslWeapon_Gun_GetWeaponCurrentDeviationValue");
static_assert(offsetof(TslWeapon_Gun_GetWeaponCurrentDeviationValue, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponCurrentDeviationValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponCurrentRecoilValue
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetWeaponCurrentRecoilValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponCurrentRecoilValue) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponCurrentRecoilValue");
static_assert(sizeof(TslWeapon_Gun_GetWeaponCurrentRecoilValue) == 0x000004, "Wrong size on TslWeapon_Gun_GetWeaponCurrentRecoilValue");
static_assert(offsetof(TslWeapon_Gun_GetWeaponCurrentRecoilValue, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponCurrentRecoilValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponFullRealoadTimeWithAttachments
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments");
static_assert(sizeof(TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments) == 0x000004, "Wrong size on TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments");
static_assert(offsetof(TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponFullRealoadTimeWithAttachments::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponFullReloadTime
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Gun_GetWeaponFullReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponFullReloadTime) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponFullReloadTime");
static_assert(sizeof(TslWeapon_Gun_GetWeaponFullReloadTime) == 0x000004, "Wrong size on TslWeapon_Gun_GetWeaponFullReloadTime");
static_assert(offsetof(TslWeapon_Gun_GetWeaponFullReloadTime, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponFullReloadTime::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponGunAnimConfig
// 0x00F0 (0x00F0 - 0x0000)
struct TslWeapon_Gun_GetWeaponGunAnimConfig final
{
public:
	struct FWeaponGunAnim                         ReturnValue;                                       // 0x0000(0x00F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponGunAnimConfig) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetWeaponGunAnimConfig");
static_assert(sizeof(TslWeapon_Gun_GetWeaponGunAnimConfig) == 0x0000F0, "Wrong size on TslWeapon_Gun_GetWeaponGunAnimConfig");
static_assert(offsetof(TslWeapon_Gun_GetWeaponGunAnimConfig, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponGunAnimConfig::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponGunConfig
// 0x0090 (0x0090 - 0x0000)
struct TslWeapon_Gun_GetWeaponGunConfig final
{
public:
	struct FWeaponGunData                         ReturnValue;                                       // 0x0000(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponGunConfig) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetWeaponGunConfig");
static_assert(sizeof(TslWeapon_Gun_GetWeaponGunConfig) == 0x000090, "Wrong size on TslWeapon_Gun_GetWeaponGunConfig");
static_assert(offsetof(TslWeapon_Gun_GetWeaponGunConfig, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponGunConfig::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponHandOffset
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Gun_GetWeaponHandOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponHandOffset) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponHandOffset");
static_assert(sizeof(TslWeapon_Gun_GetWeaponHandOffset) == 0x00000C, "Wrong size on TslWeapon_Gun_GetWeaponHandOffset");
static_assert(offsetof(TslWeapon_Gun_GetWeaponHandOffset, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponHandOffset::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponHandOffsetFPP
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Gun_GetWeaponHandOffsetFPP final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponHandOffsetFPP) == 0x000004, "Wrong alignment on TslWeapon_Gun_GetWeaponHandOffsetFPP");
static_assert(sizeof(TslWeapon_Gun_GetWeaponHandOffsetFPP) == 0x00000C, "Wrong size on TslWeapon_Gun_GetWeaponHandOffsetFPP");
static_assert(offsetof(TslWeapon_Gun_GetWeaponHandOffsetFPP, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponHandOffsetFPP::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.GetWeaponTacticalReload
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Gun_GetWeaponTacticalReload final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_GetWeaponTacticalReload) == 0x000008, "Wrong alignment on TslWeapon_Gun_GetWeaponTacticalReload");
static_assert(sizeof(TslWeapon_Gun_GetWeaponTacticalReload) == 0x000008, "Wrong size on TslWeapon_Gun_GetWeaponTacticalReload");
static_assert(offsetof(TslWeapon_Gun_GetWeaponTacticalReload, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_GetWeaponTacticalReload::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_IsReloading) == 0x000001, "Wrong alignment on TslWeapon_Gun_IsReloading");
static_assert(sizeof(TslWeapon_Gun_IsReloading) == 0x000001, "Wrong size on TslWeapon_Gun_IsReloading");
static_assert(offsetof(TslWeapon_Gun_IsReloading, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_IsReloading::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.IsReloadInterrupted
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_IsReloadInterrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_IsReloadInterrupted) == 0x000001, "Wrong alignment on TslWeapon_Gun_IsReloadInterrupted");
static_assert(sizeof(TslWeapon_Gun_IsReloadInterrupted) == 0x000001, "Wrong size on TslWeapon_Gun_IsReloadInterrupted");
static_assert(offsetof(TslWeapon_Gun_IsReloadInterrupted, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_IsReloadInterrupted::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.IsWeaponCycleInProgress
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_IsWeaponCycleInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_IsWeaponCycleInProgress) == 0x000001, "Wrong alignment on TslWeapon_Gun_IsWeaponCycleInProgress");
static_assert(sizeof(TslWeapon_Gun_IsWeaponCycleInProgress) == 0x000001, "Wrong size on TslWeapon_Gun_IsWeaponCycleInProgress");
static_assert(offsetof(TslWeapon_Gun_IsWeaponCycleInProgress, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_IsWeaponCycleInProgress::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Gun.WeaponCycleDone
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Gun_WeaponCycleDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Gun_WeaponCycleDone) == 0x000001, "Wrong alignment on TslWeapon_Gun_WeaponCycleDone");
static_assert(sizeof(TslWeapon_Gun_WeaponCycleDone) == 0x000001, "Wrong size on TslWeapon_Gun_WeaponCycleDone");
static_assert(offsetof(TslWeapon_Gun_WeaponCycleDone, ReturnValue) == 0x000000, "Member 'TslWeapon_Gun_WeaponCycleDone::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.ClientForceRemoveWeapon
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_ClientForceRemoveWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_ClientForceRemoveWeapon) == 0x000004, "Wrong alignment on WeaponProcessor_ClientForceRemoveWeapon");
static_assert(sizeof(WeaponProcessor_ClientForceRemoveWeapon) == 0x000004, "Wrong size on WeaponProcessor_ClientForceRemoveWeapon");
static_assert(offsetof(WeaponProcessor_ClientForceRemoveWeapon, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_ClientForceRemoveWeapon::WeaponIndex' has a wrong offset!");

// Function TslGame.WeaponProcessor.ClientInitByReconnection
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_ClientInitByReconnection final
{
public:
	int32                                         InitWeaponIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_ClientInitByReconnection) == 0x000004, "Wrong alignment on WeaponProcessor_ClientInitByReconnection");
static_assert(sizeof(WeaponProcessor_ClientInitByReconnection) == 0x000004, "Wrong size on WeaponProcessor_ClientInitByReconnection");
static_assert(offsetof(WeaponProcessor_ClientInitByReconnection, InitWeaponIndex) == 0x000000, "Member 'WeaponProcessor_ClientInitByReconnection::InitWeaponIndex' has a wrong offset!");

// Function TslGame.WeaponProcessor.ClientSetWeaponIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_ClientSetWeaponIndex final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_ClientSetWeaponIndex) == 0x000004, "Wrong alignment on WeaponProcessor_ClientSetWeaponIndex");
static_assert(sizeof(WeaponProcessor_ClientSetWeaponIndex) == 0x000004, "Wrong size on WeaponProcessor_ClientSetWeaponIndex");
static_assert(offsetof(WeaponProcessor_ClientSetWeaponIndex, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_ClientSetWeaponIndex::WeaponIndex' has a wrong offset!");

// Function TslGame.WeaponProcessor.FindWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponProcessor_FindWeapon final
{
public:
	TSubclassOf<class ATslWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_FindWeapon) == 0x000008, "Wrong alignment on WeaponProcessor_FindWeapon");
static_assert(sizeof(WeaponProcessor_FindWeapon) == 0x000010, "Wrong size on WeaponProcessor_FindWeapon");
static_assert(offsetof(WeaponProcessor_FindWeapon, WeaponClass) == 0x000000, "Member 'WeaponProcessor_FindWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponProcessor_FindWeapon, ReturnValue) == 0x000008, "Member 'WeaponProcessor_FindWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.OnRep_CurrentWeaponIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_OnRep_CurrentWeaponIndex final
{
public:
	int32                                         LastWeaponIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_OnRep_CurrentWeaponIndex) == 0x000004, "Wrong alignment on WeaponProcessor_OnRep_CurrentWeaponIndex");
static_assert(sizeof(WeaponProcessor_OnRep_CurrentWeaponIndex) == 0x000004, "Wrong size on WeaponProcessor_OnRep_CurrentWeaponIndex");
static_assert(offsetof(WeaponProcessor_OnRep_CurrentWeaponIndex, LastWeaponIndex) == 0x000000, "Member 'WeaponProcessor_OnRep_CurrentWeaponIndex::LastWeaponIndex' has a wrong offset!");

// Function TslGame.WeaponProcessor.OnRep_EquippedWeapons
// 0x0010 (0x0010 - 0x0000)
struct WeaponProcessor_OnRep_EquippedWeapons final
{
public:
	TArray<class ATslWeapon*>                     LastEquippedWeapons;                               // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_OnRep_EquippedWeapons) == 0x000008, "Wrong alignment on WeaponProcessor_OnRep_EquippedWeapons");
static_assert(sizeof(WeaponProcessor_OnRep_EquippedWeapons) == 0x000010, "Wrong size on WeaponProcessor_OnRep_EquippedWeapons");
static_assert(offsetof(WeaponProcessor_OnRep_EquippedWeapons, LastEquippedWeapons) == 0x000000, "Member 'WeaponProcessor_OnRep_EquippedWeapons::LastEquippedWeapons' has a wrong offset!");

// Function TslGame.WeaponProcessor.ServerArmWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_ServerArmWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedAnimation;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponProcessor_ServerArmWeapon) == 0x000004, "Wrong alignment on WeaponProcessor_ServerArmWeapon");
static_assert(sizeof(WeaponProcessor_ServerArmWeapon) == 0x000008, "Wrong size on WeaponProcessor_ServerArmWeapon");
static_assert(offsetof(WeaponProcessor_ServerArmWeapon, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_ServerArmWeapon::WeaponIndex' has a wrong offset!");
static_assert(offsetof(WeaponProcessor_ServerArmWeapon, bNeedAnimation) == 0x000004, "Member 'WeaponProcessor_ServerArmWeapon::bNeedAnimation' has a wrong offset!");

// Function TslGame.WeaponProcessor.SimulateArmWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_SimulateArmWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedAnimation;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponProcessor_SimulateArmWeapon) == 0x000004, "Wrong alignment on WeaponProcessor_SimulateArmWeapon");
static_assert(sizeof(WeaponProcessor_SimulateArmWeapon) == 0x000008, "Wrong size on WeaponProcessor_SimulateArmWeapon");
static_assert(offsetof(WeaponProcessor_SimulateArmWeapon, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_SimulateArmWeapon::WeaponIndex' has a wrong offset!");
static_assert(offsetof(WeaponProcessor_SimulateArmWeapon, bNeedAnimation) == 0x000004, "Member 'WeaponProcessor_SimulateArmWeapon::bNeedAnimation' has a wrong offset!");

// Function TslGame.WeaponProcessor.SimulateUnArmWeapon
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_SimulateUnArmWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_SimulateUnArmWeapon) == 0x000004, "Wrong alignment on WeaponProcessor_SimulateUnArmWeapon");
static_assert(sizeof(WeaponProcessor_SimulateUnArmWeapon) == 0x000004, "Wrong size on WeaponProcessor_SimulateUnArmWeapon");
static_assert(offsetof(WeaponProcessor_SimulateUnArmWeapon, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_SimulateUnArmWeapon::WeaponIndex' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_GetCurrentWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetCurrentWeapon) == 0x000008, "Wrong alignment on WeaponProcessor_GetCurrentWeapon");
static_assert(sizeof(WeaponProcessor_GetCurrentWeapon) == 0x000008, "Wrong size on WeaponProcessor_GetCurrentWeapon");
static_assert(offsetof(WeaponProcessor_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetUnarmedWeaponIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_GetUnarmedWeaponIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetUnarmedWeaponIndex) == 0x000004, "Wrong alignment on WeaponProcessor_GetUnarmedWeaponIndex");
static_assert(sizeof(WeaponProcessor_GetUnarmedWeaponIndex) == 0x000004, "Wrong size on WeaponProcessor_GetUnarmedWeaponIndex");
static_assert(offsetof(WeaponProcessor_GetUnarmedWeaponIndex, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetUnarmedWeaponIndex::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_GetWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetWeapon) == 0x000008, "Wrong alignment on WeaponProcessor_GetWeapon");
static_assert(sizeof(WeaponProcessor_GetWeapon) == 0x000008, "Wrong size on WeaponProcessor_GetWeapon");
static_assert(offsetof(WeaponProcessor_GetWeapon, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetWeaponByIndex
// 0x0010 (0x0010 - 0x0000)
struct WeaponProcessor_GetWeaponByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetWeaponByIndex) == 0x000008, "Wrong alignment on WeaponProcessor_GetWeaponByIndex");
static_assert(sizeof(WeaponProcessor_GetWeaponByIndex) == 0x000010, "Wrong size on WeaponProcessor_GetWeaponByIndex");
static_assert(offsetof(WeaponProcessor_GetWeaponByIndex, Index_0) == 0x000000, "Member 'WeaponProcessor_GetWeaponByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(WeaponProcessor_GetWeaponByIndex, ReturnValue) == 0x000008, "Member 'WeaponProcessor_GetWeaponByIndex::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetWeaponGun
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_GetWeaponGun final
{
public:
	class ATslWeapon_Gun*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetWeaponGun) == 0x000008, "Wrong alignment on WeaponProcessor_GetWeaponGun");
static_assert(sizeof(WeaponProcessor_GetWeaponGun) == 0x000008, "Wrong size on WeaponProcessor_GetWeaponGun");
static_assert(offsetof(WeaponProcessor_GetWeaponGun, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetWeaponGun::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetWeaponIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponProcessor_GetWeaponIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetWeaponIndex) == 0x000004, "Wrong alignment on WeaponProcessor_GetWeaponIndex");
static_assert(sizeof(WeaponProcessor_GetWeaponIndex) == 0x000004, "Wrong size on WeaponProcessor_GetWeaponIndex");
static_assert(offsetof(WeaponProcessor_GetWeaponIndex, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetWeaponIndex::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.GetWeaponThrowable
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_GetWeaponThrowable final
{
public:
	class ATslWeapon_Throwable*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_GetWeaponThrowable) == 0x000008, "Wrong alignment on WeaponProcessor_GetWeaponThrowable");
static_assert(sizeof(WeaponProcessor_GetWeaponThrowable) == 0x000008, "Wrong size on WeaponProcessor_GetWeaponThrowable");
static_assert(offsetof(WeaponProcessor_GetWeaponThrowable, ReturnValue) == 0x000000, "Member 'WeaponProcessor_GetWeaponThrowable::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.IsUnarmed
// 0x0001 (0x0001 - 0x0000)
struct WeaponProcessor_IsUnarmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponProcessor_IsUnarmed) == 0x000001, "Wrong alignment on WeaponProcessor_IsUnarmed");
static_assert(sizeof(WeaponProcessor_IsUnarmed) == 0x000001, "Wrong size on WeaponProcessor_IsUnarmed");
static_assert(offsetof(WeaponProcessor_IsUnarmed, ReturnValue) == 0x000000, "Member 'WeaponProcessor_IsUnarmed::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponProcessor.IsUnarmedWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponProcessor_IsUnarmedWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponProcessor_IsUnarmedWeapon) == 0x000004, "Wrong alignment on WeaponProcessor_IsUnarmedWeapon");
static_assert(sizeof(WeaponProcessor_IsUnarmedWeapon) == 0x000008, "Wrong size on WeaponProcessor_IsUnarmedWeapon");
static_assert(offsetof(WeaponProcessor_IsUnarmedWeapon, WeaponIndex) == 0x000000, "Member 'WeaponProcessor_IsUnarmedWeapon::WeaponIndex' has a wrong offset!");
static_assert(offsetof(WeaponProcessor_IsUnarmedWeapon, ReturnValue) == 0x000004, "Member 'WeaponProcessor_IsUnarmedWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.VaultingData.GetAnimationCurve
// 0x0008 (0x0008 - 0x0000)
struct VaultingData_GetAnimationCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultingData_GetAnimationCurve) == 0x000008, "Wrong alignment on VaultingData_GetAnimationCurve");
static_assert(sizeof(VaultingData_GetAnimationCurve) == 0x000008, "Wrong size on VaultingData_GetAnimationCurve");
static_assert(offsetof(VaultingData_GetAnimationCurve, ReturnValue) == 0x000000, "Member 'VaultingData_GetAnimationCurve::ReturnValue' has a wrong offset!");

// Function TslGame.VaultingData.GetAnimationLength
// 0x0004 (0x0004 - 0x0000)
struct VaultingData_GetAnimationLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultingData_GetAnimationLength) == 0x000004, "Wrong alignment on VaultingData_GetAnimationLength");
static_assert(sizeof(VaultingData_GetAnimationLength) == 0x000004, "Wrong size on VaultingData_GetAnimationLength");
static_assert(offsetof(VaultingData_GetAnimationLength, ReturnValue) == 0x000000, "Member 'VaultingData_GetAnimationLength::ReturnValue' has a wrong offset!");

// Function TslGame.VaultingData.GetBlendSpeedByDistance
// 0x0008 (0x0008 - 0x0000)
struct VaultingData_GetBlendSpeedByDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultingData_GetBlendSpeedByDistance) == 0x000004, "Wrong alignment on VaultingData_GetBlendSpeedByDistance");
static_assert(sizeof(VaultingData_GetBlendSpeedByDistance) == 0x000008, "Wrong size on VaultingData_GetBlendSpeedByDistance");
static_assert(offsetof(VaultingData_GetBlendSpeedByDistance, InDistance) == 0x000000, "Member 'VaultingData_GetBlendSpeedByDistance::InDistance' has a wrong offset!");
static_assert(offsetof(VaultingData_GetBlendSpeedByDistance, ReturnValue) == 0x000004, "Member 'VaultingData_GetBlendSpeedByDistance::ReturnValue' has a wrong offset!");

// Function TslGame.VaultingData.GetVaultAnimation
// 0x0008 (0x0008 - 0x0000)
struct VaultingData_GetVaultAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultingData_GetVaultAnimation) == 0x000008, "Wrong alignment on VaultingData_GetVaultAnimation");
static_assert(sizeof(VaultingData_GetVaultAnimation) == 0x000008, "Wrong size on VaultingData_GetVaultAnimation");
static_assert(offsetof(VaultingData_GetVaultAnimation, ReturnValue) == 0x000000, "Member 'VaultingData_GetVaultAnimation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.AddBuffMoveSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_AddBuffMoveSpeedFactor final
{
public:
	float                                         MoveSpeedFactor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_AddBuffMoveSpeedFactor) == 0x000004, "Wrong alignment on TslCharacter_AddBuffMoveSpeedFactor");
static_assert(sizeof(TslCharacter_AddBuffMoveSpeedFactor) == 0x000004, "Wrong size on TslCharacter_AddBuffMoveSpeedFactor");
static_assert(offsetof(TslCharacter_AddBuffMoveSpeedFactor, MoveSpeedFactor) == 0x000000, "Member 'TslCharacter_AddBuffMoveSpeedFactor::MoveSpeedFactor' has a wrong offset!");

// Function TslGame.TslCharacter.AllowInteract
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_AllowInteract final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_AllowInteract) == 0x000008, "Wrong alignment on TslCharacter_AllowInteract");
static_assert(sizeof(TslCharacter_AllowInteract) == 0x000010, "Wrong size on TslCharacter_AllowInteract");
static_assert(offsetof(TslCharacter_AllowInteract, OtherCharacter) == 0x000000, "Member 'TslCharacter_AllowInteract::OtherCharacter' has a wrong offset!");
static_assert(offsetof(TslCharacter_AllowInteract, ReturnValue) == 0x000008, "Member 'TslCharacter_AllowInteract::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.Anim_MagazineHandAttach
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Anim_MagazineHandAttach final
{
public:
	bool                                          bAttach;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Anim_MagazineHandAttach) == 0x000001, "Wrong alignment on TslCharacter_Anim_MagazineHandAttach");
static_assert(sizeof(TslCharacter_Anim_MagazineHandAttach) == 0x000001, "Wrong size on TslCharacter_Anim_MagazineHandAttach");
static_assert(offsetof(TslCharacter_Anim_MagazineHandAttach, bAttach) == 0x000000, "Member 'TslCharacter_Anim_MagazineHandAttach::bAttach' has a wrong offset!");

// Function TslGame.TslCharacter.Anim_MagazineShow
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Anim_MagazineShow final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Anim_MagazineShow) == 0x000001, "Wrong alignment on TslCharacter_Anim_MagazineShow");
static_assert(sizeof(TslCharacter_Anim_MagazineShow) == 0x000001, "Wrong size on TslCharacter_Anim_MagazineShow");
static_assert(offsetof(TslCharacter_Anim_MagazineShow, bShow) == 0x000000, "Member 'TslCharacter_Anim_MagazineShow::bShow' has a wrong offset!");

// Function TslGame.TslCharacter.BindCallbackToHUD
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_BindCallbackToHUD final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_BindCallbackToHUD) == 0x000008, "Wrong alignment on TslCharacter_BindCallbackToHUD");
static_assert(sizeof(TslCharacter_BindCallbackToHUD) == 0x000008, "Wrong size on TslCharacter_BindCallbackToHUD");
static_assert(offsetof(TslCharacter_BindCallbackToHUD, InController) == 0x000000, "Member 'TslCharacter_BindCallbackToHUD::InController' has a wrong offset!");

// Function TslGame.TslCharacter.CheckEquipmentSlot
// 0x000C (0x000C - 0x0000)
struct TslCharacter_CheckEquipmentSlot final
{
public:
	struct FEquipPosition                         InSlotData;                                        // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_CheckEquipmentSlot) == 0x000004, "Wrong alignment on TslCharacter_CheckEquipmentSlot");
static_assert(sizeof(TslCharacter_CheckEquipmentSlot) == 0x00000C, "Wrong size on TslCharacter_CheckEquipmentSlot");
static_assert(offsetof(TslCharacter_CheckEquipmentSlot, InSlotData) == 0x000000, "Member 'TslCharacter_CheckEquipmentSlot::InSlotData' has a wrong offset!");
static_assert(offsetof(TslCharacter_CheckEquipmentSlot, ReturnValue) == 0x000008, "Member 'TslCharacter_CheckEquipmentSlot::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.CheckJumpAndVault
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_CheckJumpAndVault final
{
public:
	bool                                          bForceVelocity;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InForcedVelocity;                                  // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_CheckJumpAndVault) == 0x000004, "Wrong alignment on TslCharacter_CheckJumpAndVault");
static_assert(sizeof(TslCharacter_CheckJumpAndVault) == 0x000010, "Wrong size on TslCharacter_CheckJumpAndVault");
static_assert(offsetof(TslCharacter_CheckJumpAndVault, bForceVelocity) == 0x000000, "Member 'TslCharacter_CheckJumpAndVault::bForceVelocity' has a wrong offset!");
static_assert(offsetof(TslCharacter_CheckJumpAndVault, InForcedVelocity) == 0x000004, "Member 'TslCharacter_CheckJumpAndVault::InForcedVelocity' has a wrong offset!");

// Function TslGame.TslCharacter.Client_PlayUnarmedAttack
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_Client_PlayUnarmedAttack final
{
public:
	int32                                         AnimationIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Client_PlayUnarmedAttack) == 0x000004, "Wrong alignment on TslCharacter_Client_PlayUnarmedAttack");
static_assert(sizeof(TslCharacter_Client_PlayUnarmedAttack) == 0x000004, "Wrong size on TslCharacter_Client_PlayUnarmedAttack");
static_assert(offsetof(TslCharacter_Client_PlayUnarmedAttack, AnimationIndex) == 0x000000, "Member 'TslCharacter_Client_PlayUnarmedAttack::AnimationIndex' has a wrong offset!");

// Function TslGame.TslCharacter.ClientForceInitStance
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ClientForceInitStance final
{
public:
	EStanceMode                                   ToStance;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientForceInitStance) == 0x000001, "Wrong alignment on TslCharacter_ClientForceInitStance");
static_assert(sizeof(TslCharacter_ClientForceInitStance) == 0x000001, "Wrong size on TslCharacter_ClientForceInitStance");
static_assert(offsetof(TslCharacter_ClientForceInitStance, ToStance) == 0x000000, "Member 'TslCharacter_ClientForceInitStance::ToStance' has a wrong offset!");

// Function TslGame.TslCharacter.ClientMyCharacterPlayPickUpAnimation
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_ClientMyCharacterPlayPickUpAnimation final
{
public:
	struct FVector_NetQuantize                    InteractionObject;                                 // 0x0000(0x000C)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientMyCharacterPlayPickUpAnimation) == 0x000004, "Wrong alignment on TslCharacter_ClientMyCharacterPlayPickUpAnimation");
static_assert(sizeof(TslCharacter_ClientMyCharacterPlayPickUpAnimation) == 0x000010, "Wrong size on TslCharacter_ClientMyCharacterPlayPickUpAnimation");
static_assert(offsetof(TslCharacter_ClientMyCharacterPlayPickUpAnimation, InteractionObject) == 0x000000, "Member 'TslCharacter_ClientMyCharacterPlayPickUpAnimation::InteractionObject' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientMyCharacterPlayPickUpAnimation, Duration) == 0x00000C, "Member 'TslCharacter_ClientMyCharacterPlayPickUpAnimation::Duration' has a wrong offset!");

// Function TslGame.TslCharacter.ClientNotifyCrack
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_ClientNotifyCrack final
{
public:
	struct FVector_NetQuantize                    LocationRelative;                                  // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         BulletVelocity;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientNotifyCrack) == 0x000004, "Wrong alignment on TslCharacter_ClientNotifyCrack");
static_assert(sizeof(TslCharacter_ClientNotifyCrack) == 0x000010, "Wrong size on TslCharacter_ClientNotifyCrack");
static_assert(offsetof(TslCharacter_ClientNotifyCrack, LocationRelative) == 0x000000, "Member 'TslCharacter_ClientNotifyCrack::LocationRelative' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientNotifyCrack, BulletVelocity) == 0x00000C, "Member 'TslCharacter_ClientNotifyCrack::BulletVelocity' has a wrong offset!");

// Function TslGame.TslCharacter.ClientPlayPickUpAnimation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_ClientPlayPickUpAnimation final
{
public:
	struct FVector_NetQuantize                    InteractionObject;                                 // 0x0000(0x000C)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientPlayPickUpAnimation) == 0x000004, "Wrong alignment on TslCharacter_ClientPlayPickUpAnimation");
static_assert(sizeof(TslCharacter_ClientPlayPickUpAnimation) == 0x00000C, "Wrong size on TslCharacter_ClientPlayPickUpAnimation");
static_assert(offsetof(TslCharacter_ClientPlayPickUpAnimation, InteractionObject) == 0x000000, "Member 'TslCharacter_ClientPlayPickUpAnimation::InteractionObject' has a wrong offset!");

// Function TslGame.TslCharacter.ClientProcessRevive
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_ClientProcessRevive final
{
public:
	float                                         RemainGroggyHealth;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientProcessRevive) == 0x000004, "Wrong alignment on TslCharacter_ClientProcessRevive");
static_assert(sizeof(TslCharacter_ClientProcessRevive) == 0x000004, "Wrong size on TslCharacter_ClientProcessRevive");
static_assert(offsetof(TslCharacter_ClientProcessRevive, RemainGroggyHealth) == 0x000000, "Member 'TslCharacter_ClientProcessRevive::RemainGroggyHealth' has a wrong offset!");

// Function TslGame.TslCharacter.ClientRevivedCastingWidgetShow
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ClientRevivedCastingWidgetShow final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientRevivedCastingWidgetShow) == 0x000001, "Wrong alignment on TslCharacter_ClientRevivedCastingWidgetShow");
static_assert(sizeof(TslCharacter_ClientRevivedCastingWidgetShow) == 0x000001, "Wrong size on TslCharacter_ClientRevivedCastingWidgetShow");
static_assert(offsetof(TslCharacter_ClientRevivedCastingWidgetShow, bVisible) == 0x000000, "Member 'TslCharacter_ClientRevivedCastingWidgetShow::bVisible' has a wrong offset!");

// Function TslGame.TslCharacter.ClientSendGroggyMessage
// 0x0038 (0x0038 - 0x0000)
struct TslCharacter_ClientSendGroggyMessage final
{
public:
	class ATslPlayerState*                        GroggyCauserPlayerState;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        VictimPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      GroggyCauserDamageType;                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageReason                                 DamageReason;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DamageCauserName;                                  // 0x0020(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientSendGroggyMessage) == 0x000008, "Wrong alignment on TslCharacter_ClientSendGroggyMessage");
static_assert(sizeof(TslCharacter_ClientSendGroggyMessage) == 0x000038, "Wrong size on TslCharacter_ClientSendGroggyMessage");
static_assert(offsetof(TslCharacter_ClientSendGroggyMessage, GroggyCauserPlayerState) == 0x000000, "Member 'TslCharacter_ClientSendGroggyMessage::GroggyCauserPlayerState' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientSendGroggyMessage, VictimPlayerState) == 0x000008, "Member 'TslCharacter_ClientSendGroggyMessage::VictimPlayerState' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientSendGroggyMessage, GroggyCauserDamageType) == 0x000010, "Member 'TslCharacter_ClientSendGroggyMessage::GroggyCauserDamageType' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientSendGroggyMessage, DamageReason) == 0x000018, "Member 'TslCharacter_ClientSendGroggyMessage::DamageReason' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientSendGroggyMessage, DamageCauserName) == 0x000020, "Member 'TslCharacter_ClientSendGroggyMessage::DamageCauserName' has a wrong offset!");

// Function TslGame.TslCharacter.ClientSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ClientSetTargeting final
{
public:
	ETargetingType                                NewTargetingType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientSetTargeting) == 0x000001, "Wrong alignment on TslCharacter_ClientSetTargeting");
static_assert(sizeof(TslCharacter_ClientSetTargeting) == 0x000001, "Wrong size on TslCharacter_ClientSetTargeting");
static_assert(offsetof(TslCharacter_ClientSetTargeting, NewTargetingType) == 0x000000, "Member 'TslCharacter_ClientSetTargeting::NewTargetingType' has a wrong offset!");

// Function TslGame.TslCharacter.ClientSimulationArmorDestruction
// 0x0040 (0x0040 - 0x0000)
struct TslCharacter_ClientSimulationArmorDestruction final
{
public:
	EEquipSlotID                                  SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Impact;                                            // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientSimulationArmorDestruction) == 0x000010, "Wrong alignment on TslCharacter_ClientSimulationArmorDestruction");
static_assert(sizeof(TslCharacter_ClientSimulationArmorDestruction) == 0x000040, "Wrong size on TslCharacter_ClientSimulationArmorDestruction");
static_assert(offsetof(TslCharacter_ClientSimulationArmorDestruction, SlotID) == 0x000000, "Member 'TslCharacter_ClientSimulationArmorDestruction::SlotID' has a wrong offset!");
static_assert(offsetof(TslCharacter_ClientSimulationArmorDestruction, Impact) == 0x000010, "Member 'TslCharacter_ClientSimulationArmorDestruction::Impact' has a wrong offset!");

// Function TslGame.TslCharacter.ClientSoundPlay
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_ClientSoundPlay final
{
public:
	class UAkAudioEvent*                          SoundAk;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ClientSoundPlay) == 0x000008, "Wrong alignment on TslCharacter_ClientSoundPlay");
static_assert(sizeof(TslCharacter_ClientSoundPlay) == 0x000008, "Wrong size on TslCharacter_ClientSoundPlay");
static_assert(offsetof(TslCharacter_ClientSoundPlay, SoundAk) == 0x000000, "Member 'TslCharacter_ClientSoundPlay::SoundAk' has a wrong offset!");

// Function TslGame.TslCharacter.FindWeapon
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_FindWeapon final
{
public:
	TSubclassOf<class ATslWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_FindWeapon) == 0x000008, "Wrong alignment on TslCharacter_FindWeapon");
static_assert(sizeof(TslCharacter_FindWeapon) == 0x000010, "Wrong size on TslCharacter_FindWeapon");
static_assert(offsetof(TslCharacter_FindWeapon, WeaponClass) == 0x000000, "Member 'TslCharacter_FindWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TslCharacter_FindWeapon, ReturnValue) == 0x000008, "Member 'TslCharacter_FindWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetADSSocketOffset
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetADSSocketOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetADSSocketOffset) == 0x000004, "Wrong alignment on TslCharacter_GetADSSocketOffset");
static_assert(sizeof(TslCharacter_GetADSSocketOffset) == 0x00000C, "Wrong size on TslCharacter_GetADSSocketOffset");
static_assert(offsetof(TslCharacter_GetADSSocketOffset, ReturnValue) == 0x000000, "Member 'TslCharacter_GetADSSocketOffset::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetBuffComponent
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetBuffComponent final
{
public:
	class UBuffComponet*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetBuffComponent) == 0x000008, "Wrong alignment on TslCharacter_GetBuffComponent");
static_assert(sizeof(TslCharacter_GetBuffComponent) == 0x000008, "Wrong size on TslCharacter_GetBuffComponent");
static_assert(offsetof(TslCharacter_GetBuffComponent, ReturnValue) == 0x000000, "Member 'TslCharacter_GetBuffComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentSway
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetCurrentSway final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentSway) == 0x000004, "Wrong alignment on TslCharacter_GetCurrentSway");
static_assert(sizeof(TslCharacter_GetCurrentSway) == 0x00000C, "Wrong size on TslCharacter_GetCurrentSway");
static_assert(offsetof(TslCharacter_GetCurrentSway, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentSway::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetInventoryFacade
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetInventoryFacade final
{
public:
	class AInventoryFacade*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetInventoryFacade) == 0x000008, "Wrong alignment on TslCharacter_GetInventoryFacade");
static_assert(sizeof(TslCharacter_GetInventoryFacade) == 0x000008, "Wrong size on TslCharacter_GetInventoryFacade");
static_assert(offsetof(TslCharacter_GetInventoryFacade, ReturnValue) == 0x000000, "Member 'TslCharacter_GetInventoryFacade::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetReactionBone
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetReactionBone final
{
public:
	struct FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetReactionBone) == 0x000004, "Wrong alignment on TslCharacter_GetReactionBone");
static_assert(sizeof(TslCharacter_GetReactionBone) == 0x000010, "Wrong size on TslCharacter_GetReactionBone");
static_assert(offsetof(TslCharacter_GetReactionBone, BoneName) == 0x000000, "Member 'TslCharacter_GetReactionBone::BoneName' has a wrong offset!");
static_assert(offsetof(TslCharacter_GetReactionBone, ReturnValue) == 0x000008, "Member 'TslCharacter_GetReactionBone::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSpeedKmPerHour2D
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSpeedKmPerHour2D final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSpeedKmPerHour2D) == 0x000004, "Wrong alignment on TslCharacter_GetSpeedKmPerHour2D");
static_assert(sizeof(TslCharacter_GetSpeedKmPerHour2D) == 0x000004, "Wrong size on TslCharacter_GetSpeedKmPerHour2D");
static_assert(offsetof(TslCharacter_GetSpeedKmPerHour2D, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSpeedKmPerHour2D::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponProcessor
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetWeaponProcessor final
{
public:
	class AWeaponProcessor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponProcessor) == 0x000008, "Wrong alignment on TslCharacter_GetWeaponProcessor");
static_assert(sizeof(TslCharacter_GetWeaponProcessor) == 0x000008, "Wrong size on TslCharacter_GetWeaponProcessor");
static_assert(offsetof(TslCharacter_GetWeaponProcessor, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponProcessor::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GiveWeapon
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GiveWeapon final
{
public:
	TSubclassOf<class ATslWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GiveWeapon) == 0x000008, "Wrong alignment on TslCharacter_GiveWeapon");
static_assert(sizeof(TslCharacter_GiveWeapon) == 0x000008, "Wrong size on TslCharacter_GiveWeapon");
static_assert(offsetof(TslCharacter_GiveWeapon, WeaponClass) == 0x000000, "Member 'TslCharacter_GiveWeapon::WeaponClass' has a wrong offset!");

// Function TslGame.TslCharacter.HandleVaultEnd_CP
// 0x000C (0x000C - 0x0000)
struct TslCharacter_HandleVaultEnd_CP final
{
public:
	struct FVector                                InVaultEndVelocity;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_HandleVaultEnd_CP) == 0x000004, "Wrong alignment on TslCharacter_HandleVaultEnd_CP");
static_assert(sizeof(TslCharacter_HandleVaultEnd_CP) == 0x00000C, "Wrong size on TslCharacter_HandleVaultEnd_CP");
static_assert(offsetof(TslCharacter_HandleVaultEnd_CP, InVaultEndVelocity) == 0x000000, "Member 'TslCharacter_HandleVaultEnd_CP::InVaultEndVelocity' has a wrong offset!");

// Function TslGame.TslCharacter.HasWeapon
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_HasWeapon final
{
public:
	TSubclassOf<class ATslWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_HasWeapon) == 0x000008, "Wrong alignment on TslCharacter_HasWeapon");
static_assert(sizeof(TslCharacter_HasWeapon) == 0x000010, "Wrong size on TslCharacter_HasWeapon");
static_assert(offsetof(TslCharacter_HasWeapon, WeaponClass) == 0x000000, "Member 'TslCharacter_HasWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TslCharacter_HasWeapon, ReturnValue) == 0x000008, "Member 'TslCharacter_HasWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsOutSidePlayerArea
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsOutSidePlayerArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsOutSidePlayerArea) == 0x000001, "Wrong alignment on TslCharacter_IsOutSidePlayerArea");
static_assert(sizeof(TslCharacter_IsOutSidePlayerArea) == 0x000001, "Wrong size on TslCharacter_IsOutSidePlayerArea");
static_assert(offsetof(TslCharacter_IsOutSidePlayerArea, ReturnValue) == 0x000000, "Member 'TslCharacter_IsOutSidePlayerArea::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.LocalMagazineDrop
// 0x000C (0x000C - 0x0000)
struct TslCharacter_LocalMagazineDrop final
{
public:
	struct FVector                                InitialVelocity;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_LocalMagazineDrop) == 0x000004, "Wrong alignment on TslCharacter_LocalMagazineDrop");
static_assert(sizeof(TslCharacter_LocalMagazineDrop) == 0x00000C, "Wrong size on TslCharacter_LocalMagazineDrop");
static_assert(offsetof(TslCharacter_LocalMagazineDrop, InitialVelocity) == 0x000000, "Member 'TslCharacter_LocalMagazineDrop::InitialVelocity' has a wrong offset!");

// Function TslGame.TslCharacter.NotHaveHealItemNotifyMessage
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_NotHaveHealItemNotifyMessage final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_NotHaveHealItemNotifyMessage) == 0x000008, "Wrong alignment on TslCharacter_NotHaveHealItemNotifyMessage");
static_assert(sizeof(TslCharacter_NotHaveHealItemNotifyMessage) == 0x000018, "Wrong size on TslCharacter_NotHaveHealItemNotifyMessage");
static_assert(offsetof(TslCharacter_NotHaveHealItemNotifyMessage, ItemName) == 0x000000, "Member 'TslCharacter_NotHaveHealItemNotifyMessage::ItemName' has a wrong offset!");

// Function TslGame.TslCharacter.NotHaveThrowItemNotifyMessage
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_NotHaveThrowItemNotifyMessage final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_NotHaveThrowItemNotifyMessage) == 0x000008, "Wrong alignment on TslCharacter_NotHaveThrowItemNotifyMessage");
static_assert(sizeof(TslCharacter_NotHaveThrowItemNotifyMessage) == 0x000018, "Wrong size on TslCharacter_NotHaveThrowItemNotifyMessage");
static_assert(offsetof(TslCharacter_NotHaveThrowItemNotifyMessage, ItemName) == 0x000000, "Member 'TslCharacter_NotHaveThrowItemNotifyMessage::ItemName' has a wrong offset!");

// Function TslGame.TslCharacter.OnBlockingWidgetOpened
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_OnBlockingWidgetOpened final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnBlockingWidgetOpened) == 0x000008, "Wrong alignment on TslCharacter_OnBlockingWidgetOpened");
static_assert(sizeof(TslCharacter_OnBlockingWidgetOpened) == 0x000008, "Wrong size on TslCharacter_OnBlockingWidgetOpened");
static_assert(offsetof(TslCharacter_OnBlockingWidgetOpened, Widget) == 0x000000, "Member 'TslCharacter_OnBlockingWidgetOpened::Widget' has a wrong offset!");

// Function TslGame.TslCharacter.OnCancelInteractBy
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_OnCancelInteractBy final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnCancelInteractBy) == 0x000008, "Wrong alignment on TslCharacter_OnCancelInteractBy");
static_assert(sizeof(TslCharacter_OnCancelInteractBy) == 0x000008, "Wrong size on TslCharacter_OnCancelInteractBy");
static_assert(offsetof(TslCharacter_OnCancelInteractBy, OtherCharacter) == 0x000000, "Member 'TslCharacter_OnCancelInteractBy::OtherCharacter' has a wrong offset!");

// Function TslGame.TslCharacter.OnChangeBreath
// 0x000C (0x000C - 0x0000)
struct TslCharacter_OnChangeBreath final
{
public:
	float                                         Breath;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBreath;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathMax;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnChangeBreath) == 0x000004, "Wrong alignment on TslCharacter_OnChangeBreath");
static_assert(sizeof(TslCharacter_OnChangeBreath) == 0x00000C, "Wrong size on TslCharacter_OnChangeBreath");
static_assert(offsetof(TslCharacter_OnChangeBreath, Breath) == 0x000000, "Member 'TslCharacter_OnChangeBreath::Breath' has a wrong offset!");
static_assert(offsetof(TslCharacter_OnChangeBreath, LastBreath) == 0x000004, "Member 'TslCharacter_OnChangeBreath::LastBreath' has a wrong offset!");
static_assert(offsetof(TslCharacter_OnChangeBreath, BreathMax) == 0x000008, "Member 'TslCharacter_OnChangeBreath::BreathMax' has a wrong offset!");

// Function TslGame.TslCharacter.OnInteractBy
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_OnInteractBy final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnInteractBy) == 0x000008, "Wrong alignment on TslCharacter_OnInteractBy");
static_assert(sizeof(TslCharacter_OnInteractBy) == 0x000008, "Wrong size on TslCharacter_OnInteractBy");
static_assert(offsetof(TslCharacter_OnInteractBy, OtherCharacter) == 0x000000, "Member 'TslCharacter_OnInteractBy::OtherCharacter' has a wrong offset!");

// Function TslGame.TslCharacter.OnRep_AimOffsets
// 0x000C (0x000C - 0x0000)
struct TslCharacter_OnRep_AimOffsets final
{
public:
	struct FVector_NetQuantizeNormal              PrevAimOffsets;                                    // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnRep_AimOffsets) == 0x000004, "Wrong alignment on TslCharacter_OnRep_AimOffsets");
static_assert(sizeof(TslCharacter_OnRep_AimOffsets) == 0x00000C, "Wrong size on TslCharacter_OnRep_AimOffsets");
static_assert(offsetof(TslCharacter_OnRep_AimOffsets, PrevAimOffsets) == 0x000000, "Member 'TslCharacter_OnRep_AimOffsets::PrevAimOffsets' has a wrong offset!");

// Function TslGame.TslCharacter.OnRep_BoostGauge
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_OnRep_BoostGauge final
{
public:
	float                                         LastBoostGauge;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnRep_BoostGauge) == 0x000004, "Wrong alignment on TslCharacter_OnRep_BoostGauge");
static_assert(sizeof(TslCharacter_OnRep_BoostGauge) == 0x000004, "Wrong size on TslCharacter_OnRep_BoostGauge");
static_assert(offsetof(TslCharacter_OnRep_BoostGauge, LastBoostGauge) == 0x000000, "Member 'TslCharacter_OnRep_BoostGauge::LastBoostGauge' has a wrong offset!");

// Function TslGame.TslCharacter.OnRep_GroggyHealth
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_OnRep_GroggyHealth final
{
public:
	float                                         LastGroggyHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnRep_GroggyHealth) == 0x000004, "Wrong alignment on TslCharacter_OnRep_GroggyHealth");
static_assert(sizeof(TslCharacter_OnRep_GroggyHealth) == 0x000004, "Wrong size on TslCharacter_OnRep_GroggyHealth");
static_assert(offsetof(TslCharacter_OnRep_GroggyHealth, LastGroggyHealth) == 0x000000, "Member 'TslCharacter_OnRep_GroggyHealth::LastGroggyHealth' has a wrong offset!");

// Function TslGame.TslCharacter.OnRep_Health
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_OnRep_Health final
{
public:
	float                                         LastHealth;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnRep_Health) == 0x000004, "Wrong alignment on TslCharacter_OnRep_Health");
static_assert(sizeof(TslCharacter_OnRep_Health) == 0x000004, "Wrong size on TslCharacter_OnRep_Health");
static_assert(offsetof(TslCharacter_OnRep_Health, LastHealth) == 0x000000, "Member 'TslCharacter_OnRep_Health::LastHealth' has a wrong offset!");

// Function TslGame.TslCharacter.OnRep_OutSidePlayerArea
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_OnRep_OutSidePlayerArea final
{
public:
	bool                                          bLastOutSidePlayerArea;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnRep_OutSidePlayerArea) == 0x000001, "Wrong alignment on TslCharacter_OnRep_OutSidePlayerArea");
static_assert(sizeof(TslCharacter_OnRep_OutSidePlayerArea) == 0x000001, "Wrong size on TslCharacter_OnRep_OutSidePlayerArea");
static_assert(offsetof(TslCharacter_OnRep_OutSidePlayerArea, bLastOutSidePlayerArea) == 0x000000, "Member 'TslCharacter_OnRep_OutSidePlayerArea::bLastOutSidePlayerArea' has a wrong offset!");

// Function TslGame.TslCharacter.OnStartInteractBy
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_OnStartInteractBy final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_OnStartInteractBy) == 0x000008, "Wrong alignment on TslCharacter_OnStartInteractBy");
static_assert(sizeof(TslCharacter_OnStartInteractBy) == 0x000008, "Wrong size on TslCharacter_OnStartInteractBy");
static_assert(offsetof(TslCharacter_OnStartInteractBy, OtherCharacter) == 0x000000, "Member 'TslCharacter_OnStartInteractBy::OtherCharacter' has a wrong offset!");

// Function TslGame.TslCharacter.PickUpItem
// 0x0028 (0x0028 - 0x0000)
struct TslCharacter_PickUpItem final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   TargetContainer;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_PickUpItem) == 0x000008, "Wrong alignment on TslCharacter_PickUpItem");
static_assert(sizeof(TslCharacter_PickUpItem) == 0x000028, "Wrong size on TslCharacter_PickUpItem");
static_assert(offsetof(TslCharacter_PickUpItem, Item) == 0x000000, "Member 'TslCharacter_PickUpItem::Item' has a wrong offset!");
static_assert(offsetof(TslCharacter_PickUpItem, TargetContainer) == 0x000008, "Member 'TslCharacter_PickUpItem::TargetContainer' has a wrong offset!");
static_assert(offsetof(TslCharacter_PickUpItem, Options) == 0x000010, "Member 'TslCharacter_PickUpItem::Options' has a wrong offset!");
static_assert(offsetof(TslCharacter_PickUpItem, ReturnValue) == 0x000020, "Member 'TslCharacter_PickUpItem::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.PlayCameraAnim
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_PlayCameraAnim final
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_PlayCameraAnim) == 0x000008, "Wrong alignment on TslCharacter_PlayCameraAnim");
static_assert(sizeof(TslCharacter_PlayCameraAnim) == 0x000008, "Wrong size on TslCharacter_PlayCameraAnim");
static_assert(offsetof(TslCharacter_PlayCameraAnim, CameraAnim) == 0x000000, "Member 'TslCharacter_PlayCameraAnim::CameraAnim' has a wrong offset!");

// Function TslGame.TslCharacter.PrepareParachute
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_PrepareParachute final
{
public:
	class UClass*                                 ParachuteType_0;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_PrepareParachute) == 0x000008, "Wrong alignment on TslCharacter_PrepareParachute");
static_assert(sizeof(TslCharacter_PrepareParachute) == 0x000008, "Wrong size on TslCharacter_PrepareParachute");
static_assert(offsetof(TslCharacter_PrepareParachute, ParachuteType_0) == 0x000000, "Member 'TslCharacter_PrepareParachute::ParachuteType_0' has a wrong offset!");

// Function TslGame.TslCharacter.ProcessDBNO
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_ProcessDBNO final
{
public:
	float                                         GroggyHealthPercent;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ProcessDBNO) == 0x000004, "Wrong alignment on TslCharacter_ProcessDBNO");
static_assert(sizeof(TslCharacter_ProcessDBNO) == 0x000004, "Wrong size on TslCharacter_ProcessDBNO");
static_assert(offsetof(TslCharacter_ProcessDBNO, GroggyHealthPercent) == 0x000000, "Member 'TslCharacter_ProcessDBNO::GroggyHealthPercent' has a wrong offset!");

// Function TslGame.TslCharacter.ProcessRevive
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_ProcessRevive final
{
public:
	float                                         RemainGroggyHealthPercent;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ProcessRevive) == 0x000004, "Wrong alignment on TslCharacter_ProcessRevive");
static_assert(sizeof(TslCharacter_ProcessRevive) == 0x000004, "Wrong size on TslCharacter_ProcessRevive");
static_assert(offsetof(TslCharacter_ProcessRevive, RemainGroggyHealthPercent) == 0x000000, "Member 'TslCharacter_ProcessRevive::RemainGroggyHealthPercent' has a wrong offset!");

// Function TslGame.TslCharacter.PunchStart
// 0x000C (0x000C - 0x0000)
struct TslCharacter_PunchStart final
{
public:
	EPunchDamageType                              PunchDamageType;                                   // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PunchDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PunchRadius;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_PunchStart) == 0x000004, "Wrong alignment on TslCharacter_PunchStart");
static_assert(sizeof(TslCharacter_PunchStart) == 0x00000C, "Wrong size on TslCharacter_PunchStart");
static_assert(offsetof(TslCharacter_PunchStart, PunchDamageType) == 0x000000, "Member 'TslCharacter_PunchStart::PunchDamageType' has a wrong offset!");
static_assert(offsetof(TslCharacter_PunchStart, PunchDistance) == 0x000004, "Member 'TslCharacter_PunchStart::PunchDistance' has a wrong offset!");
static_assert(offsetof(TslCharacter_PunchStart, PunchRadius) == 0x000008, "Member 'TslCharacter_PunchStart::PunchRadius' has a wrong offset!");

// Function TslGame.TslCharacter.SendSystemMessage
// 0x0020 (0x0020 - 0x0000)
struct TslCharacter_SendSystemMessage final
{
public:
	ESystemMessageType                            MessageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SendSystemMessage) == 0x000008, "Wrong alignment on TslCharacter_SendSystemMessage");
static_assert(sizeof(TslCharacter_SendSystemMessage) == 0x000020, "Wrong size on TslCharacter_SendSystemMessage");
static_assert(offsetof(TslCharacter_SendSystemMessage, MessageType) == 0x000000, "Member 'TslCharacter_SendSystemMessage::MessageType' has a wrong offset!");
static_assert(offsetof(TslCharacter_SendSystemMessage, Message) == 0x000008, "Member 'TslCharacter_SendSystemMessage::Message' has a wrong offset!");

// Function TslGame.TslCharacter.Server_PlayUnarmedAttack
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_Server_PlayUnarmedAttack final
{
public:
	int32                                         AnimationIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_PlayUnarmedAttack) == 0x000004, "Wrong alignment on TslCharacter_Server_PlayUnarmedAttack");
static_assert(sizeof(TslCharacter_Server_PlayUnarmedAttack) == 0x000004, "Wrong size on TslCharacter_Server_PlayUnarmedAttack");
static_assert(offsetof(TslCharacter_Server_PlayUnarmedAttack, AnimationIndex) == 0x000000, "Member 'TslCharacter_Server_PlayUnarmedAttack::AnimationIndex' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetAimState
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetAimState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetAimState) == 0x000001, "Wrong alignment on TslCharacter_Server_SetAimState");
static_assert(sizeof(TslCharacter_Server_SetAimState) == 0x000001, "Wrong size on TslCharacter_Server_SetAimState");
static_assert(offsetof(TslCharacter_Server_SetAimState, IsActive) == 0x000000, "Member 'TslCharacter_Server_SetAimState::IsActive' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetCanGroggyDamage
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetCanGroggyDamage final
{
public:
	bool                                          bInCanGroggyDamage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetCanGroggyDamage) == 0x000001, "Wrong alignment on TslCharacter_Server_SetCanGroggyDamage");
static_assert(sizeof(TslCharacter_Server_SetCanGroggyDamage) == 0x000001, "Wrong size on TslCharacter_Server_SetCanGroggyDamage");
static_assert(offsetof(TslCharacter_Server_SetCanGroggyDamage, bInCanGroggyDamage) == 0x000000, "Member 'TslCharacter_Server_SetCanGroggyDamage::bInCanGroggyDamage' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetCastAnim
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetCastAnim final
{
public:
	ECastAnim                                     InCastAnim;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetCastAnim) == 0x000001, "Wrong alignment on TslCharacter_Server_SetCastAnim");
static_assert(sizeof(TslCharacter_Server_SetCastAnim) == 0x000001, "Wrong size on TslCharacter_Server_SetCastAnim");
static_assert(offsetof(TslCharacter_Server_SetCastAnim, InCastAnim) == 0x000000, "Member 'TslCharacter_Server_SetCastAnim::InCastAnim' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetCoatEquipped
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetCoatEquipped final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetCoatEquipped) == 0x000001, "Wrong alignment on TslCharacter_Server_SetCoatEquipped");
static_assert(sizeof(TslCharacter_Server_SetCoatEquipped) == 0x000001, "Wrong size on TslCharacter_Server_SetCoatEquipped");
static_assert(offsetof(TslCharacter_Server_SetCoatEquipped, IsEquipped) == 0x000000, "Member 'TslCharacter_Server_SetCoatEquipped::IsEquipped' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetFiringMode
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetFiringMode final
{
public:
	EFiringMode                                   fMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetFiringMode) == 0x000001, "Wrong alignment on TslCharacter_Server_SetFiringMode");
static_assert(sizeof(TslCharacter_Server_SetFiringMode) == 0x000001, "Wrong size on TslCharacter_Server_SetFiringMode");
static_assert(offsetof(TslCharacter_Server_SetFiringMode, fMode) == 0x000000, "Member 'TslCharacter_Server_SetFiringMode::fMode' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetParachuteLandingAssist
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetParachuteLandingAssist final
{
public:
	bool                                          bAssistActive;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetParachuteLandingAssist) == 0x000001, "Wrong alignment on TslCharacter_Server_SetParachuteLandingAssist");
static_assert(sizeof(TslCharacter_Server_SetParachuteLandingAssist) == 0x000001, "Wrong size on TslCharacter_Server_SetParachuteLandingAssist");
static_assert(offsetof(TslCharacter_Server_SetParachuteLandingAssist, bAssistActive) == 0x000000, "Member 'TslCharacter_Server_SetParachuteLandingAssist::bAssistActive' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetThrowMode
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetThrowMode final
{
public:
	bool                                          bNewVal;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetThrowMode) == 0x000001, "Wrong alignment on TslCharacter_Server_SetThrowMode");
static_assert(sizeof(TslCharacter_Server_SetThrowMode) == 0x000001, "Wrong size on TslCharacter_Server_SetThrowMode");
static_assert(offsetof(TslCharacter_Server_SetThrowMode, bNewVal) == 0x000000, "Member 'TslCharacter_Server_SetThrowMode::bNewVal' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetVaultCancel
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetVaultCancel final
{
public:
	bool                                          InCancel;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetVaultCancel) == 0x000001, "Wrong alignment on TslCharacter_Server_SetVaultCancel");
static_assert(sizeof(TslCharacter_Server_SetVaultCancel) == 0x000001, "Wrong size on TslCharacter_Server_SetVaultCancel");
static_assert(offsetof(TslCharacter_Server_SetVaultCancel, InCancel) == 0x000000, "Member 'TslCharacter_Server_SetVaultCancel::InCancel' has a wrong offset!");

// Function TslGame.TslCharacter.Server_SetWeaponObstruction
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Server_SetWeaponObstruction final
{
public:
	bool                                          bNewObstruction;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_SetWeaponObstruction) == 0x000001, "Wrong alignment on TslCharacter_Server_SetWeaponObstruction");
static_assert(sizeof(TslCharacter_Server_SetWeaponObstruction) == 0x000001, "Wrong size on TslCharacter_Server_SetWeaponObstruction");
static_assert(offsetof(TslCharacter_Server_SetWeaponObstruction, bNewObstruction) == 0x000000, "Member 'TslCharacter_Server_SetWeaponObstruction::bNewObstruction' has a wrong offset!");

// Function TslGame.TslCharacter.Server_UnarmedHitNotify
// 0x0090 (0x0090 - 0x0000)
struct TslCharacter_Server_UnarmedHitNotify final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPunchDamageType                              PunchDamageType;                                   // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HitSeq;                                            // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Server_UnarmedHitNotify) == 0x000008, "Wrong alignment on TslCharacter_Server_UnarmedHitNotify");
static_assert(sizeof(TslCharacter_Server_UnarmedHitNotify) == 0x000090, "Wrong size on TslCharacter_Server_UnarmedHitNotify");
static_assert(offsetof(TslCharacter_Server_UnarmedHitNotify, Hit) == 0x000000, "Member 'TslCharacter_Server_UnarmedHitNotify::Hit' has a wrong offset!");
static_assert(offsetof(TslCharacter_Server_UnarmedHitNotify, PunchDamageType) == 0x000088, "Member 'TslCharacter_Server_UnarmedHitNotify::PunchDamageType' has a wrong offset!");
static_assert(offsetof(TslCharacter_Server_UnarmedHitNotify, HitSeq) == 0x00008C, "Member 'TslCharacter_Server_UnarmedHitNotify::HitSeq' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetAimOffsets
// 0x000C (0x000C - 0x0000)
struct TslCharacter_ServerSetAimOffsets final
{
public:
	struct FVector_NetQuantizeNormal              NewAimOffsets;                                     // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetAimOffsets) == 0x000004, "Wrong alignment on TslCharacter_ServerSetAimOffsets");
static_assert(sizeof(TslCharacter_ServerSetAimOffsets) == 0x00000C, "Wrong size on TslCharacter_ServerSetAimOffsets");
static_assert(offsetof(TslCharacter_ServerSetAimOffsets, NewAimOffsets) == 0x000000, "Member 'TslCharacter_ServerSetAimOffsets::NewAimOffsets' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetGunDirectionSway
// 0x000C (0x000C - 0x0000)
struct TslCharacter_ServerSetGunDirectionSway final
{
public:
	struct FRotator                               InGunDirectionSway;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetGunDirectionSway) == 0x000004, "Wrong alignment on TslCharacter_ServerSetGunDirectionSway");
static_assert(sizeof(TslCharacter_ServerSetGunDirectionSway) == 0x00000C, "Wrong size on TslCharacter_ServerSetGunDirectionSway");
static_assert(offsetof(TslCharacter_ServerSetGunDirectionSway, InGunDirectionSway) == 0x000000, "Member 'TslCharacter_ServerSetGunDirectionSway::InGunDirectionSway' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ServerSetHoldingBreath final
{
public:
	bool                                          bNewHoldingBreath;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetHoldingBreath) == 0x000001, "Wrong alignment on TslCharacter_ServerSetHoldingBreath");
static_assert(sizeof(TslCharacter_ServerSetHoldingBreath) == 0x000001, "Wrong size on TslCharacter_ServerSetHoldingBreath");
static_assert(offsetof(TslCharacter_ServerSetHoldingBreath, bNewHoldingBreath) == 0x000000, "Member 'TslCharacter_ServerSetHoldingBreath::bNewHoldingBreath' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetPeekLeft
// 0x0002 (0x0002 - 0x0000)
struct TslCharacter_ServerSetPeekLeft final
{
public:
	bool                                          bNewPeekLeft;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbUseRightShoulderAiming;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetPeekLeft) == 0x000001, "Wrong alignment on TslCharacter_ServerSetPeekLeft");
static_assert(sizeof(TslCharacter_ServerSetPeekLeft) == 0x000002, "Wrong size on TslCharacter_ServerSetPeekLeft");
static_assert(offsetof(TslCharacter_ServerSetPeekLeft, bNewPeekLeft) == 0x000000, "Member 'TslCharacter_ServerSetPeekLeft::bNewPeekLeft' has a wrong offset!");
static_assert(offsetof(TslCharacter_ServerSetPeekLeft, InbUseRightShoulderAiming) == 0x000001, "Member 'TslCharacter_ServerSetPeekLeft::InbUseRightShoulderAiming' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetPeekRight
// 0x0002 (0x0002 - 0x0000)
struct TslCharacter_ServerSetPeekRight final
{
public:
	bool                                          bNewPeekRight;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbUseRightShoulderAiming;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetPeekRight) == 0x000001, "Wrong alignment on TslCharacter_ServerSetPeekRight");
static_assert(sizeof(TslCharacter_ServerSetPeekRight) == 0x000002, "Wrong size on TslCharacter_ServerSetPeekRight");
static_assert(offsetof(TslCharacter_ServerSetPeekRight, bNewPeekRight) == 0x000000, "Member 'TslCharacter_ServerSetPeekRight::bNewPeekRight' has a wrong offset!");
static_assert(offsetof(TslCharacter_ServerSetPeekRight, InbUseRightShoulderAiming) == 0x000001, "Member 'TslCharacter_ServerSetPeekRight::InbUseRightShoulderAiming' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetRolling
// 0x0002 (0x0002 - 0x0000)
struct TslCharacter_ServerSetRolling final
{
public:
	bool                                          bNewRolling;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeft;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetRolling) == 0x000001, "Wrong alignment on TslCharacter_ServerSetRolling");
static_assert(sizeof(TslCharacter_ServerSetRolling) == 0x000002, "Wrong size on TslCharacter_ServerSetRolling");
static_assert(offsetof(TslCharacter_ServerSetRolling, bNewRolling) == 0x000000, "Member 'TslCharacter_ServerSetRolling::bNewRolling' has a wrong offset!");
static_assert(offsetof(TslCharacter_ServerSetRolling, bIsLeft) == 0x000001, "Member 'TslCharacter_ServerSetRolling::bIsLeft' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetRunning
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ServerSetRunning final
{
public:
	bool                                          bNewRunning;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetRunning) == 0x000001, "Wrong alignment on TslCharacter_ServerSetRunning");
static_assert(sizeof(TslCharacter_ServerSetRunning) == 0x000001, "Wrong size on TslCharacter_ServerSetRunning");
static_assert(offsetof(TslCharacter_ServerSetRunning, bNewRunning) == 0x000000, "Member 'TslCharacter_ServerSetRunning::bNewRunning' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetSprinting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ServerSetSprinting final
{
public:
	bool                                          bNewSprinting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetSprinting) == 0x000001, "Wrong alignment on TslCharacter_ServerSetSprinting");
static_assert(sizeof(TslCharacter_ServerSetSprinting) == 0x000001, "Wrong size on TslCharacter_ServerSetSprinting");
static_assert(offsetof(TslCharacter_ServerSetSprinting, bNewSprinting) == 0x000000, "Member 'TslCharacter_ServerSetSprinting::bNewSprinting' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetSprintingAuto
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ServerSetSprintingAuto final
{
public:
	bool                                          bNewSprintingAuto;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetSprintingAuto) == 0x000001, "Wrong alignment on TslCharacter_ServerSetSprintingAuto");
static_assert(sizeof(TslCharacter_ServerSetSprintingAuto) == 0x000001, "Wrong size on TslCharacter_ServerSetSprintingAuto");
static_assert(offsetof(TslCharacter_ServerSetSprintingAuto, bNewSprintingAuto) == 0x000000, "Member 'TslCharacter_ServerSetSprintingAuto::bNewSprintingAuto' has a wrong offset!");

// Function TslGame.TslCharacter.ServerSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ServerSetTargeting final
{
public:
	ETargetingType                                NewTargetingType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ServerSetTargeting) == 0x000001, "Wrong alignment on TslCharacter_ServerSetTargeting");
static_assert(sizeof(TslCharacter_ServerSetTargeting) == 0x000001, "Wrong size on TslCharacter_ServerSetTargeting");
static_assert(offsetof(TslCharacter_ServerSetTargeting, NewTargetingType) == 0x000000, "Member 'TslCharacter_ServerSetTargeting::NewTargetingType' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_SetAccessorySlot final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccessorySlot                                Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_SetAccessorySlot) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot");
static_assert(sizeof(TslCharacter_SetAccessorySlot) == 0x000010, "Wrong size on TslCharacter_SetAccessorySlot");
static_assert(offsetof(TslCharacter_SetAccessorySlot, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot::AccessoryComponent' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetAccessorySlot, Slot) == 0x000008, "Member 'TslCharacter_SetAccessorySlot::Slot' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot_Melee
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_SetAccessorySlot_Melee final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAccessorySlot_Melee) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot_Melee");
static_assert(sizeof(TslCharacter_SetAccessorySlot_Melee) == 0x000008, "Wrong size on TslCharacter_SetAccessorySlot_Melee");
static_assert(offsetof(TslCharacter_SetAccessorySlot_Melee, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot_Melee::AccessoryComponent' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot_Primary
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_SetAccessorySlot_Primary final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAccessorySlot_Primary) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot_Primary");
static_assert(sizeof(TslCharacter_SetAccessorySlot_Primary) == 0x000008, "Wrong size on TslCharacter_SetAccessorySlot_Primary");
static_assert(offsetof(TslCharacter_SetAccessorySlot_Primary, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot_Primary::AccessoryComponent' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot_Secondary
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_SetAccessorySlot_Secondary final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAccessorySlot_Secondary) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot_Secondary");
static_assert(sizeof(TslCharacter_SetAccessorySlot_Secondary) == 0x000008, "Wrong size on TslCharacter_SetAccessorySlot_Secondary");
static_assert(offsetof(TslCharacter_SetAccessorySlot_Secondary, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot_Secondary::AccessoryComponent' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot_SideArm
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_SetAccessorySlot_SideArm final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAccessorySlot_SideArm) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot_SideArm");
static_assert(sizeof(TslCharacter_SetAccessorySlot_SideArm) == 0x000008, "Wrong size on TslCharacter_SetAccessorySlot_SideArm");
static_assert(offsetof(TslCharacter_SetAccessorySlot_SideArm, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot_SideArm::AccessoryComponent' has a wrong offset!");

// Function TslGame.TslCharacter.SetAccessorySlot_Thrown
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_SetAccessorySlot_Thrown final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAccessorySlot_Thrown) == 0x000008, "Wrong alignment on TslCharacter_SetAccessorySlot_Thrown");
static_assert(sizeof(TslCharacter_SetAccessorySlot_Thrown) == 0x000008, "Wrong size on TslCharacter_SetAccessorySlot_Thrown");
static_assert(offsetof(TslCharacter_SetAccessorySlot_Thrown, AccessoryComponent) == 0x000000, "Member 'TslCharacter_SetAccessorySlot_Thrown::AccessoryComponent' has a wrong offset!");

// Function TslGame.TslCharacter.SetActiveRagdoll
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetActiveRagdoll final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetActiveRagdoll) == 0x000001, "Wrong alignment on TslCharacter_SetActiveRagdoll");
static_assert(sizeof(TslCharacter_SetActiveRagdoll) == 0x000001, "Wrong size on TslCharacter_SetActiveRagdoll");
static_assert(offsetof(TslCharacter_SetActiveRagdoll, bIsActive) == 0x000000, "Member 'TslCharacter_SetActiveRagdoll::bIsActive' has a wrong offset!");

// Function TslGame.TslCharacter.SetADSSocketOffset
// 0x000C (0x000C - 0x0000)
struct TslCharacter_SetADSSocketOffset final
{
public:
	struct FVector                                NewOffset;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetADSSocketOffset) == 0x000004, "Wrong alignment on TslCharacter_SetADSSocketOffset");
static_assert(sizeof(TslCharacter_SetADSSocketOffset) == 0x00000C, "Wrong size on TslCharacter_SetADSSocketOffset");
static_assert(offsetof(TslCharacter_SetADSSocketOffset, NewOffset) == 0x000000, "Member 'TslCharacter_SetADSSocketOffset::NewOffset' has a wrong offset!");

// Function TslGame.TslCharacter.SetAimStateActive
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetAimStateActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAimStateActive) == 0x000001, "Wrong alignment on TslCharacter_SetAimStateActive");
static_assert(sizeof(TslCharacter_SetAimStateActive) == 0x000001, "Wrong size on TslCharacter_SetAimStateActive");
static_assert(offsetof(TslCharacter_SetAimStateActive, IsActive) == 0x000000, "Member 'TslCharacter_SetAimStateActive::IsActive' has a wrong offset!");

// Function TslGame.TslCharacter.SetAnimationAkRTPC
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_SetAnimationAkRTPC final
{
public:
	class FString                                 RTPCName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTPCValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacter_SetAnimationAkRTPC) == 0x000008, "Wrong alignment on TslCharacter_SetAnimationAkRTPC");
static_assert(sizeof(TslCharacter_SetAnimationAkRTPC) == 0x000018, "Wrong size on TslCharacter_SetAnimationAkRTPC");
static_assert(offsetof(TslCharacter_SetAnimationAkRTPC, RTPCName) == 0x000000, "Member 'TslCharacter_SetAnimationAkRTPC::RTPCName' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetAnimationAkRTPC, RTPCValue) == 0x000010, "Member 'TslCharacter_SetAnimationAkRTPC::RTPCValue' has a wrong offset!");

// Function TslGame.TslCharacter.SetAnimationAkSwitch
// 0x0020 (0x0020 - 0x0000)
struct TslCharacter_SetAnimationAkSwitch final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetAnimationAkSwitch) == 0x000008, "Wrong alignment on TslCharacter_SetAnimationAkSwitch");
static_assert(sizeof(TslCharacter_SetAnimationAkSwitch) == 0x000020, "Wrong size on TslCharacter_SetAnimationAkSwitch");
static_assert(offsetof(TslCharacter_SetAnimationAkSwitch, SwitchGroup) == 0x000000, "Member 'TslCharacter_SetAnimationAkSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetAnimationAkSwitch, SwitchState) == 0x000010, "Member 'TslCharacter_SetAnimationAkSwitch::SwitchState' has a wrong offset!");

// Function TslGame.TslCharacter.SetBoostGauge
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_SetBoostGauge final
{
public:
	float                                         NewBoostGauge;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetBoostGauge) == 0x000004, "Wrong alignment on TslCharacter_SetBoostGauge");
static_assert(sizeof(TslCharacter_SetBoostGauge) == 0x000004, "Wrong size on TslCharacter_SetBoostGauge");
static_assert(offsetof(TslCharacter_SetBoostGauge, NewBoostGauge) == 0x000000, "Member 'TslCharacter_SetBoostGauge::NewBoostGauge' has a wrong offset!");

// Function TslGame.TslCharacter.SetBuffFinalSpreadFactor
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_SetBuffFinalSpreadFactor final
{
public:
	float                                         FinalSpreadFactor;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetBuffFinalSpreadFactor) == 0x000004, "Wrong alignment on TslCharacter_SetBuffFinalSpreadFactor");
static_assert(sizeof(TslCharacter_SetBuffFinalSpreadFactor) == 0x000004, "Wrong size on TslCharacter_SetBuffFinalSpreadFactor");
static_assert(offsetof(TslCharacter_SetBuffFinalSpreadFactor, FinalSpreadFactor) == 0x000000, "Member 'TslCharacter_SetBuffFinalSpreadFactor::FinalSpreadFactor' has a wrong offset!");

// Function TslGame.TslCharacter.SetBulletSpawnOverride
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetBulletSpawnOverride final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetBulletSpawnOverride) == 0x000001, "Wrong alignment on TslCharacter_SetBulletSpawnOverride");
static_assert(sizeof(TslCharacter_SetBulletSpawnOverride) == 0x000001, "Wrong size on TslCharacter_SetBulletSpawnOverride");
static_assert(offsetof(TslCharacter_SetBulletSpawnOverride, InOverride) == 0x000000, "Member 'TslCharacter_SetBulletSpawnOverride::InOverride' has a wrong offset!");

// Function TslGame.TslCharacter.SetCanGroggyDamage
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetCanGroggyDamage final
{
public:
	bool                                          bInCanGroggyDamage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetCanGroggyDamage) == 0x000001, "Wrong alignment on TslCharacter_SetCanGroggyDamage");
static_assert(sizeof(TslCharacter_SetCanGroggyDamage) == 0x000001, "Wrong size on TslCharacter_SetCanGroggyDamage");
static_assert(offsetof(TslCharacter_SetCanGroggyDamage, bInCanGroggyDamage) == 0x000000, "Member 'TslCharacter_SetCanGroggyDamage::bInCanGroggyDamage' has a wrong offset!");

// Function TslGame.TslCharacter.SetCharacterVaultingData
// 0x000C (0x000C - 0x0000)
struct TslCharacter_SetCharacterVaultingData final
{
public:
	float                                         InVaultTimer;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsVaulting;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsClimbing;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEndVaultToFall;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDirection;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetCharacterVaultingData) == 0x000004, "Wrong alignment on TslCharacter_SetCharacterVaultingData");
static_assert(sizeof(TslCharacter_SetCharacterVaultingData) == 0x00000C, "Wrong size on TslCharacter_SetCharacterVaultingData");
static_assert(offsetof(TslCharacter_SetCharacterVaultingData, InVaultTimer) == 0x000000, "Member 'TslCharacter_SetCharacterVaultingData::InVaultTimer' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetCharacterVaultingData, InIsVaulting) == 0x000004, "Member 'TslCharacter_SetCharacterVaultingData::InIsVaulting' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetCharacterVaultingData, InIsClimbing) == 0x000005, "Member 'TslCharacter_SetCharacterVaultingData::InIsClimbing' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetCharacterVaultingData, InEndVaultToFall) == 0x000006, "Member 'TslCharacter_SetCharacterVaultingData::InEndVaultToFall' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetCharacterVaultingData, InDirection) == 0x000008, "Member 'TslCharacter_SetCharacterVaultingData::InDirection' has a wrong offset!");

// Function TslGame.TslCharacter.SetCustomDepth
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetCustomDepth final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetCustomDepth) == 0x000001, "Wrong alignment on TslCharacter_SetCustomDepth");
static_assert(sizeof(TslCharacter_SetCustomDepth) == 0x000001, "Wrong size on TslCharacter_SetCustomDepth");
static_assert(offsetof(TslCharacter_SetCustomDepth, bOn) == 0x000000, "Member 'TslCharacter_SetCustomDepth::bOn' has a wrong offset!");

// Function TslGame.TslCharacter.SetJumpStartLocationAndFallheight
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_SetJumpStartLocationAndFallheight final
{
public:
	struct FVector                                JumpStartLoc;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FallHeight;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetJumpStartLocationAndFallheight) == 0x000004, "Wrong alignment on TslCharacter_SetJumpStartLocationAndFallheight");
static_assert(sizeof(TslCharacter_SetJumpStartLocationAndFallheight) == 0x000010, "Wrong size on TslCharacter_SetJumpStartLocationAndFallheight");
static_assert(offsetof(TslCharacter_SetJumpStartLocationAndFallheight, JumpStartLoc) == 0x000000, "Member 'TslCharacter_SetJumpStartLocationAndFallheight::JumpStartLoc' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetJumpStartLocationAndFallheight, FallHeight) == 0x00000C, "Member 'TslCharacter_SetJumpStartLocationAndFallheight::FallHeight' has a wrong offset!");

// Function TslGame.TslCharacter.SetLaunchEvent
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_SetLaunchEvent final
{
public:
	struct FAttackId                              AttackId;                                          // 0x0000(0x0004)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerState*                        InPlayerState;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Causer;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetLaunchEvent) == 0x000008, "Wrong alignment on TslCharacter_SetLaunchEvent");
static_assert(sizeof(TslCharacter_SetLaunchEvent) == 0x000018, "Wrong size on TslCharacter_SetLaunchEvent");
static_assert(offsetof(TslCharacter_SetLaunchEvent, AttackId) == 0x000000, "Member 'TslCharacter_SetLaunchEvent::AttackId' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetLaunchEvent, InPlayerState) == 0x000008, "Member 'TslCharacter_SetLaunchEvent::InPlayerState' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetLaunchEvent, Causer) == 0x000010, "Member 'TslCharacter_SetLaunchEvent::Causer' has a wrong offset!");

// Function TslGame.TslCharacter.SetMovementEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetMovementEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetMovementEnabled) == 0x000001, "Wrong alignment on TslCharacter_SetMovementEnabled");
static_assert(sizeof(TslCharacter_SetMovementEnabled) == 0x000001, "Wrong size on TslCharacter_SetMovementEnabled");
static_assert(offsetof(TslCharacter_SetMovementEnabled, IsEnabled) == 0x000000, "Member 'TslCharacter_SetMovementEnabled::IsEnabled' has a wrong offset!");

// Function TslGame.TslCharacter.SetOutSidePlayerArea
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetOutSidePlayerArea final
{
public:
	bool                                          bNewOutSidePlayerArea;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetOutSidePlayerArea) == 0x000001, "Wrong alignment on TslCharacter_SetOutSidePlayerArea");
static_assert(sizeof(TslCharacter_SetOutSidePlayerArea) == 0x000001, "Wrong size on TslCharacter_SetOutSidePlayerArea");
static_assert(offsetof(TslCharacter_SetOutSidePlayerArea, bNewOutSidePlayerArea) == 0x000000, "Member 'TslCharacter_SetOutSidePlayerArea::bNewOutSidePlayerArea' has a wrong offset!");

// Function TslGame.TslCharacter.SetParachuteLandingAssist
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetParachuteLandingAssist final
{
public:
	bool                                          bAssistActive;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetParachuteLandingAssist) == 0x000001, "Wrong alignment on TslCharacter_SetParachuteLandingAssist");
static_assert(sizeof(TslCharacter_SetParachuteLandingAssist) == 0x000001, "Wrong size on TslCharacter_SetParachuteLandingAssist");
static_assert(offsetof(TslCharacter_SetParachuteLandingAssist, bAssistActive) == 0x000000, "Member 'TslCharacter_SetParachuteLandingAssist::bAssistActive' has a wrong offset!");

// Function TslGame.TslCharacter.SetServerVaultFinished
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetServerVaultFinished final
{
public:
	bool                                          InFinished;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetServerVaultFinished) == 0x000001, "Wrong alignment on TslCharacter_SetServerVaultFinished");
static_assert(sizeof(TslCharacter_SetServerVaultFinished) == 0x000001, "Wrong size on TslCharacter_SetServerVaultFinished");
static_assert(offsetof(TslCharacter_SetServerVaultFinished, InFinished) == 0x000000, "Member 'TslCharacter_SetServerVaultFinished::InFinished' has a wrong offset!");

// Function TslGame.TslCharacter.SetSwayDebuffParameters
// 0x000C (0x000C - 0x0000)
struct TslCharacter_SetSwayDebuffParameters final
{
public:
	float                                         SwaySpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayVerticalMultiplier;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayHorizontalMultiplier;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetSwayDebuffParameters) == 0x000004, "Wrong alignment on TslCharacter_SetSwayDebuffParameters");
static_assert(sizeof(TslCharacter_SetSwayDebuffParameters) == 0x00000C, "Wrong size on TslCharacter_SetSwayDebuffParameters");
static_assert(offsetof(TslCharacter_SetSwayDebuffParameters, SwaySpeed) == 0x000000, "Member 'TslCharacter_SetSwayDebuffParameters::SwaySpeed' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetSwayDebuffParameters, SwayVerticalMultiplier) == 0x000004, "Member 'TslCharacter_SetSwayDebuffParameters::SwayVerticalMultiplier' has a wrong offset!");
static_assert(offsetof(TslCharacter_SetSwayDebuffParameters, SwayHorizontalMultiplier) == 0x000008, "Member 'TslCharacter_SetSwayDebuffParameters::SwayHorizontalMultiplier' has a wrong offset!");

// Function TslGame.TslCharacter.SetTickOptimization_Actor
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetTickOptimization_Actor final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetTickOptimization_Actor) == 0x000001, "Wrong alignment on TslCharacter_SetTickOptimization_Actor");
static_assert(sizeof(TslCharacter_SetTickOptimization_Actor) == 0x000001, "Wrong size on TslCharacter_SetTickOptimization_Actor");
static_assert(offsetof(TslCharacter_SetTickOptimization_Actor, bActivate) == 0x000000, "Member 'TslCharacter_SetTickOptimization_Actor::bActivate' has a wrong offset!");

// Function TslGame.TslCharacter.SetTickOptimization_Anim
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetTickOptimization_Anim final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetTickOptimization_Anim) == 0x000001, "Wrong alignment on TslCharacter_SetTickOptimization_Anim");
static_assert(sizeof(TslCharacter_SetTickOptimization_Anim) == 0x000001, "Wrong size on TslCharacter_SetTickOptimization_Anim");
static_assert(offsetof(TslCharacter_SetTickOptimization_Anim, bActivate) == 0x000000, "Member 'TslCharacter_SetTickOptimization_Anim::bActivate' has a wrong offset!");

// Function TslGame.TslCharacter.SetTickOptimization_Movement
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_SetTickOptimization_Movement final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetTickOptimization_Movement) == 0x000001, "Wrong alignment on TslCharacter_SetTickOptimization_Movement");
static_assert(sizeof(TslCharacter_SetTickOptimization_Movement) == 0x000001, "Wrong size on TslCharacter_SetTickOptimization_Movement");
static_assert(offsetof(TslCharacter_SetTickOptimization_Movement, bActivate) == 0x000000, "Member 'TslCharacter_SetTickOptimization_Movement::bActivate' has a wrong offset!");

// Function TslGame.TslCharacter.SetTPPSpringarmOffset
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_SetTPPSpringarmOffset final
{
public:
	float                                         VerticalOffset;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetTPPSpringarmOffset) == 0x000004, "Wrong alignment on TslCharacter_SetTPPSpringarmOffset");
static_assert(sizeof(TslCharacter_SetTPPSpringarmOffset) == 0x000004, "Wrong size on TslCharacter_SetTPPSpringarmOffset");
static_assert(offsetof(TslCharacter_SetTPPSpringarmOffset, VerticalOffset) == 0x000000, "Member 'TslCharacter_SetTPPSpringarmOffset::VerticalOffset' has a wrong offset!");

// Function TslGame.TslCharacter.SetWeaponInertia
// 0x000C (0x000C - 0x0000)
struct TslCharacter_SetWeaponInertia final
{
public:
	struct FRotator                               InInertia;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SetWeaponInertia) == 0x000004, "Wrong alignment on TslCharacter_SetWeaponInertia");
static_assert(sizeof(TslCharacter_SetWeaponInertia) == 0x00000C, "Wrong size on TslCharacter_SetWeaponInertia");
static_assert(offsetof(TslCharacter_SetWeaponInertia, InInertia) == 0x000000, "Member 'TslCharacter_SetWeaponInertia::InInertia' has a wrong offset!");

// Function TslGame.TslCharacter.ShowDynamicCrosshair
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_ShowDynamicCrosshair final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_ShowDynamicCrosshair) == 0x000001, "Wrong alignment on TslCharacter_ShowDynamicCrosshair");
static_assert(sizeof(TslCharacter_ShowDynamicCrosshair) == 0x000001, "Wrong size on TslCharacter_ShowDynamicCrosshair");
static_assert(offsetof(TslCharacter_ShowDynamicCrosshair, bShow) == 0x000000, "Member 'TslCharacter_ShowDynamicCrosshair::bShow' has a wrong offset!");

// Function TslGame.TslCharacter.SimulateHeadShot
// 0x0060 (0x0060 - 0x0000)
struct TslCharacter_SimulateHeadShot final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ImpactTransform;                                   // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SimulateHeadShot) == 0x000010, "Wrong alignment on TslCharacter_SimulateHeadShot");
static_assert(sizeof(TslCharacter_SimulateHeadShot) == 0x000060, "Wrong size on TslCharacter_SimulateHeadShot");
static_assert(offsetof(TslCharacter_SimulateHeadShot, SpawnTransform) == 0x000000, "Member 'TslCharacter_SimulateHeadShot::SpawnTransform' has a wrong offset!");
static_assert(offsetof(TslCharacter_SimulateHeadShot, ImpactTransform) == 0x000030, "Member 'TslCharacter_SimulateHeadShot::ImpactTransform' has a wrong offset!");

// Function TslGame.TslCharacter.SpawnBulletPassByEffect
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_SpawnBulletPassByEffect final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BulletVelocity;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SpawnBulletPassByEffect) == 0x000004, "Wrong alignment on TslCharacter_SpawnBulletPassByEffect");
static_assert(sizeof(TslCharacter_SpawnBulletPassByEffect) == 0x000010, "Wrong size on TslCharacter_SpawnBulletPassByEffect");
static_assert(offsetof(TslCharacter_SpawnBulletPassByEffect, Location) == 0x000000, "Member 'TslCharacter_SpawnBulletPassByEffect::Location' has a wrong offset!");
static_assert(offsetof(TslCharacter_SpawnBulletPassByEffect, BulletVelocity) == 0x00000C, "Member 'TslCharacter_SpawnBulletPassByEffect::BulletVelocity' has a wrong offset!");

// Function TslGame.TslCharacter.SpawnPunchImpact
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_SpawnPunchImpact final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SpawnPunchImpact) == 0x000004, "Wrong alignment on TslCharacter_SpawnPunchImpact");
static_assert(sizeof(TslCharacter_SpawnPunchImpact) == 0x000018, "Wrong size on TslCharacter_SpawnPunchImpact");
static_assert(offsetof(TslCharacter_SpawnPunchImpact, InLocation) == 0x000000, "Member 'TslCharacter_SpawnPunchImpact::InLocation' has a wrong offset!");
static_assert(offsetof(TslCharacter_SpawnPunchImpact, InRotation) == 0x00000C, "Member 'TslCharacter_SpawnPunchImpact::InRotation' has a wrong offset!");

// Function TslGame.TslCharacter.SpawnPunchImpact_Reliable
// 0x0018 (0x0018 - 0x0000)
struct TslCharacter_SpawnPunchImpact_Reliable final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_SpawnPunchImpact_Reliable) == 0x000004, "Wrong alignment on TslCharacter_SpawnPunchImpact_Reliable");
static_assert(sizeof(TslCharacter_SpawnPunchImpact_Reliable) == 0x000018, "Wrong size on TslCharacter_SpawnPunchImpact_Reliable");
static_assert(offsetof(TslCharacter_SpawnPunchImpact_Reliable, InLocation) == 0x000000, "Member 'TslCharacter_SpawnPunchImpact_Reliable::InLocation' has a wrong offset!");
static_assert(offsetof(TslCharacter_SpawnPunchImpact_Reliable, InRotation) == 0x00000C, "Member 'TslCharacter_SpawnPunchImpact_Reliable::InRotation' has a wrong offset!");

// Function TslGame.TslCharacter.UnBindCallbackToHUD
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_UnBindCallbackToHUD final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_UnBindCallbackToHUD) == 0x000008, "Wrong alignment on TslCharacter_UnBindCallbackToHUD");
static_assert(sizeof(TslCharacter_UnBindCallbackToHUD) == 0x000008, "Wrong size on TslCharacter_UnBindCallbackToHUD");
static_assert(offsetof(TslCharacter_UnBindCallbackToHUD, InController) == 0x000000, "Member 'TslCharacter_UnBindCallbackToHUD::InController' has a wrong offset!");

// Function TslGame.TslCharacter.Anim_IsMagazineVisible
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_Anim_IsMagazineVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_Anim_IsMagazineVisible) == 0x000001, "Wrong alignment on TslCharacter_Anim_IsMagazineVisible");
static_assert(sizeof(TslCharacter_Anim_IsMagazineVisible) == 0x000001, "Wrong size on TslCharacter_Anim_IsMagazineVisible");
static_assert(offsetof(TslCharacter_Anim_IsMagazineVisible, ReturnValue) == 0x000000, "Member 'TslCharacter_Anim_IsMagazineVisible::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.CanSwim
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_CanSwim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_CanSwim) == 0x000001, "Wrong alignment on TslCharacter_CanSwim");
static_assert(sizeof(TslCharacter_CanSwim) == 0x000001, "Wrong size on TslCharacter_CanSwim");
static_assert(offsetof(TslCharacter_CanSwim, ReturnValue) == 0x000000, "Member 'TslCharacter_CanSwim::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetAccessorySlot final
{
public:
	EAccessorySlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslAccessoryComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAccessorySlot) == 0x000008, "Wrong alignment on TslCharacter_GetAccessorySlot");
static_assert(sizeof(TslCharacter_GetAccessorySlot) == 0x000010, "Wrong size on TslCharacter_GetAccessorySlot");
static_assert(offsetof(TslCharacter_GetAccessorySlot, Slot) == 0x000000, "Member 'TslCharacter_GetAccessorySlot::Slot' has a wrong offset!");
static_assert(offsetof(TslCharacter_GetAccessorySlot, ReturnValue) == 0x000008, "Member 'TslCharacter_GetAccessorySlot::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetActiveCamera
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetActiveCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetActiveCamera) == 0x000008, "Wrong alignment on TslCharacter_GetActiveCamera");
static_assert(sizeof(TslCharacter_GetActiveCamera) == 0x000008, "Wrong size on TslCharacter_GetActiveCamera");
static_assert(offsetof(TslCharacter_GetActiveCamera, ReturnValue) == 0x000000, "Member 'TslCharacter_GetActiveCamera::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetActorCanInteract
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetActorCanInteract final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetActorCanInteract) == 0x000008, "Wrong alignment on TslCharacter_GetActorCanInteract");
static_assert(sizeof(TslCharacter_GetActorCanInteract) == 0x000008, "Wrong size on TslCharacter_GetActorCanInteract");
static_assert(offsetof(TslCharacter_GetActorCanInteract, ReturnValue) == 0x000000, "Member 'TslCharacter_GetActorCanInteract::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAimOffsets
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetAimOffsets final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAimOffsets) == 0x000004, "Wrong alignment on TslCharacter_GetAimOffsets");
static_assert(sizeof(TslCharacter_GetAimOffsets) == 0x00000C, "Wrong size on TslCharacter_GetAimOffsets");
static_assert(offsetof(TslCharacter_GetAimOffsets, ReturnValue) == 0x000000, "Member 'TslCharacter_GetAimOffsets::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAimStateAlpha
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetAimStateAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAimStateAlpha) == 0x000004, "Wrong alignment on TslCharacter_GetAimStateAlpha");
static_assert(sizeof(TslCharacter_GetAimStateAlpha) == 0x000004, "Wrong size on TslCharacter_GetAimStateAlpha");
static_assert(offsetof(TslCharacter_GetAimStateAlpha, ReturnValue) == 0x000000, "Member 'TslCharacter_GetAimStateAlpha::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAimStateTimer
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetAimStateTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAimStateTimer) == 0x000004, "Wrong alignment on TslCharacter_GetAimStateTimer");
static_assert(sizeof(TslCharacter_GetAimStateTimer) == 0x000004, "Wrong size on TslCharacter_GetAimStateTimer");
static_assert(offsetof(TslCharacter_GetAimStateTimer, ReturnValue) == 0x000000, "Member 'TslCharacter_GetAimStateTimer::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAnimStance
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetAnimStance final
{
public:
	EAnimStance                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAnimStance) == 0x000001, "Wrong alignment on TslCharacter_GetAnimStance");
static_assert(sizeof(TslCharacter_GetAnimStance) == 0x000001, "Wrong size on TslCharacter_GetAnimStance");
static_assert(offsetof(TslCharacter_GetAnimStance, ReturnValue) == 0x000000, "Member 'TslCharacter_GetAnimStance::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetAnimWeaponType
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetAnimWeaponType final
{
public:
	EAnimWeaponType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetAnimWeaponType) == 0x000001, "Wrong alignment on TslCharacter_GetAnimWeaponType");
static_assert(sizeof(TslCharacter_GetAnimWeaponType) == 0x000001, "Wrong size on TslCharacter_GetAnimWeaponType");
static_assert(offsetof(TslCharacter_GetAnimWeaponType, ReturnValue) == 0x000000, "Member 'TslCharacter_GetAnimWeaponType::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetBreathComponent
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetBreathComponent final
{
public:
	class UCharacterBreathComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetBreathComponent) == 0x000008, "Wrong alignment on TslCharacter_GetBreathComponent");
static_assert(sizeof(TslCharacter_GetBreathComponent) == 0x000008, "Wrong size on TslCharacter_GetBreathComponent");
static_assert(offsetof(TslCharacter_GetBreathComponent, ReturnValue) == 0x000000, "Member 'TslCharacter_GetBreathComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetBulletSpawnOverride
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetBulletSpawnOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetBulletSpawnOverride) == 0x000001, "Wrong alignment on TslCharacter_GetBulletSpawnOverride");
static_assert(sizeof(TslCharacter_GetBulletSpawnOverride) == 0x000001, "Wrong size on TslCharacter_GetBulletSpawnOverride");
static_assert(offsetof(TslCharacter_GetBulletSpawnOverride, ReturnValue) == 0x000000, "Member 'TslCharacter_GetBulletSpawnOverride::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCameraAnimOverrideAlpha
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetCameraAnimOverrideAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCameraAnimOverrideAlpha) == 0x000004, "Wrong alignment on TslCharacter_GetCameraAnimOverrideAlpha");
static_assert(sizeof(TslCharacter_GetCameraAnimOverrideAlpha) == 0x000004, "Wrong size on TslCharacter_GetCameraAnimOverrideAlpha");
static_assert(offsetof(TslCharacter_GetCameraAnimOverrideAlpha, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCameraAnimOverrideAlpha::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCameraDOF
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetCameraDOF final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCameraDOF) == 0x000004, "Wrong alignment on TslCharacter_GetCameraDOF");
static_assert(sizeof(TslCharacter_GetCameraDOF) == 0x00000C, "Wrong size on TslCharacter_GetCameraDOF");
static_assert(offsetof(TslCharacter_GetCameraDOF, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCameraDOF::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCastObject
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetCastObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCastObject) == 0x000008, "Wrong alignment on TslCharacter_GetCastObject");
static_assert(sizeof(TslCharacter_GetCastObject) == 0x000008, "Wrong size on TslCharacter_GetCastObject");
static_assert(offsetof(TslCharacter_GetCastObject, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCastObject::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetComponentCanInteract
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetComponentCanInteract final
{
public:
	TScriptInterface<class IInteractionInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetComponentCanInteract) == 0x000008, "Wrong alignment on TslCharacter_GetComponentCanInteract");
static_assert(sizeof(TslCharacter_GetComponentCanInteract) == 0x000010, "Wrong size on TslCharacter_GetComponentCanInteract");
static_assert(offsetof(TslCharacter_GetComponentCanInteract, ReturnValue) == 0x000000, "Member 'TslCharacter_GetComponentCanInteract::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCtrlShortCutOnOff
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetCtrlShortCutOnOff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCtrlShortCutOnOff) == 0x000001, "Wrong alignment on TslCharacter_GetCtrlShortCutOnOff");
static_assert(sizeof(TslCharacter_GetCtrlShortCutOnOff) == 0x000001, "Wrong size on TslCharacter_GetCtrlShortCutOnOff");
static_assert(offsetof(TslCharacter_GetCtrlShortCutOnOff, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCtrlShortCutOnOff::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentHeightFromWaterFloor
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetCurrentHeightFromWaterFloor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentHeightFromWaterFloor) == 0x000004, "Wrong alignment on TslCharacter_GetCurrentHeightFromWaterFloor");
static_assert(sizeof(TslCharacter_GetCurrentHeightFromWaterFloor) == 0x000004, "Wrong size on TslCharacter_GetCurrentHeightFromWaterFloor");
static_assert(offsetof(TslCharacter_GetCurrentHeightFromWaterFloor, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentHeightFromWaterFloor::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentMagazineLocation
// 0x0030 (0x0030 - 0x0000)
struct TslCharacter_GetCurrentMagazineLocation final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentMagazineLocation) == 0x000010, "Wrong alignment on TslCharacter_GetCurrentMagazineLocation");
static_assert(sizeof(TslCharacter_GetCurrentMagazineLocation) == 0x000030, "Wrong size on TslCharacter_GetCurrentMagazineLocation");
static_assert(offsetof(TslCharacter_GetCurrentMagazineLocation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentMagazineLocation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentMagazineMesh
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetCurrentMagazineMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentMagazineMesh) == 0x000008, "Wrong alignment on TslCharacter_GetCurrentMagazineMesh");
static_assert(sizeof(TslCharacter_GetCurrentMagazineMesh) == 0x000008, "Wrong size on TslCharacter_GetCurrentMagazineMesh");
static_assert(offsetof(TslCharacter_GetCurrentMagazineMesh, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentMagazineMesh::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentWaterDepth
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetCurrentWaterDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentWaterDepth) == 0x000004, "Wrong alignment on TslCharacter_GetCurrentWaterDepth");
static_assert(sizeof(TslCharacter_GetCurrentWaterDepth) == 0x000004, "Wrong size on TslCharacter_GetCurrentWaterDepth");
static_assert(offsetof(TslCharacter_GetCurrentWaterDepth, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentWaterDepth::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentWaterSurfaceBaseZ
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetCurrentWaterSurfaceBaseZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentWaterSurfaceBaseZ) == 0x000004, "Wrong alignment on TslCharacter_GetCurrentWaterSurfaceBaseZ");
static_assert(sizeof(TslCharacter_GetCurrentWaterSurfaceBaseZ) == 0x000004, "Wrong size on TslCharacter_GetCurrentWaterSurfaceBaseZ");
static_assert(offsetof(TslCharacter_GetCurrentWaterSurfaceBaseZ, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentWaterSurfaceBaseZ::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentWaterSurfaceZ
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetCurrentWaterSurfaceZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentWaterSurfaceZ) == 0x000004, "Wrong alignment on TslCharacter_GetCurrentWaterSurfaceZ");
static_assert(sizeof(TslCharacter_GetCurrentWaterSurfaceZ) == 0x000004, "Wrong size on TslCharacter_GetCurrentWaterSurfaceZ");
static_assert(offsetof(TslCharacter_GetCurrentWaterSurfaceZ, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentWaterSurfaceZ::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetCurrentWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetCurrentWeapon) == 0x000008, "Wrong alignment on TslCharacter_GetCurrentWeapon");
static_assert(sizeof(TslCharacter_GetCurrentWeapon) == 0x000008, "Wrong size on TslCharacter_GetCurrentWeapon");
static_assert(offsetof(TslCharacter_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'TslCharacter_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetDesiredRotation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetDesiredRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetDesiredRotation) == 0x000004, "Wrong alignment on TslCharacter_GetDesiredRotation");
static_assert(sizeof(TslCharacter_GetDesiredRotation) == 0x00000C, "Wrong size on TslCharacter_GetDesiredRotation");
static_assert(offsetof(TslCharacter_GetDesiredRotation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetDesiredRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetDirectionalSpeedModifier
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetDirectionalSpeedModifier final
{
public:
	EMovementType                                 StanceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetDirectionalSpeedModifier) == 0x000004, "Wrong alignment on TslCharacter_GetDirectionalSpeedModifier");
static_assert(sizeof(TslCharacter_GetDirectionalSpeedModifier) == 0x000008, "Wrong size on TslCharacter_GetDirectionalSpeedModifier");
static_assert(offsetof(TslCharacter_GetDirectionalSpeedModifier, StanceType) == 0x000000, "Member 'TslCharacter_GetDirectionalSpeedModifier::StanceType' has a wrong offset!");
static_assert(offsetof(TslCharacter_GetDirectionalSpeedModifier, ReturnValue) == 0x000004, "Member 'TslCharacter_GetDirectionalSpeedModifier::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetDirectionString
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetDirectionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetDirectionString) == 0x000008, "Wrong alignment on TslCharacter_GetDirectionString");
static_assert(sizeof(TslCharacter_GetDirectionString) == 0x000010, "Wrong size on TslCharacter_GetDirectionString");
static_assert(offsetof(TslCharacter_GetDirectionString, ReturnValue) == 0x000000, "Member 'TslCharacter_GetDirectionString::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetDropPackageType
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetDropPackageType final
{
public:
	TSubclassOf<class AItemPackage>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetDropPackageType) == 0x000008, "Wrong alignment on TslCharacter_GetDropPackageType");
static_assert(sizeof(TslCharacter_GetDropPackageType) == 0x000008, "Wrong size on TslCharacter_GetDropPackageType");
static_assert(offsetof(TslCharacter_GetDropPackageType, ReturnValue) == 0x000000, "Member 'TslCharacter_GetDropPackageType::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetDynamicCrosshairHidden
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetDynamicCrosshairHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetDynamicCrosshairHidden) == 0x000001, "Wrong alignment on TslCharacter_GetDynamicCrosshairHidden");
static_assert(sizeof(TslCharacter_GetDynamicCrosshairHidden) == 0x000001, "Wrong size on TslCharacter_GetDynamicCrosshairHidden");
static_assert(offsetof(TslCharacter_GetDynamicCrosshairHidden, ReturnValue) == 0x000000, "Member 'TslCharacter_GetDynamicCrosshairHidden::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetFreelookDeltaRotation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetFreelookDeltaRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetFreelookDeltaRotation) == 0x000004, "Wrong alignment on TslCharacter_GetFreelookDeltaRotation");
static_assert(sizeof(TslCharacter_GetFreelookDeltaRotation) == 0x00000C, "Wrong size on TslCharacter_GetFreelookDeltaRotation");
static_assert(offsetof(TslCharacter_GetFreelookDeltaRotation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetFreelookDeltaRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetFreelookSavedRotation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetFreelookSavedRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetFreelookSavedRotation) == 0x000004, "Wrong alignment on TslCharacter_GetFreelookSavedRotation");
static_assert(sizeof(TslCharacter_GetFreelookSavedRotation) == 0x00000C, "Wrong size on TslCharacter_GetFreelookSavedRotation");
static_assert(offsetof(TslCharacter_GetFreelookSavedRotation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetFreelookSavedRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetIndoorFactor
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetIndoorFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetIndoorFactor) == 0x000004, "Wrong alignment on TslCharacter_GetIndoorFactor");
static_assert(sizeof(TslCharacter_GetIndoorFactor) == 0x000004, "Wrong size on TslCharacter_GetIndoorFactor");
static_assert(offsetof(TslCharacter_GetIndoorFactor, ReturnValue) == 0x000000, "Member 'TslCharacter_GetIndoorFactor::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetInteractionString
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetInteractionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetInteractionString) == 0x000008, "Wrong alignment on TslCharacter_GetInteractionString");
static_assert(sizeof(TslCharacter_GetInteractionString) == 0x000010, "Wrong size on TslCharacter_GetInteractionString");
static_assert(offsetof(TslCharacter_GetInteractionString, ReturnValue) == 0x000000, "Member 'TslCharacter_GetInteractionString::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetInteractObjectLocation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetInteractObjectLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetInteractObjectLocation) == 0x000004, "Wrong alignment on TslCharacter_GetInteractObjectLocation");
static_assert(sizeof(TslCharacter_GetInteractObjectLocation) == 0x00000C, "Wrong size on TslCharacter_GetInteractObjectLocation");
static_assert(offsetof(TslCharacter_GetInteractObjectLocation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetInteractObjectLocation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetLastMoveRotation
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetLastMoveRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetLastMoveRotation) == 0x000004, "Wrong alignment on TslCharacter_GetLastMoveRotation");
static_assert(sizeof(TslCharacter_GetLastMoveRotation) == 0x00000C, "Wrong size on TslCharacter_GetLastMoveRotation");
static_assert(offsetof(TslCharacter_GetLastMoveRotation, ReturnValue) == 0x000000, "Member 'TslCharacter_GetLastMoveRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetLeanLeftAlpha
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetLeanLeftAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetLeanLeftAlpha) == 0x000004, "Wrong alignment on TslCharacter_GetLeanLeftAlpha");
static_assert(sizeof(TslCharacter_GetLeanLeftAlpha) == 0x000004, "Wrong size on TslCharacter_GetLeanLeftAlpha");
static_assert(offsetof(TslCharacter_GetLeanLeftAlpha, ReturnValue) == 0x000000, "Member 'TslCharacter_GetLeanLeftAlpha::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetLeanRightAlpha
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetLeanRightAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetLeanRightAlpha) == 0x000004, "Wrong alignment on TslCharacter_GetLeanRightAlpha");
static_assert(sizeof(TslCharacter_GetLeanRightAlpha) == 0x000004, "Wrong size on TslCharacter_GetLeanRightAlpha");
static_assert(offsetof(TslCharacter_GetLeanRightAlpha, ReturnValue) == 0x000000, "Member 'TslCharacter_GetLeanRightAlpha::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetLocationString
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetLocationString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetLocationString) == 0x000008, "Wrong alignment on TslCharacter_GetLocationString");
static_assert(sizeof(TslCharacter_GetLocationString) == 0x000010, "Wrong size on TslCharacter_GetLocationString");
static_assert(offsetof(TslCharacter_GetLocationString, ReturnValue) == 0x000000, "Member 'TslCharacter_GetLocationString::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetMaxGroundSpeedOnSlope
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetMaxGroundSpeedOnSlope final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetMaxGroundSpeedOnSlope) == 0x000004, "Wrong alignment on TslCharacter_GetMaxGroundSpeedOnSlope");
static_assert(sizeof(TslCharacter_GetMaxGroundSpeedOnSlope) == 0x000004, "Wrong size on TslCharacter_GetMaxGroundSpeedOnSlope");
static_assert(offsetof(TslCharacter_GetMaxGroundSpeedOnSlope, ReturnValue) == 0x000000, "Member 'TslCharacter_GetMaxGroundSpeedOnSlope::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetMaxSprintSpeed
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetMaxSprintSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetMaxSprintSpeed) == 0x000004, "Wrong alignment on TslCharacter_GetMaxSprintSpeed");
static_assert(sizeof(TslCharacter_GetMaxSprintSpeed) == 0x000004, "Wrong size on TslCharacter_GetMaxSprintSpeed");
static_assert(offsetof(TslCharacter_GetMaxSprintSpeed, ReturnValue) == 0x000000, "Member 'TslCharacter_GetMaxSprintSpeed::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetObjectCanInteract
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetObjectCanInteract final
{
public:
	TScriptInterface<class IInteractionInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetObjectCanInteract) == 0x000008, "Wrong alignment on TslCharacter_GetObjectCanInteract");
static_assert(sizeof(TslCharacter_GetObjectCanInteract) == 0x000010, "Wrong size on TslCharacter_GetObjectCanInteract");
static_assert(offsetof(TslCharacter_GetObjectCanInteract, ReturnValue) == 0x000000, "Member 'TslCharacter_GetObjectCanInteract::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetParachute
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetParachute final
{
public:
	class AParachuteVehicle*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetParachute) == 0x000008, "Wrong alignment on TslCharacter_GetParachute");
static_assert(sizeof(TslCharacter_GetParachute) == 0x000008, "Wrong size on TslCharacter_GetParachute");
static_assert(offsetof(TslCharacter_GetParachute, ReturnValue) == 0x000000, "Member 'TslCharacter_GetParachute::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetParachuteLandingAssist
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetParachuteLandingAssist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetParachuteLandingAssist) == 0x000001, "Wrong alignment on TslCharacter_GetParachuteLandingAssist");
static_assert(sizeof(TslCharacter_GetParachuteLandingAssist) == 0x000001, "Wrong size on TslCharacter_GetParachuteLandingAssist");
static_assert(offsetof(TslCharacter_GetParachuteLandingAssist, ReturnValue) == 0x000000, "Member 'TslCharacter_GetParachuteLandingAssist::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetPlayerName) == 0x000008, "Wrong alignment on TslCharacter_GetPlayerName");
static_assert(sizeof(TslCharacter_GetPlayerName) == 0x000010, "Wrong size on TslCharacter_GetPlayerName");
static_assert(offsetof(TslCharacter_GetPlayerName, ReturnValue) == 0x000000, "Member 'TslCharacter_GetPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetRunningSpeedModifier_Crouch
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetRunningSpeedModifier_Crouch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetRunningSpeedModifier_Crouch) == 0x000004, "Wrong alignment on TslCharacter_GetRunningSpeedModifier_Crouch");
static_assert(sizeof(TslCharacter_GetRunningSpeedModifier_Crouch) == 0x000004, "Wrong size on TslCharacter_GetRunningSpeedModifier_Crouch");
static_assert(offsetof(TslCharacter_GetRunningSpeedModifier_Crouch, ReturnValue) == 0x000000, "Member 'TslCharacter_GetRunningSpeedModifier_Crouch::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetRunningSpeedModifier_Prone
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetRunningSpeedModifier_Prone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetRunningSpeedModifier_Prone) == 0x000004, "Wrong alignment on TslCharacter_GetRunningSpeedModifier_Prone");
static_assert(sizeof(TslCharacter_GetRunningSpeedModifier_Prone) == 0x000004, "Wrong size on TslCharacter_GetRunningSpeedModifier_Prone");
static_assert(offsetof(TslCharacter_GetRunningSpeedModifier_Prone, ReturnValue) == 0x000000, "Member 'TslCharacter_GetRunningSpeedModifier_Prone::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetRunningSpeedModifier_Stand
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetRunningSpeedModifier_Stand final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetRunningSpeedModifier_Stand) == 0x000004, "Wrong alignment on TslCharacter_GetRunningSpeedModifier_Stand");
static_assert(sizeof(TslCharacter_GetRunningSpeedModifier_Stand) == 0x000004, "Wrong size on TslCharacter_GetRunningSpeedModifier_Stand");
static_assert(offsetof(TslCharacter_GetRunningSpeedModifier_Stand, ReturnValue) == 0x000000, "Member 'TslCharacter_GetRunningSpeedModifier_Stand::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetServerVaultFinished
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetServerVaultFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetServerVaultFinished) == 0x000001, "Wrong alignment on TslCharacter_GetServerVaultFinished");
static_assert(sizeof(TslCharacter_GetServerVaultFinished) == 0x000001, "Wrong size on TslCharacter_GetServerVaultFinished");
static_assert(offsetof(TslCharacter_GetServerVaultFinished, ReturnValue) == 0x000000, "Member 'TslCharacter_GetServerVaultFinished::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetShortPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetShortPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetShortPlayerName) == 0x000008, "Wrong alignment on TslCharacter_GetShortPlayerName");
static_assert(sizeof(TslCharacter_GetShortPlayerName) == 0x000010, "Wrong size on TslCharacter_GetShortPlayerName");
static_assert(offsetof(TslCharacter_GetShortPlayerName, ReturnValue) == 0x000000, "Member 'TslCharacter_GetShortPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSpeedModifierByWeaponClass
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSpeedModifierByWeaponClass final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSpeedModifierByWeaponClass) == 0x000004, "Wrong alignment on TslCharacter_GetSpeedModifierByWeaponClass");
static_assert(sizeof(TslCharacter_GetSpeedModifierByWeaponClass) == 0x000004, "Wrong size on TslCharacter_GetSpeedModifierByWeaponClass");
static_assert(offsetof(TslCharacter_GetSpeedModifierByWeaponClass, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSpeedModifierByWeaponClass::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSprintCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSprintCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSprintCurrentValue) == 0x000004, "Wrong alignment on TslCharacter_GetSprintCurrentValue");
static_assert(sizeof(TslCharacter_GetSprintCurrentValue) == 0x000004, "Wrong size on TslCharacter_GetSprintCurrentValue");
static_assert(offsetof(TslCharacter_GetSprintCurrentValue, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSprintCurrentValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSprintingSpeedModifier_Crouch
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSprintingSpeedModifier_Crouch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSprintingSpeedModifier_Crouch) == 0x000004, "Wrong alignment on TslCharacter_GetSprintingSpeedModifier_Crouch");
static_assert(sizeof(TslCharacter_GetSprintingSpeedModifier_Crouch) == 0x000004, "Wrong size on TslCharacter_GetSprintingSpeedModifier_Crouch");
static_assert(offsetof(TslCharacter_GetSprintingSpeedModifier_Crouch, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSprintingSpeedModifier_Crouch::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSprintingSpeedModifier_Prone
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSprintingSpeedModifier_Prone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSprintingSpeedModifier_Prone) == 0x000004, "Wrong alignment on TslCharacter_GetSprintingSpeedModifier_Prone");
static_assert(sizeof(TslCharacter_GetSprintingSpeedModifier_Prone) == 0x000004, "Wrong size on TslCharacter_GetSprintingSpeedModifier_Prone");
static_assert(offsetof(TslCharacter_GetSprintingSpeedModifier_Prone, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSprintingSpeedModifier_Prone::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetSprintingSpeedModifier_Stand
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetSprintingSpeedModifier_Stand final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetSprintingSpeedModifier_Stand) == 0x000004, "Wrong alignment on TslCharacter_GetSprintingSpeedModifier_Stand");
static_assert(sizeof(TslCharacter_GetSprintingSpeedModifier_Stand) == 0x000004, "Wrong size on TslCharacter_GetSprintingSpeedModifier_Stand");
static_assert(offsetof(TslCharacter_GetSprintingSpeedModifier_Stand, ReturnValue) == 0x000000, "Member 'TslCharacter_GetSprintingSpeedModifier_Stand::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetStance
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetStance final
{
public:
	EStanceMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetStance) == 0x000001, "Wrong alignment on TslCharacter_GetStance");
static_assert(sizeof(TslCharacter_GetStance) == 0x000001, "Wrong size on TslCharacter_GetStance");
static_assert(offsetof(TslCharacter_GetStance, ReturnValue) == 0x000000, "Member 'TslCharacter_GetStance::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTargetingSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetTargetingSpeedModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTargetingSpeedModifier) == 0x000004, "Wrong alignment on TslCharacter_GetTargetingSpeedModifier");
static_assert(sizeof(TslCharacter_GetTargetingSpeedModifier) == 0x000004, "Wrong size on TslCharacter_GetTargetingSpeedModifier");
static_assert(offsetof(TslCharacter_GetTargetingSpeedModifier, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTargetingSpeedModifier::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTeam
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetTeam final
{
public:
	class ATeam*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTeam) == 0x000008, "Wrong alignment on TslCharacter_GetTeam");
static_assert(sizeof(TslCharacter_GetTeam) == 0x000008, "Wrong size on TslCharacter_GetTeam");
static_assert(offsetof(TslCharacter_GetTeam, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTeam::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTPPCameraCurve
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetTPPCameraCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTPPCameraCurve) == 0x000008, "Wrong alignment on TslCharacter_GetTPPCameraCurve");
static_assert(sizeof(TslCharacter_GetTPPCameraCurve) == 0x000008, "Wrong size on TslCharacter_GetTPPCameraCurve");
static_assert(offsetof(TslCharacter_GetTPPCameraCurve, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTPPCameraCurve::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTPPSpringarmOffset
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetTPPSpringarmOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTPPSpringarmOffset) == 0x000004, "Wrong alignment on TslCharacter_GetTPPSpringarmOffset");
static_assert(sizeof(TslCharacter_GetTPPSpringarmOffset) == 0x000004, "Wrong size on TslCharacter_GetTPPSpringarmOffset");
static_assert(offsetof(TslCharacter_GetTPPSpringarmOffset, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTPPSpringarmOffset::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTslCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetTslCharacterMovement final
{
public:
	class UTslCharacterMovement*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTslCharacterMovement) == 0x000008, "Wrong alignment on TslCharacter_GetTslCharacterMovement");
static_assert(sizeof(TslCharacter_GetTslCharacterMovement) == 0x000008, "Wrong size on TslCharacter_GetTslCharacterMovement");
static_assert(offsetof(TslCharacter_GetTslCharacterMovement, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTslCharacterMovement::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTslPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetTslPlayerController final
{
public:
	class ATslPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTslPlayerController) == 0x000008, "Wrong alignment on TslCharacter_GetTslPlayerController");
static_assert(sizeof(TslCharacter_GetTslPlayerController) == 0x000008, "Wrong size on TslCharacter_GetTslPlayerController");
static_assert(offsetof(TslCharacter_GetTslPlayerController, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTslPlayerController::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetTslPlayerState
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetTslPlayerState final
{
public:
	class ATslPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetTslPlayerState) == 0x000008, "Wrong alignment on TslCharacter_GetTslPlayerState");
static_assert(sizeof(TslCharacter_GetTslPlayerState) == 0x000008, "Wrong size on TslCharacter_GetTslPlayerState");
static_assert(offsetof(TslCharacter_GetTslPlayerState, ReturnValue) == 0x000000, "Member 'TslCharacter_GetTslPlayerState::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVaultingDataByEnum
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetVaultingDataByEnum final
{
public:
	EVaultAnimType                                InVaultType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVaultingData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVaultingDataByEnum) == 0x000008, "Wrong alignment on TslCharacter_GetVaultingDataByEnum");
static_assert(sizeof(TslCharacter_GetVaultingDataByEnum) == 0x000010, "Wrong size on TslCharacter_GetVaultingDataByEnum");
static_assert(offsetof(TslCharacter_GetVaultingDataByEnum, InVaultType) == 0x000000, "Member 'TslCharacter_GetVaultingDataByEnum::InVaultType' has a wrong offset!");
static_assert(offsetof(TslCharacter_GetVaultingDataByEnum, ReturnValue) == 0x000008, "Member 'TslCharacter_GetVaultingDataByEnum::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVaultingDirection
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetVaultingDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVaultingDirection) == 0x000004, "Wrong alignment on TslCharacter_GetVaultingDirection");
static_assert(sizeof(TslCharacter_GetVaultingDirection) == 0x000004, "Wrong size on TslCharacter_GetVaultingDirection");
static_assert(offsetof(TslCharacter_GetVaultingDirection, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVaultingDirection::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVaultTimer
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetVaultTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVaultTimer) == 0x000004, "Wrong alignment on TslCharacter_GetVaultTimer");
static_assert(sizeof(TslCharacter_GetVaultTimer) == 0x000004, "Wrong size on TslCharacter_GetVaultTimer");
static_assert(offsetof(TslCharacter_GetVaultTimer, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVaultTimer::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVehicleInterface
// 0x0010 (0x0010 - 0x0000)
struct TslCharacter_GetVehicleInterface final
{
public:
	TScriptInterface<class ITslVehicleInterface>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVehicleInterface) == 0x000008, "Wrong alignment on TslCharacter_GetVehicleInterface");
static_assert(sizeof(TslCharacter_GetVehicleInterface) == 0x000010, "Wrong size on TslCharacter_GetVehicleInterface");
static_assert(offsetof(TslCharacter_GetVehicleInterface, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVehicleInterface::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVehiclePawn
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetVehiclePawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVehiclePawn) == 0x000008, "Wrong alignment on TslCharacter_GetVehiclePawn");
static_assert(sizeof(TslCharacter_GetVehiclePawn) == 0x000008, "Wrong size on TslCharacter_GetVehiclePawn");
static_assert(offsetof(TslCharacter_GetVehiclePawn, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVehiclePawn::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVehicleRiderComponent
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetVehicleRiderComponent final
{
public:
	class UVehicleRiderComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVehicleRiderComponent) == 0x000008, "Wrong alignment on TslCharacter_GetVehicleRiderComponent");
static_assert(sizeof(TslCharacter_GetVehicleRiderComponent) == 0x000008, "Wrong size on TslCharacter_GetVehicleRiderComponent");
static_assert(offsetof(TslCharacter_GetVehicleRiderComponent, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVehicleRiderComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVehicleSeat
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetVehicleSeat final
{
public:
	class UVehicleSeatInteractionComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVehicleSeat) == 0x000008, "Wrong alignment on TslCharacter_GetVehicleSeat");
static_assert(sizeof(TslCharacter_GetVehicleSeat) == 0x000008, "Wrong size on TslCharacter_GetVehicleSeat");
static_assert(offsetof(TslCharacter_GetVehicleSeat, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVehicleSeat::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetVehicleSeatComponent
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetVehicleSeatComponent final
{
public:
	class UTslVehicleSeatComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetVehicleSeatComponent) == 0x000008, "Wrong alignment on TslCharacter_GetVehicleSeatComponent");
static_assert(sizeof(TslCharacter_GetVehicleSeatComponent) == 0x000008, "Wrong size on TslCharacter_GetVehicleSeatComponent");
static_assert(offsetof(TslCharacter_GetVehicleSeatComponent, ReturnValue) == 0x000000, "Member 'TslCharacter_GetVehicleSeatComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWantsToJump
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetWantsToJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWantsToJump) == 0x000001, "Wrong alignment on TslCharacter_GetWantsToJump");
static_assert(sizeof(TslCharacter_GetWantsToJump) == 0x000001, "Wrong size on TslCharacter_GetWantsToJump");
static_assert(offsetof(TslCharacter_GetWantsToJump, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWantsToJump::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeapon) == 0x000008, "Wrong alignment on TslCharacter_GetWeapon");
static_assert(sizeof(TslCharacter_GetWeapon) == 0x000008, "Wrong size on TslCharacter_GetWeapon");
static_assert(offsetof(TslCharacter_GetWeapon, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponADSTimeModifier
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetWeaponADSTimeModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponADSTimeModifier) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponADSTimeModifier");
static_assert(sizeof(TslCharacter_GetWeaponADSTimeModifier) == 0x000004, "Wrong size on TslCharacter_GetWeaponADSTimeModifier");
static_assert(offsetof(TslCharacter_GetWeaponADSTimeModifier, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponADSTimeModifier::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponGun
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetWeaponGun final
{
public:
	class ATslWeapon_Gun*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponGun) == 0x000008, "Wrong alignment on TslCharacter_GetWeaponGun");
static_assert(sizeof(TslCharacter_GetWeaponGun) == 0x000008, "Wrong size on TslCharacter_GetWeaponGun");
static_assert(offsetof(TslCharacter_GetWeaponGun, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponGun::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponGunCollisionAlpha
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetWeaponGunCollisionAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponGunCollisionAlpha) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponGunCollisionAlpha");
static_assert(sizeof(TslCharacter_GetWeaponGunCollisionAlpha) == 0x000004, "Wrong size on TslCharacter_GetWeaponGunCollisionAlpha");
static_assert(offsetof(TslCharacter_GetWeaponGunCollisionAlpha, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponGunCollisionAlpha::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponHandIK_Left
// 0x0030 (0x0030 - 0x0000)
struct TslCharacter_GetWeaponHandIK_Left final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponHandIK_Left) == 0x000010, "Wrong alignment on TslCharacter_GetWeaponHandIK_Left");
static_assert(sizeof(TslCharacter_GetWeaponHandIK_Left) == 0x000030, "Wrong size on TslCharacter_GetWeaponHandIK_Left");
static_assert(offsetof(TslCharacter_GetWeaponHandIK_Left, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponHandIK_Left::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponHandIK_Right
// 0x0030 (0x0030 - 0x0000)
struct TslCharacter_GetWeaponHandIK_Right final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponHandIK_Right) == 0x000010, "Wrong alignment on TslCharacter_GetWeaponHandIK_Right");
static_assert(sizeof(TslCharacter_GetWeaponHandIK_Right) == 0x000030, "Wrong size on TslCharacter_GetWeaponHandIK_Right");
static_assert(offsetof(TslCharacter_GetWeaponHandIK_Right, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponHandIK_Right::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponInertia
// 0x000C (0x000C - 0x0000)
struct TslCharacter_GetWeaponInertia final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponInertia) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponInertia");
static_assert(sizeof(TslCharacter_GetWeaponInertia) == 0x00000C, "Wrong size on TslCharacter_GetWeaponInertia");
static_assert(offsetof(TslCharacter_GetWeaponInertia, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponInertia::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponLeftHandIKTransform
// 0x0030 (0x0030 - 0x0000)
struct TslCharacter_GetWeaponLeftHandIKTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponLeftHandIKTransform) == 0x000010, "Wrong alignment on TslCharacter_GetWeaponLeftHandIKTransform");
static_assert(sizeof(TslCharacter_GetWeaponLeftHandIKTransform) == 0x000030, "Wrong size on TslCharacter_GetWeaponLeftHandIKTransform");
static_assert(offsetof(TslCharacter_GetWeaponLeftHandIKTransform, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponLeftHandIKTransform::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponMovementModifierAim
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetWeaponMovementModifierAim final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponMovementModifierAim) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponMovementModifierAim");
static_assert(sizeof(TslCharacter_GetWeaponMovementModifierAim) == 0x000004, "Wrong size on TslCharacter_GetWeaponMovementModifierAim");
static_assert(offsetof(TslCharacter_GetWeaponMovementModifierAim, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponMovementModifierAim::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponMovementModifierScope
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetWeaponMovementModifierScope final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponMovementModifierScope) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponMovementModifierScope");
static_assert(sizeof(TslCharacter_GetWeaponMovementModifierScope) == 0x000004, "Wrong size on TslCharacter_GetWeaponMovementModifierScope");
static_assert(offsetof(TslCharacter_GetWeaponMovementModifierScope, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponMovementModifierScope::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponObstructionRemote
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_GetWeaponObstructionRemote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponObstructionRemote) == 0x000001, "Wrong alignment on TslCharacter_GetWeaponObstructionRemote");
static_assert(sizeof(TslCharacter_GetWeaponObstructionRemote) == 0x000001, "Wrong size on TslCharacter_GetWeaponObstructionRemote");
static_assert(offsetof(TslCharacter_GetWeaponObstructionRemote, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponObstructionRemote::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponReloadPlayRate
// 0x0004 (0x0004 - 0x0000)
struct TslCharacter_GetWeaponReloadPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponReloadPlayRate) == 0x000004, "Wrong alignment on TslCharacter_GetWeaponReloadPlayRate");
static_assert(sizeof(TslCharacter_GetWeaponReloadPlayRate) == 0x000004, "Wrong size on TslCharacter_GetWeaponReloadPlayRate");
static_assert(offsetof(TslCharacter_GetWeaponReloadPlayRate, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponReloadPlayRate::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.GetWeaponThrowable
// 0x0008 (0x0008 - 0x0000)
struct TslCharacter_GetWeaponThrowable final
{
public:
	class ATslWeapon_Throwable*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_GetWeaponThrowable) == 0x000008, "Wrong alignment on TslCharacter_GetWeaponThrowable");
static_assert(sizeof(TslCharacter_GetWeaponThrowable) == 0x000008, "Wrong size on TslCharacter_GetWeaponThrowable");
static_assert(offsetof(TslCharacter_GetWeaponThrowable, ReturnValue) == 0x000000, "Member 'TslCharacter_GetWeaponThrowable::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.HasWeaponLeftHandIKSocket
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_HasWeaponLeftHandIKSocket final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_HasWeaponLeftHandIKSocket) == 0x000001, "Wrong alignment on TslCharacter_HasWeaponLeftHandIKSocket");
static_assert(sizeof(TslCharacter_HasWeaponLeftHandIKSocket) == 0x000001, "Wrong size on TslCharacter_HasWeaponLeftHandIKSocket");
static_assert(offsetof(TslCharacter_HasWeaponLeftHandIKSocket, ReturnValue) == 0x000000, "Member 'TslCharacter_HasWeaponLeftHandIKSocket::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsActiveRagdoll
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsActiveRagdoll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsActiveRagdoll) == 0x000001, "Wrong alignment on TslCharacter_IsActiveRagdoll");
static_assert(sizeof(TslCharacter_IsActiveRagdoll) == 0x000001, "Wrong size on TslCharacter_IsActiveRagdoll");
static_assert(offsetof(TslCharacter_IsActiveRagdoll, ReturnValue) == 0x000000, "Member 'TslCharacter_IsActiveRagdoll::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsAlive) == 0x000001, "Wrong alignment on TslCharacter_IsAlive");
static_assert(sizeof(TslCharacter_IsAlive) == 0x000001, "Wrong size on TslCharacter_IsAlive");
static_assert(offsetof(TslCharacter_IsAlive, ReturnValue) == 0x000000, "Member 'TslCharacter_IsAlive::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsAnimDynamicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsAnimDynamicsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsAnimDynamicsEnabled) == 0x000001, "Wrong alignment on TslCharacter_IsAnimDynamicsEnabled");
static_assert(sizeof(TslCharacter_IsAnimDynamicsEnabled) == 0x000001, "Wrong size on TslCharacter_IsAnimDynamicsEnabled");
static_assert(offsetof(TslCharacter_IsAnimDynamicsEnabled, ReturnValue) == 0x000000, "Member 'TslCharacter_IsAnimDynamicsEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsAttacked
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsAttacked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsAttacked) == 0x000001, "Wrong alignment on TslCharacter_IsAttacked");
static_assert(sizeof(TslCharacter_IsAttacked) == 0x000001, "Wrong size on TslCharacter_IsAttacked");
static_assert(offsetof(TslCharacter_IsAttacked, ReturnValue) == 0x000000, "Member 'TslCharacter_IsAttacked::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsAudioTestEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsAudioTestEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsAudioTestEnabled) == 0x000001, "Wrong alignment on TslCharacter_IsAudioTestEnabled");
static_assert(sizeof(TslCharacter_IsAudioTestEnabled) == 0x000001, "Wrong size on TslCharacter_IsAudioTestEnabled");
static_assert(offsetof(TslCharacter_IsAudioTestEnabled, ReturnValue) == 0x000000, "Member 'TslCharacter_IsAudioTestEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsCameraUnderwater
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsCameraUnderwater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsCameraUnderwater) == 0x000001, "Wrong alignment on TslCharacter_IsCameraUnderwater");
static_assert(sizeof(TslCharacter_IsCameraUnderwater) == 0x000001, "Wrong size on TslCharacter_IsCameraUnderwater");
static_assert(offsetof(TslCharacter_IsCameraUnderwater, ReturnValue) == 0x000000, "Member 'TslCharacter_IsCameraUnderwater::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsCasting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsCasting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsCasting) == 0x000001, "Wrong alignment on TslCharacter_IsCasting");
static_assert(sizeof(TslCharacter_IsCasting) == 0x000001, "Wrong size on TslCharacter_IsCasting");
static_assert(offsetof(TslCharacter_IsCasting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsCasting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsCoatEquipped
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsCoatEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsCoatEquipped) == 0x000001, "Wrong alignment on TslCharacter_IsCoatEquipped");
static_assert(sizeof(TslCharacter_IsCoatEquipped) == 0x000001, "Wrong size on TslCharacter_IsCoatEquipped");
static_assert(offsetof(TslCharacter_IsCoatEquipped, ReturnValue) == 0x000000, "Member 'TslCharacter_IsCoatEquipped::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsCycleInProgress
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsCycleInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsCycleInProgress) == 0x000001, "Wrong alignment on TslCharacter_IsCycleInProgress");
static_assert(sizeof(TslCharacter_IsCycleInProgress) == 0x000001, "Wrong size on TslCharacter_IsCycleInProgress");
static_assert(offsetof(TslCharacter_IsCycleInProgress, ReturnValue) == 0x000000, "Member 'TslCharacter_IsCycleInProgress::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsDying
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsDying) == 0x000001, "Wrong alignment on TslCharacter_IsDying");
static_assert(sizeof(TslCharacter_IsDying) == 0x000001, "Wrong size on TslCharacter_IsDying");
static_assert(offsetof(TslCharacter_IsDying, ReturnValue) == 0x000000, "Member 'TslCharacter_IsDying::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFallingFromHighAltitude
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFallingFromHighAltitude final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFallingFromHighAltitude) == 0x000001, "Wrong alignment on TslCharacter_IsFallingFromHighAltitude");
static_assert(sizeof(TslCharacter_IsFallingFromHighAltitude) == 0x000001, "Wrong size on TslCharacter_IsFallingFromHighAltitude");
static_assert(offsetof(TslCharacter_IsFallingFromHighAltitude, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFallingFromHighAltitude::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFallingWithParachute
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFallingWithParachute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFallingWithParachute) == 0x000001, "Wrong alignment on TslCharacter_IsFallingWithParachute");
static_assert(sizeof(TslCharacter_IsFallingWithParachute) == 0x000001, "Wrong size on TslCharacter_IsFallingWithParachute");
static_assert(offsetof(TslCharacter_IsFallingWithParachute, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFallingWithParachute::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFiring) == 0x000001, "Wrong alignment on TslCharacter_IsFiring");
static_assert(sizeof(TslCharacter_IsFiring) == 0x000001, "Wrong size on TslCharacter_IsFiring");
static_assert(offsetof(TslCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on TslCharacter_IsFirstPerson");
static_assert(sizeof(TslCharacter_IsFirstPerson) == 0x000001, "Wrong size on TslCharacter_IsFirstPerson");
static_assert(offsetof(TslCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFloating
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFloating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFloating) == 0x000001, "Wrong alignment on TslCharacter_IsFloating");
static_assert(sizeof(TslCharacter_IsFloating) == 0x000001, "Wrong size on TslCharacter_IsFloating");
static_assert(offsetof(TslCharacter_IsFloating, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFloating::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsForcedProneAfterFall
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsForcedProneAfterFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsForcedProneAfterFall) == 0x000001, "Wrong alignment on TslCharacter_IsForcedProneAfterFall");
static_assert(sizeof(TslCharacter_IsForcedProneAfterFall) == 0x000001, "Wrong size on TslCharacter_IsForcedProneAfterFall");
static_assert(offsetof(TslCharacter_IsForcedProneAfterFall, ReturnValue) == 0x000000, "Member 'TslCharacter_IsForcedProneAfterFall::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsForceRotation
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsForceRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsForceRotation) == 0x000001, "Wrong alignment on TslCharacter_IsForceRotation");
static_assert(sizeof(TslCharacter_IsForceRotation) == 0x000001, "Wrong size on TslCharacter_IsForceRotation");
static_assert(offsetof(TslCharacter_IsForceRotation, ReturnValue) == 0x000000, "Member 'TslCharacter_IsForceRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsForcingFall
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsForcingFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsForcingFall) == 0x000001, "Wrong alignment on TslCharacter_IsForcingFall");
static_assert(sizeof(TslCharacter_IsForcingFall) == 0x000001, "Wrong size on TslCharacter_IsForcingFall");
static_assert(offsetof(TslCharacter_IsForcingFall, ReturnValue) == 0x000000, "Member 'TslCharacter_IsForcingFall::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsFreelooking
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsFreelooking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsFreelooking) == 0x000001, "Wrong alignment on TslCharacter_IsFreelooking");
static_assert(sizeof(TslCharacter_IsFreelooking) == 0x000001, "Wrong size on TslCharacter_IsFreelooking");
static_assert(offsetof(TslCharacter_IsFreelooking, ReturnValue) == 0x000000, "Member 'TslCharacter_IsFreelooking::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsGroggying
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsGroggying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsGroggying) == 0x000001, "Wrong alignment on TslCharacter_IsGroggying");
static_assert(sizeof(TslCharacter_IsGroggying) == 0x000001, "Wrong size on TslCharacter_IsGroggying");
static_assert(offsetof(TslCharacter_IsGroggying, ReturnValue) == 0x000000, "Member 'TslCharacter_IsGroggying::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsHipped
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsHipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsHipped) == 0x000001, "Wrong alignment on TslCharacter_IsHipped");
static_assert(sizeof(TslCharacter_IsHipped) == 0x000001, "Wrong size on TslCharacter_IsHipped");
static_assert(offsetof(TslCharacter_IsHipped, ReturnValue) == 0x000000, "Member 'TslCharacter_IsHipped::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsHitted
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsHitted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsHitted) == 0x000001, "Wrong alignment on TslCharacter_IsHitted");
static_assert(sizeof(TslCharacter_IsHitted) == 0x000001, "Wrong size on TslCharacter_IsHitted");
static_assert(offsetof(TslCharacter_IsHitted, ReturnValue) == 0x000000, "Member 'TslCharacter_IsHitted::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsHoldingBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsHoldingBreath) == 0x000001, "Wrong alignment on TslCharacter_IsHoldingBreath");
static_assert(sizeof(TslCharacter_IsHoldingBreath) == 0x000001, "Wrong size on TslCharacter_IsHoldingBreath");
static_assert(offsetof(TslCharacter_IsHoldingBreath, ReturnValue) == 0x000000, "Member 'TslCharacter_IsHoldingBreath::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsInAircraft
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsInAircraft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsInAircraft) == 0x000001, "Wrong alignment on TslCharacter_IsInAircraft");
static_assert(sizeof(TslCharacter_IsInAircraft) == 0x000001, "Wrong size on TslCharacter_IsInAircraft");
static_assert(offsetof(TslCharacter_IsInAircraft, ReturnValue) == 0x000000, "Member 'TslCharacter_IsInAircraft::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsIndoor
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsIndoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsIndoor) == 0x000001, "Wrong alignment on TslCharacter_IsIndoor");
static_assert(sizeof(TslCharacter_IsIndoor) == 0x000001, "Wrong size on TslCharacter_IsIndoor");
static_assert(offsetof(TslCharacter_IsIndoor, ReturnValue) == 0x000000, "Member 'TslCharacter_IsIndoor::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsInteracting) == 0x000001, "Wrong alignment on TslCharacter_IsInteracting");
static_assert(sizeof(TslCharacter_IsInteracting) == 0x000001, "Wrong size on TslCharacter_IsInteracting");
static_assert(offsetof(TslCharacter_IsInteracting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsInteracting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsInVehicle
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsInVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsInVehicle) == 0x000001, "Wrong alignment on TslCharacter_IsInVehicle");
static_assert(sizeof(TslCharacter_IsInVehicle) == 0x000001, "Wrong size on TslCharacter_IsInVehicle");
static_assert(offsetof(TslCharacter_IsInVehicle, ReturnValue) == 0x000000, "Member 'TslCharacter_IsInVehicle::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsInWaterVolume
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsInWaterVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsInWaterVolume) == 0x000001, "Wrong alignment on TslCharacter_IsInWaterVolume");
static_assert(sizeof(TslCharacter_IsInWaterVolume) == 0x000001, "Wrong size on TslCharacter_IsInWaterVolume");
static_assert(offsetof(TslCharacter_IsInWaterVolume, ReturnValue) == 0x000000, "Member 'TslCharacter_IsInWaterVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsLocalOrSpectating
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsLocalOrSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsLocalOrSpectating) == 0x000001, "Wrong alignment on TslCharacter_IsLocalOrSpectating");
static_assert(sizeof(TslCharacter_IsLocalOrSpectating) == 0x000001, "Wrong size on TslCharacter_IsLocalOrSpectating");
static_assert(offsetof(TslCharacter_IsLocalOrSpectating, ReturnValue) == 0x000000, "Member 'TslCharacter_IsLocalOrSpectating::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsMagazineGunAttached
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsMagazineGunAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsMagazineGunAttached) == 0x000001, "Wrong alignment on TslCharacter_IsMagazineGunAttached");
static_assert(sizeof(TslCharacter_IsMagazineGunAttached) == 0x000001, "Wrong size on TslCharacter_IsMagazineGunAttached");
static_assert(offsetof(TslCharacter_IsMagazineGunAttached, ReturnValue) == 0x000000, "Member 'TslCharacter_IsMagazineGunAttached::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsMagazineHandAttached
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsMagazineHandAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsMagazineHandAttached) == 0x000001, "Wrong alignment on TslCharacter_IsMagazineHandAttached");
static_assert(sizeof(TslCharacter_IsMagazineHandAttached) == 0x000001, "Wrong size on TslCharacter_IsMagazineHandAttached");
static_assert(offsetof(TslCharacter_IsMagazineHandAttached, ReturnValue) == 0x000000, "Member 'TslCharacter_IsMagazineHandAttached::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsMeleeAttacking
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsMeleeAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsMeleeAttacking) == 0x000001, "Wrong alignment on TslCharacter_IsMeleeAttacking");
static_assert(sizeof(TslCharacter_IsMeleeAttacking) == 0x000001, "Wrong size on TslCharacter_IsMeleeAttacking");
static_assert(offsetof(TslCharacter_IsMeleeAttacking, ReturnValue) == 0x000000, "Member 'TslCharacter_IsMeleeAttacking::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsMouseUse
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsMouseUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsMouseUse) == 0x000001, "Wrong alignment on TslCharacter_IsMouseUse");
static_assert(sizeof(TslCharacter_IsMouseUse) == 0x000001, "Wrong size on TslCharacter_IsMouseUse");
static_assert(offsetof(TslCharacter_IsMouseUse, ReturnValue) == 0x000000, "Member 'TslCharacter_IsMouseUse::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsMoving) == 0x000001, "Wrong alignment on TslCharacter_IsMoving");
static_assert(sizeof(TslCharacter_IsMoving) == 0x000001, "Wrong size on TslCharacter_IsMoving");
static_assert(offsetof(TslCharacter_IsMoving, ReturnValue) == 0x000000, "Member 'TslCharacter_IsMoving::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsParachuting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsParachuting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsParachuting) == 0x000001, "Wrong alignment on TslCharacter_IsParachuting");
static_assert(sizeof(TslCharacter_IsParachuting) == 0x000001, "Wrong size on TslCharacter_IsParachuting");
static_assert(offsetof(TslCharacter_IsParachuting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsParachuting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsPeekLeft
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsPeekLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsPeekLeft) == 0x000001, "Wrong alignment on TslCharacter_IsPeekLeft");
static_assert(sizeof(TslCharacter_IsPeekLeft) == 0x000001, "Wrong size on TslCharacter_IsPeekLeft");
static_assert(offsetof(TslCharacter_IsPeekLeft, ReturnValue) == 0x000000, "Member 'TslCharacter_IsPeekLeft::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsPeekRight
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsPeekRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsPeekRight) == 0x000001, "Wrong alignment on TslCharacter_IsPeekRight");
static_assert(sizeof(TslCharacter_IsPeekRight) == 0x000001, "Wrong size on TslCharacter_IsPeekRight");
static_assert(offsetof(TslCharacter_IsPeekRight, ReturnValue) == 0x000000, "Member 'TslCharacter_IsPeekRight::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsPlayingPickUpAnimation
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsPlayingPickUpAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsPlayingPickUpAnimation) == 0x000001, "Wrong alignment on TslCharacter_IsPlayingPickUpAnimation");
static_assert(sizeof(TslCharacter_IsPlayingPickUpAnimation) == 0x000001, "Wrong size on TslCharacter_IsPlayingPickUpAnimation");
static_assert(offsetof(TslCharacter_IsPlayingPickUpAnimation, ReturnValue) == 0x000000, "Member 'TslCharacter_IsPlayingPickUpAnimation::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsQuickThrowHigh
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsQuickThrowHigh final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsQuickThrowHigh) == 0x000001, "Wrong alignment on TslCharacter_IsQuickThrowHigh");
static_assert(sizeof(TslCharacter_IsQuickThrowHigh) == 0x000001, "Wrong size on TslCharacter_IsQuickThrowHigh");
static_assert(offsetof(TslCharacter_IsQuickThrowHigh, ReturnValue) == 0x000000, "Member 'TslCharacter_IsQuickThrowHigh::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsQuitter
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsQuitter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsQuitter) == 0x000001, "Wrong alignment on TslCharacter_IsQuitter");
static_assert(sizeof(TslCharacter_IsQuitter) == 0x000001, "Wrong size on TslCharacter_IsQuitter");
static_assert(offsetof(TslCharacter_IsQuitter, ReturnValue) == 0x000000, "Member 'TslCharacter_IsQuitter::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsReviving
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsReviving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsReviving) == 0x000001, "Wrong alignment on TslCharacter_IsReviving");
static_assert(sizeof(TslCharacter_IsReviving) == 0x000001, "Wrong size on TslCharacter_IsReviving");
static_assert(offsetof(TslCharacter_IsReviving, ReturnValue) == 0x000000, "Member 'TslCharacter_IsReviving::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsRolling
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsRolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsRolling) == 0x000001, "Wrong alignment on TslCharacter_IsRolling");
static_assert(sizeof(TslCharacter_IsRolling) == 0x000001, "Wrong size on TslCharacter_IsRolling");
static_assert(offsetof(TslCharacter_IsRolling, ReturnValue) == 0x000000, "Member 'TslCharacter_IsRolling::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsRunning) == 0x000001, "Wrong alignment on TslCharacter_IsRunning");
static_assert(sizeof(TslCharacter_IsRunning) == 0x000001, "Wrong size on TslCharacter_IsRunning");
static_assert(offsetof(TslCharacter_IsRunning, ReturnValue) == 0x000000, "Member 'TslCharacter_IsRunning::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsScoping
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsScoping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsScoping) == 0x000001, "Wrong alignment on TslCharacter_IsScoping");
static_assert(sizeof(TslCharacter_IsScoping) == 0x000001, "Wrong size on TslCharacter_IsScoping");
static_assert(offsetof(TslCharacter_IsScoping, ReturnValue) == 0x000000, "Member 'TslCharacter_IsScoping::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsSitting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsSitting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsSitting) == 0x000001, "Wrong alignment on TslCharacter_IsSitting");
static_assert(sizeof(TslCharacter_IsSitting) == 0x000001, "Wrong size on TslCharacter_IsSitting");
static_assert(offsetof(TslCharacter_IsSitting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsSitting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsSpectatingCharacter
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsSpectatingCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsSpectatingCharacter) == 0x000001, "Wrong alignment on TslCharacter_IsSpectatingCharacter");
static_assert(sizeof(TslCharacter_IsSpectatingCharacter) == 0x000001, "Wrong size on TslCharacter_IsSpectatingCharacter");
static_assert(offsetof(TslCharacter_IsSpectatingCharacter, ReturnValue) == 0x000000, "Member 'TslCharacter_IsSpectatingCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsSprinting) == 0x000001, "Wrong alignment on TslCharacter_IsSprinting");
static_assert(sizeof(TslCharacter_IsSprinting) == 0x000001, "Wrong size on TslCharacter_IsSprinting");
static_assert(offsetof(TslCharacter_IsSprinting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsSprinting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsSwimming
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsSwimming) == 0x000001, "Wrong alignment on TslCharacter_IsSwimming");
static_assert(sizeof(TslCharacter_IsSwimming) == 0x000001, "Wrong size on TslCharacter_IsSwimming");
static_assert(offsetof(TslCharacter_IsSwimming, ReturnValue) == 0x000000, "Member 'TslCharacter_IsSwimming::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsTargeting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsTargeting) == 0x000001, "Wrong alignment on TslCharacter_IsTargeting");
static_assert(sizeof(TslCharacter_IsTargeting) == 0x000001, "Wrong size on TslCharacter_IsTargeting");
static_assert(offsetof(TslCharacter_IsTargeting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsTargeting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsTeamMatch
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsTeamMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsTeamMatch) == 0x000001, "Wrong alignment on TslCharacter_IsTeamMatch");
static_assert(sizeof(TslCharacter_IsTeamMatch) == 0x000001, "Wrong size on TslCharacter_IsTeamMatch");
static_assert(offsetof(TslCharacter_IsTeamMatch, ReturnValue) == 0x000000, "Member 'TslCharacter_IsTeamMatch::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsUnderRoof
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsUnderRoof final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsUnderRoof) == 0x000001, "Wrong alignment on TslCharacter_IsUnderRoof");
static_assert(sizeof(TslCharacter_IsUnderRoof) == 0x000001, "Wrong size on TslCharacter_IsUnderRoof");
static_assert(offsetof(TslCharacter_IsUnderRoof, ReturnValue) == 0x000000, "Member 'TslCharacter_IsUnderRoof::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsUnderwater
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsUnderwater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsUnderwater) == 0x000001, "Wrong alignment on TslCharacter_IsUnderwater");
static_assert(sizeof(TslCharacter_IsUnderwater) == 0x000001, "Wrong size on TslCharacter_IsUnderwater");
static_assert(offsetof(TslCharacter_IsUnderwater, ReturnValue) == 0x000000, "Member 'TslCharacter_IsUnderwater::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsUpperCollision
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsUpperCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsUpperCollision) == 0x000001, "Wrong alignment on TslCharacter_IsUpperCollision");
static_assert(sizeof(TslCharacter_IsUpperCollision) == 0x000001, "Wrong size on TslCharacter_IsUpperCollision");
static_assert(offsetof(TslCharacter_IsUpperCollision, ReturnValue) == 0x000000, "Member 'TslCharacter_IsUpperCollision::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsUsingRightShoulderAiming
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsUsingRightShoulderAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsUsingRightShoulderAiming) == 0x000001, "Wrong alignment on TslCharacter_IsUsingRightShoulderAiming");
static_assert(sizeof(TslCharacter_IsUsingRightShoulderAiming) == 0x000001, "Wrong size on TslCharacter_IsUsingRightShoulderAiming");
static_assert(offsetof(TslCharacter_IsUsingRightShoulderAiming, ReturnValue) == 0x000000, "Member 'TslCharacter_IsUsingRightShoulderAiming::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVaultCancelled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVaultCancelled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVaultCancelled) == 0x000001, "Wrong alignment on TslCharacter_IsVaultCancelled");
static_assert(sizeof(TslCharacter_IsVaultCancelled) == 0x000001, "Wrong size on TslCharacter_IsVaultCancelled");
static_assert(offsetof(TslCharacter_IsVaultCancelled, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVaultCancelled::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVaulting) == 0x000001, "Wrong alignment on TslCharacter_IsVaulting");
static_assert(sizeof(TslCharacter_IsVaulting) == 0x000001, "Wrong size on TslCharacter_IsVaulting");
static_assert(offsetof(TslCharacter_IsVaulting, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVaulting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVaultingDebugEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVaultingDebugEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVaultingDebugEnabled) == 0x000001, "Wrong alignment on TslCharacter_IsVaultingDebugEnabled");
static_assert(sizeof(TslCharacter_IsVaultingDebugEnabled) == 0x000001, "Wrong size on TslCharacter_IsVaultingDebugEnabled");
static_assert(offsetof(TslCharacter_IsVaultingDebugEnabled, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVaultingDebugEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVaultingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVaultingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVaultingEnabled) == 0x000001, "Wrong alignment on TslCharacter_IsVaultingEnabled");
static_assert(sizeof(TslCharacter_IsVaultingEnabled) == 0x000001, "Wrong size on TslCharacter_IsVaultingEnabled");
static_assert(offsetof(TslCharacter_IsVaultingEnabled, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVaultingEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVehicleDriver
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVehicleDriver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVehicleDriver) == 0x000001, "Wrong alignment on TslCharacter_IsVehicleDriver");
static_assert(sizeof(TslCharacter_IsVehicleDriver) == 0x000001, "Wrong size on TslCharacter_IsVehicleDriver");
static_assert(offsetof(TslCharacter_IsVehicleDriver, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVehicleDriver::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsVehiclePassenger
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsVehiclePassenger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsVehiclePassenger) == 0x000001, "Wrong alignment on TslCharacter_IsVehiclePassenger");
static_assert(sizeof(TslCharacter_IsVehiclePassenger) == 0x000001, "Wrong size on TslCharacter_IsVehiclePassenger");
static_assert(offsetof(TslCharacter_IsVehiclePassenger, ReturnValue) == 0x000000, "Member 'TslCharacter_IsVehiclePassenger::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsWeaponArmed
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsWeaponArmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsWeaponArmed) == 0x000001, "Wrong alignment on TslCharacter_IsWeaponArmed");
static_assert(sizeof(TslCharacter_IsWeaponArmed) == 0x000001, "Wrong size on TslCharacter_IsWeaponArmed");
static_assert(offsetof(TslCharacter_IsWeaponArmed, ReturnValue) == 0x000000, "Member 'TslCharacter_IsWeaponArmed::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsWeaponUsingHighMagnificationScope
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsWeaponUsingHighMagnificationScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsWeaponUsingHighMagnificationScope) == 0x000001, "Wrong alignment on TslCharacter_IsWeaponUsingHighMagnificationScope");
static_assert(sizeof(TslCharacter_IsWeaponUsingHighMagnificationScope) == 0x000001, "Wrong size on TslCharacter_IsWeaponUsingHighMagnificationScope");
static_assert(offsetof(TslCharacter_IsWeaponUsingHighMagnificationScope, ReturnValue) == 0x000000, "Member 'TslCharacter_IsWeaponUsingHighMagnificationScope::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsZombie
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsZombie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsZombie) == 0x000001, "Wrong alignment on TslCharacter_IsZombie");
static_assert(sizeof(TslCharacter_IsZombie) == 0x000001, "Wrong size on TslCharacter_IsZombie");
static_assert(offsetof(TslCharacter_IsZombie, ReturnValue) == 0x000000, "Member 'TslCharacter_IsZombie::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.IsZooming
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_IsZooming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_IsZooming) == 0x000001, "Wrong alignment on TslCharacter_IsZooming");
static_assert(sizeof(TslCharacter_IsZooming) == 0x000001, "Wrong size on TslCharacter_IsZooming");
static_assert(offsetof(TslCharacter_IsZooming, ReturnValue) == 0x000000, "Member 'TslCharacter_IsZooming::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.TickOptimization_IsOverMinimumDistance
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_TickOptimization_IsOverMinimumDistance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_TickOptimization_IsOverMinimumDistance) == 0x000001, "Wrong alignment on TslCharacter_TickOptimization_IsOverMinimumDistance");
static_assert(sizeof(TslCharacter_TickOptimization_IsOverMinimumDistance) == 0x000001, "Wrong size on TslCharacter_TickOptimization_IsOverMinimumDistance");
static_assert(offsetof(TslCharacter_TickOptimization_IsOverMinimumDistance, ReturnValue) == 0x000000, "Member 'TslCharacter_TickOptimization_IsOverMinimumDistance::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.TickOptimization_ShouldRunAnimUpdate
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_TickOptimization_ShouldRunAnimUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_TickOptimization_ShouldRunAnimUpdate) == 0x000001, "Wrong alignment on TslCharacter_TickOptimization_ShouldRunAnimUpdate");
static_assert(sizeof(TslCharacter_TickOptimization_ShouldRunAnimUpdate) == 0x000001, "Wrong size on TslCharacter_TickOptimization_ShouldRunAnimUpdate");
static_assert(offsetof(TslCharacter_TickOptimization_ShouldRunAnimUpdate, ReturnValue) == 0x000000, "Member 'TslCharacter_TickOptimization_ShouldRunAnimUpdate::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacter.TickOptimization_ShouldRunMovementUpdate
// 0x0001 (0x0001 - 0x0000)
struct TslCharacter_TickOptimization_ShouldRunMovementUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacter_TickOptimization_ShouldRunMovementUpdate) == 0x000001, "Wrong alignment on TslCharacter_TickOptimization_ShouldRunMovementUpdate");
static_assert(sizeof(TslCharacter_TickOptimization_ShouldRunMovementUpdate) == 0x000001, "Wrong size on TslCharacter_TickOptimization_ShouldRunMovementUpdate");
static_assert(offsetof(TslCharacter_TickOptimization_ShouldRunMovementUpdate, ReturnValue) == 0x000000, "Member 'TslCharacter_TickOptimization_ShouldRunMovementUpdate::ReturnValue' has a wrong offset!");

// Function TslGame.ObserverTagWidget.SetCharacterIconPosition_UC
// 0x000C (0x000C - 0x0000)
struct ObserverTagWidget_SetCharacterIconPosition_UC final
{
public:
	struct FVector2D                              Pos_UC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObserverTagWidget_SetCharacterIconPosition_UC) == 0x000004, "Wrong alignment on ObserverTagWidget_SetCharacterIconPosition_UC");
static_assert(sizeof(ObserverTagWidget_SetCharacterIconPosition_UC) == 0x00000C, "Wrong size on ObserverTagWidget_SetCharacterIconPosition_UC");
static_assert(offsetof(ObserverTagWidget_SetCharacterIconPosition_UC, Pos_UC) == 0x000000, "Member 'ObserverTagWidget_SetCharacterIconPosition_UC::Pos_UC' has a wrong offset!");
static_assert(offsetof(ObserverTagWidget_SetCharacterIconPosition_UC, IsHidden) == 0x000008, "Member 'ObserverTagWidget_SetCharacterIconPosition_UC::IsHidden' has a wrong offset!");

// Function TslGame.ObserverTagWidget.IsLastSpectatedCharacter
// 0x0001 (0x0001 - 0x0000)
struct ObserverTagWidget_IsLastSpectatedCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObserverTagWidget_IsLastSpectatedCharacter) == 0x000001, "Wrong alignment on ObserverTagWidget_IsLastSpectatedCharacter");
static_assert(sizeof(ObserverTagWidget_IsLastSpectatedCharacter) == 0x000001, "Wrong size on ObserverTagWidget_IsLastSpectatedCharacter");
static_assert(offsetof(ObserverTagWidget_IsLastSpectatedCharacter, ReturnValue) == 0x000000, "Member 'ObserverTagWidget_IsLastSpectatedCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.ObserverTagWidget.IsTeamMember
// 0x0001 (0x0001 - 0x0000)
struct ObserverTagWidget_IsTeamMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObserverTagWidget_IsTeamMember) == 0x000001, "Wrong alignment on ObserverTagWidget_IsTeamMember");
static_assert(sizeof(ObserverTagWidget_IsTeamMember) == 0x000001, "Wrong size on ObserverTagWidget_IsTeamMember");
static_assert(offsetof(ObserverTagWidget_IsTeamMember, ReturnValue) == 0x000000, "Member 'ObserverTagWidget_IsTeamMember::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleInterface.GetTslPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleInterface_GetTslPlayerController final
{
public:
	class ATslPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleInterface_GetTslPlayerController) == 0x000008, "Wrong alignment on TslVehicleInterface_GetTslPlayerController");
static_assert(sizeof(TslVehicleInterface_GetTslPlayerController) == 0x000008, "Wrong size on TslVehicleInterface_GetTslPlayerController");
static_assert(offsetof(TslVehicleInterface_GetTslPlayerController, ReturnValue) == 0x000000, "Member 'TslVehicleInterface_GetTslPlayerController::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleInterface.GetVehicleMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleInterface_GetVehicleMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleInterface_GetVehicleMeshComponent) == 0x000008, "Wrong alignment on TslVehicleInterface_GetVehicleMeshComponent");
static_assert(sizeof(TslVehicleInterface_GetVehicleMeshComponent) == 0x000008, "Wrong size on TslVehicleInterface_GetVehicleMeshComponent");
static_assert(offsetof(TslVehicleInterface_GetVehicleMeshComponent, ReturnValue) == 0x000000, "Member 'TslVehicleInterface_GetVehicleMeshComponent::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct ParachuteVehicle_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ParachuteVehicle_AllowInteractBy) == 0x000008, "Wrong alignment on ParachuteVehicle_AllowInteractBy");
static_assert(sizeof(ParachuteVehicle_AllowInteractBy) == 0x000010, "Wrong size on ParachuteVehicle_AllowInteractBy");
static_assert(offsetof(ParachuteVehicle_AllowInteractBy, Character) == 0x000000, "Member 'ParachuteVehicle_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(ParachuteVehicle_AllowInteractBy, ReturnValue) == 0x000008, "Member 'ParachuteVehicle_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.AllowSecondInteractBy
// 0x0010 (0x0010 - 0x0000)
struct ParachuteVehicle_AllowSecondInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ParachuteVehicle_AllowSecondInteractBy) == 0x000008, "Wrong alignment on ParachuteVehicle_AllowSecondInteractBy");
static_assert(sizeof(ParachuteVehicle_AllowSecondInteractBy) == 0x000010, "Wrong size on ParachuteVehicle_AllowSecondInteractBy");
static_assert(offsetof(ParachuteVehicle_AllowSecondInteractBy, Character) == 0x000000, "Member 'ParachuteVehicle_AllowSecondInteractBy::Character' has a wrong offset!");
static_assert(offsetof(ParachuteVehicle_AllowSecondInteractBy, ReturnValue) == 0x000008, "Member 'ParachuteVehicle_AllowSecondInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.OnInteractBy
// 0x0008 (0x0008 - 0x0000)
struct ParachuteVehicle_OnInteractBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_OnInteractBy) == 0x000008, "Wrong alignment on ParachuteVehicle_OnInteractBy");
static_assert(sizeof(ParachuteVehicle_OnInteractBy) == 0x000008, "Wrong size on ParachuteVehicle_OnInteractBy");
static_assert(offsetof(ParachuteVehicle_OnInteractBy, Character) == 0x000000, "Member 'ParachuteVehicle_OnInteractBy::Character' has a wrong offset!");

// Function TslGame.ParachuteVehicle.OnRide
// 0x0010 (0x0010 - 0x0000)
struct ParachuteVehicle_OnRide final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_OnRide) == 0x000008, "Wrong alignment on ParachuteVehicle_OnRide");
static_assert(sizeof(ParachuteVehicle_OnRide) == 0x000010, "Wrong size on ParachuteVehicle_OnRide");
static_assert(offsetof(ParachuteVehicle_OnRide, Rider) == 0x000000, "Member 'ParachuteVehicle_OnRide::Rider' has a wrong offset!");
static_assert(offsetof(ParachuteVehicle_OnRide, Seat) == 0x000008, "Member 'ParachuteVehicle_OnRide::Seat' has a wrong offset!");

// Function TslGame.ParachuteVehicle.OnSecondInteractBy
// 0x0008 (0x0008 - 0x0000)
struct ParachuteVehicle_OnSecondInteractBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_OnSecondInteractBy) == 0x000008, "Wrong alignment on ParachuteVehicle_OnSecondInteractBy");
static_assert(sizeof(ParachuteVehicle_OnSecondInteractBy) == 0x000008, "Wrong size on ParachuteVehicle_OnSecondInteractBy");
static_assert(offsetof(ParachuteVehicle_OnSecondInteractBy, Character) == 0x000000, "Member 'ParachuteVehicle_OnSecondInteractBy::Character' has a wrong offset!");

// Function TslGame.ParachuteVehicle.PhysicsVolumeChanged
// 0x0008 (0x0008 - 0x0000)
struct ParachuteVehicle_PhysicsVolumeChanged final
{
public:
	class APhysicsVolume*                         NewVolume;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_PhysicsVolumeChanged) == 0x000008, "Wrong alignment on ParachuteVehicle_PhysicsVolumeChanged");
static_assert(sizeof(ParachuteVehicle_PhysicsVolumeChanged) == 0x000008, "Wrong size on ParachuteVehicle_PhysicsVolumeChanged");
static_assert(offsetof(ParachuteVehicle_PhysicsVolumeChanged, NewVolume) == 0x000000, "Member 'ParachuteVehicle_PhysicsVolumeChanged::NewVolume' has a wrong offset!");

// Function TslGame.ParachuteVehicle.CanRelease
// 0x0001 (0x0001 - 0x0000)
struct ParachuteVehicle_CanRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_CanRelease) == 0x000001, "Wrong alignment on ParachuteVehicle_CanRelease");
static_assert(sizeof(ParachuteVehicle_CanRelease) == 0x000001, "Wrong size on ParachuteVehicle_CanRelease");
static_assert(offsetof(ParachuteVehicle_CanRelease, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_CanRelease::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.CanReleaseByInput
// 0x0001 (0x0001 - 0x0000)
struct ParachuteVehicle_CanReleaseByInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_CanReleaseByInput) == 0x000001, "Wrong alignment on ParachuteVehicle_CanReleaseByInput");
static_assert(sizeof(ParachuteVehicle_CanReleaseByInput) == 0x000001, "Wrong size on ParachuteVehicle_CanReleaseByInput");
static_assert(offsetof(ParachuteVehicle_CanReleaseByInput, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_CanReleaseByInput::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.GetAltitudeFromFloor
// 0x0004 (0x0004 - 0x0000)
struct ParachuteVehicle_GetAltitudeFromFloor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_GetAltitudeFromFloor) == 0x000004, "Wrong alignment on ParachuteVehicle_GetAltitudeFromFloor");
static_assert(sizeof(ParachuteVehicle_GetAltitudeFromFloor) == 0x000004, "Wrong size on ParachuteVehicle_GetAltitudeFromFloor");
static_assert(offsetof(ParachuteVehicle_GetAltitudeFromFloor, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_GetAltitudeFromFloor::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.IsDriven
// 0x0001 (0x0001 - 0x0000)
struct ParachuteVehicle_IsDriven final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_IsDriven) == 0x000001, "Wrong alignment on ParachuteVehicle_IsDriven");
static_assert(sizeof(ParachuteVehicle_IsDriven) == 0x000001, "Wrong size on ParachuteVehicle_IsDriven");
static_assert(offsetof(ParachuteVehicle_IsDriven, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_IsDriven::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.IsReleased
// 0x0001 (0x0001 - 0x0000)
struct ParachuteVehicle_IsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_IsReleased) == 0x000001, "Wrong alignment on ParachuteVehicle_IsReleased");
static_assert(sizeof(ParachuteVehicle_IsReleased) == 0x000001, "Wrong size on ParachuteVehicle_IsReleased");
static_assert(offsetof(ParachuteVehicle_IsReleased, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_IsReleased::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicle.IsStuck
// 0x0001 (0x0001 - 0x0000)
struct ParachuteVehicle_IsStuck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicle_IsStuck) == 0x000001, "Wrong alignment on ParachuteVehicle_IsStuck");
static_assert(sizeof(ParachuteVehicle_IsStuck) == 0x000001, "Wrong size on ParachuteVehicle_IsStuck");
static_assert(offsetof(ParachuteVehicle_IsStuck, ReturnValue) == 0x000000, "Member 'ParachuteVehicle_IsStuck::ReturnValue' has a wrong offset!");

// Function TslGame.SceneInteractionComponent.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct SceneInteractionComponent_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SceneInteractionComponent_AllowInteractBy) == 0x000008, "Wrong alignment on SceneInteractionComponent_AllowInteractBy");
static_assert(sizeof(SceneInteractionComponent_AllowInteractBy) == 0x000010, "Wrong size on SceneInteractionComponent_AllowInteractBy");
static_assert(offsetof(SceneInteractionComponent_AllowInteractBy, Character) == 0x000000, "Member 'SceneInteractionComponent_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(SceneInteractionComponent_AllowInteractBy, ReturnValue) == 0x000008, "Member 'SceneInteractionComponent_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.SceneInteractionComponent.GetInteractionVerb
// 0x0018 (0x0018 - 0x0000)
struct SceneInteractionComponent_GetInteractionVerb final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneInteractionComponent_GetInteractionVerb) == 0x000008, "Wrong alignment on SceneInteractionComponent_GetInteractionVerb");
static_assert(sizeof(SceneInteractionComponent_GetInteractionVerb) == 0x000018, "Wrong size on SceneInteractionComponent_GetInteractionVerb");
static_assert(offsetof(SceneInteractionComponent_GetInteractionVerb, ReturnValue) == 0x000000, "Member 'SceneInteractionComponent_GetInteractionVerb::ReturnValue' has a wrong offset!");

// Function TslGame.SceneInteractionComponent.GetInteractiveObjectName
// 0x0018 (0x0018 - 0x0000)
struct SceneInteractionComponent_GetInteractiveObjectName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneInteractionComponent_GetInteractiveObjectName) == 0x000008, "Wrong alignment on SceneInteractionComponent_GetInteractiveObjectName");
static_assert(sizeof(SceneInteractionComponent_GetInteractiveObjectName) == 0x000018, "Wrong size on SceneInteractionComponent_GetInteractiveObjectName");
static_assert(offsetof(SceneInteractionComponent_GetInteractiveObjectName, ReturnValue) == 0x000000, "Member 'SceneInteractionComponent_GetInteractiveObjectName::ReturnValue' has a wrong offset!");

// Function TslGame.DoorInteractionComponent.AllowInteract
// 0x0010 (0x0010 - 0x0000)
struct DoorInteractionComponent_AllowInteract final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DoorInteractionComponent_AllowInteract) == 0x000008, "Wrong alignment on DoorInteractionComponent_AllowInteract");
static_assert(sizeof(DoorInteractionComponent_AllowInteract) == 0x000010, "Wrong size on DoorInteractionComponent_AllowInteract");
static_assert(offsetof(DoorInteractionComponent_AllowInteract, OtherCharacter) == 0x000000, "Member 'DoorInteractionComponent_AllowInteract::OtherCharacter' has a wrong offset!");
static_assert(offsetof(DoorInteractionComponent_AllowInteract, ReturnValue) == 0x000008, "Member 'DoorInteractionComponent_AllowInteract::ReturnValue' has a wrong offset!");

// Function TslGame.DoorInteractionComponent.OnRep_DoorState
// 0x0001 (0x0001 - 0x0000)
struct DoorInteractionComponent_OnRep_DoorState final
{
public:
	EDoorState                                    PrevDoorState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorInteractionComponent_OnRep_DoorState) == 0x000001, "Wrong alignment on DoorInteractionComponent_OnRep_DoorState");
static_assert(sizeof(DoorInteractionComponent_OnRep_DoorState) == 0x000001, "Wrong size on DoorInteractionComponent_OnRep_DoorState");
static_assert(offsetof(DoorInteractionComponent_OnRep_DoorState, PrevDoorState) == 0x000000, "Member 'DoorInteractionComponent_OnRep_DoorState::PrevDoorState' has a wrong offset!");

// Function TslGame.TslGameOption.ApplyGameUserSettings
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_ApplyGameUserSettings final
{
public:
	bool                                          bCheckForCommandLineOverrides;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_ApplyGameUserSettings) == 0x000001, "Wrong alignment on TslGameOption_ApplyGameUserSettings");
static_assert(sizeof(TslGameOption_ApplyGameUserSettings) == 0x000001, "Wrong size on TslGameOption_ApplyGameUserSettings");
static_assert(offsetof(TslGameOption_ApplyGameUserSettings, bCheckForCommandLineOverrides) == 0x000000, "Member 'TslGameOption_ApplyGameUserSettings::bCheckForCommandLineOverrides' has a wrong offset!");

// Function TslGame.TslGameOption.CastTslInputModeFromName
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CastTslInputModeFromName final
{
public:
	struct FName                                   InputModeName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETslInputModes                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_CastTslInputModeFromName) == 0x000004, "Wrong alignment on TslGameOption_CastTslInputModeFromName");
static_assert(sizeof(TslGameOption_CastTslInputModeFromName) == 0x000010, "Wrong size on TslGameOption_CastTslInputModeFromName");
static_assert(offsetof(TslGameOption_CastTslInputModeFromName, InputModeName) == 0x000000, "Member 'TslGameOption_CastTslInputModeFromName::InputModeName' has a wrong offset!");
static_assert(offsetof(TslGameOption_CastTslInputModeFromName, ReturnValue) == 0x000008, "Member 'TslGameOption_CastTslInputModeFromName::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.CultureNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CultureNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_CultureNames) == 0x000008, "Wrong alignment on TslGameOption_CultureNames");
static_assert(sizeof(TslGameOption_CultureNames) == 0x000010, "Wrong size on TslGameOption_CultureNames");
static_assert(offsetof(TslGameOption_CultureNames, ReturnValue) == 0x000000, "Member 'TslGameOption_CultureNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.CustomizableActionNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CustomizableActionNames final
{
public:
	TArray<struct FCustomizableActionName>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_CustomizableActionNames) == 0x000008, "Wrong alignment on TslGameOption_CustomizableActionNames");
static_assert(sizeof(TslGameOption_CustomizableActionNames) == 0x000010, "Wrong size on TslGameOption_CustomizableActionNames");
static_assert(offsetof(TslGameOption_CustomizableActionNames, ReturnValue) == 0x000000, "Member 'TslGameOption_CustomizableActionNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.CustomizableAxisName
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CustomizableAxisName final
{
public:
	TArray<struct FCustomizableAxisName>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_CustomizableAxisName) == 0x000008, "Wrong alignment on TslGameOption_CustomizableAxisName");
static_assert(sizeof(TslGameOption_CustomizableAxisName) == 0x000010, "Wrong size on TslGameOption_CustomizableAxisName");
static_assert(offsetof(TslGameOption_CustomizableAxisName, ReturnValue) == 0x000000, "Member 'TslGameOption_CustomizableAxisName::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.CustomizableCategoryData
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CustomizableCategoryData final
{
public:
	TArray<struct FCustomizableCategoryData>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_CustomizableCategoryData) == 0x000008, "Wrong alignment on TslGameOption_CustomizableCategoryData");
static_assert(sizeof(TslGameOption_CustomizableCategoryData) == 0x000010, "Wrong size on TslGameOption_CustomizableCategoryData");
static_assert(offsetof(TslGameOption_CustomizableCategoryData, ReturnValue) == 0x000000, "Member 'TslGameOption_CustomizableCategoryData::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.CustomizableMouseSensitiveNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_CustomizableMouseSensitiveNames final
{
public:
	TArray<struct FCustomizableMouseSensitiveName> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_CustomizableMouseSensitiveNames) == 0x000008, "Wrong alignment on TslGameOption_CustomizableMouseSensitiveNames");
static_assert(sizeof(TslGameOption_CustomizableMouseSensitiveNames) == 0x000010, "Wrong size on TslGameOption_CustomizableMouseSensitiveNames");
static_assert(offsetof(TslGameOption_CustomizableMouseSensitiveNames, ReturnValue) == 0x000000, "Member 'TslGameOption_CustomizableMouseSensitiveNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetActionKey
// 0x0030 (0x0030 - 0x0000)
struct TslGameOption_GetActionKey final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantAnyKey;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyBindingSlot                               eKeySlot;                                          // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTslInputKey                           ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetActionKey) == 0x000008, "Wrong alignment on TslGameOption_GetActionKey");
static_assert(sizeof(TslGameOption_GetActionKey) == 0x000030, "Wrong size on TslGameOption_GetActionKey");
static_assert(offsetof(TslGameOption_GetActionKey, ActionName) == 0x000000, "Member 'TslGameOption_GetActionKey::ActionName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKey, bGamepad) == 0x000008, "Member 'TslGameOption_GetActionKey::bGamepad' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKey, bDefault) == 0x000009, "Member 'TslGameOption_GetActionKey::bDefault' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKey, bWantAnyKey) == 0x00000A, "Member 'TslGameOption_GetActionKey::bWantAnyKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKey, eKeySlot) == 0x00000B, "Member 'TslGameOption_GetActionKey::eKeySlot' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKey, ReturnValue) == 0x000010, "Member 'TslGameOption_GetActionKey::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetActionKeys
// 0x0020 (0x0020 - 0x0000)
struct TslGameOption_GetActionKeys final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTslInputKey>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetActionKeys) == 0x000008, "Wrong alignment on TslGameOption_GetActionKeys");
static_assert(sizeof(TslGameOption_GetActionKeys) == 0x000020, "Wrong size on TslGameOption_GetActionKeys");
static_assert(offsetof(TslGameOption_GetActionKeys, ActionName) == 0x000000, "Member 'TslGameOption_GetActionKeys::ActionName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKeys, bDefault) == 0x000008, "Member 'TslGameOption_GetActionKeys::bDefault' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetActionKeys, ReturnValue) == 0x000010, "Member 'TslGameOption_GetActionKeys::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetAutoQualityLevels
// 0x0020 (0x0020 - 0x0000)
struct TslGameOption_GetAutoQualityLevels final
{
public:
	int32                                         WorkScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPUMultiplier;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUMultiplier;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQualityLevelInfo>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetAutoQualityLevels) == 0x000008, "Wrong alignment on TslGameOption_GetAutoQualityLevels");
static_assert(sizeof(TslGameOption_GetAutoQualityLevels) == 0x000020, "Wrong size on TslGameOption_GetAutoQualityLevels");
static_assert(offsetof(TslGameOption_GetAutoQualityLevels, WorkScale) == 0x000000, "Member 'TslGameOption_GetAutoQualityLevels::WorkScale' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAutoQualityLevels, CPUMultiplier) == 0x000004, "Member 'TslGameOption_GetAutoQualityLevels::CPUMultiplier' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAutoQualityLevels, GPUMultiplier) == 0x000008, "Member 'TslGameOption_GetAutoQualityLevels::GPUMultiplier' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAutoQualityLevels, ReturnValue) == 0x000010, "Member 'TslGameOption_GetAutoQualityLevels::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetAvailableProviderDisplayNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetAvailableProviderDisplayNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetAvailableProviderDisplayNames) == 0x000008, "Wrong alignment on TslGameOption_GetAvailableProviderDisplayNames");
static_assert(sizeof(TslGameOption_GetAvailableProviderDisplayNames) == 0x000010, "Wrong size on TslGameOption_GetAvailableProviderDisplayNames");
static_assert(offsetof(TslGameOption_GetAvailableProviderDisplayNames, ReturnValue) == 0x000000, "Member 'TslGameOption_GetAvailableProviderDisplayNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetAvailableProviderNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetAvailableProviderNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetAvailableProviderNames) == 0x000008, "Wrong alignment on TslGameOption_GetAvailableProviderNames");
static_assert(sizeof(TslGameOption_GetAvailableProviderNames) == 0x000010, "Wrong size on TslGameOption_GetAvailableProviderNames");
static_assert(offsetof(TslGameOption_GetAvailableProviderNames, ReturnValue) == 0x000000, "Member 'TslGameOption_GetAvailableProviderNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetAxisKey
// 0x0030 (0x0030 - 0x0000)
struct TslGameOption_GetAxisKey final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantAnyKey;                                       // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyBindingSlot                               eKeySlot;                                          // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTslInputKey                           ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetAxisKey) == 0x000008, "Wrong alignment on TslGameOption_GetAxisKey");
static_assert(sizeof(TslGameOption_GetAxisKey) == 0x000030, "Wrong size on TslGameOption_GetAxisKey");
static_assert(offsetof(TslGameOption_GetAxisKey, AxisName) == 0x000000, "Member 'TslGameOption_GetAxisKey::AxisName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, Scale) == 0x000008, "Member 'TslGameOption_GetAxisKey::Scale' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, bGamepad) == 0x00000C, "Member 'TslGameOption_GetAxisKey::bGamepad' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, bDefault) == 0x00000D, "Member 'TslGameOption_GetAxisKey::bDefault' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, bWantAnyKey) == 0x00000E, "Member 'TslGameOption_GetAxisKey::bWantAnyKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, eKeySlot) == 0x00000F, "Member 'TslGameOption_GetAxisKey::eKeySlot' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKey, ReturnValue) == 0x000010, "Member 'TslGameOption_GetAxisKey::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetAxisKeys
// 0x0020 (0x0020 - 0x0000)
struct TslGameOption_GetAxisKeys final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTslInputKey>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetAxisKeys) == 0x000008, "Wrong alignment on TslGameOption_GetAxisKeys");
static_assert(sizeof(TslGameOption_GetAxisKeys) == 0x000020, "Wrong size on TslGameOption_GetAxisKeys");
static_assert(offsetof(TslGameOption_GetAxisKeys, AxisName) == 0x000000, "Member 'TslGameOption_GetAxisKeys::AxisName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKeys, Scale) == 0x000008, "Member 'TslGameOption_GetAxisKeys::Scale' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKeys, bDefault) == 0x00000C, "Member 'TslGameOption_GetAxisKeys::bDefault' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetAxisKeys, ReturnValue) == 0x000010, "Member 'TslGameOption_GetAxisKeys::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetBGMSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetBGMSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetBGMSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_GetBGMSoundVolume");
static_assert(sizeof(TslGameOption_GetBGMSoundVolume) == 0x000004, "Wrong size on TslGameOption_GetBGMSoundVolume");
static_assert(offsetof(TslGameOption_GetBGMSoundVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetBGMSoundVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetColorBlindTypes
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetColorBlindTypes final
{
public:
	TArray<struct FColorBlindType>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetColorBlindTypes) == 0x000008, "Wrong alignment on TslGameOption_GetColorBlindTypes");
static_assert(sizeof(TslGameOption_GetColorBlindTypes) == 0x000010, "Wrong size on TslGameOption_GetColorBlindTypes");
static_assert(offsetof(TslGameOption_GetColorBlindTypes, ReturnValue) == 0x000000, "Member 'TslGameOption_GetColorBlindTypes::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetConvertedMouseSensitivity
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetConvertedMouseSensitivity final
{
public:
	struct FName                                   InMouseSensitiveName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_GetConvertedMouseSensitivity) == 0x000004, "Wrong alignment on TslGameOption_GetConvertedMouseSensitivity");
static_assert(sizeof(TslGameOption_GetConvertedMouseSensitivity) == 0x000010, "Wrong size on TslGameOption_GetConvertedMouseSensitivity");
static_assert(offsetof(TslGameOption_GetConvertedMouseSensitivity, InMouseSensitiveName) == 0x000000, "Member 'TslGameOption_GetConvertedMouseSensitivity::InMouseSensitiveName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetConvertedMouseSensitivity, ReturnValue) == 0x000008, "Member 'TslGameOption_GetConvertedMouseSensitivity::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetCrosshairColors
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetCrosshairColors final
{
public:
	TArray<struct FPresetColor>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetCrosshairColors) == 0x000008, "Wrong alignment on TslGameOption_GetCrosshairColors");
static_assert(sizeof(TslGameOption_GetCrosshairColors) == 0x000010, "Wrong size on TslGameOption_GetCrosshairColors");
static_assert(offsetof(TslGameOption_GetCrosshairColors, ReturnValue) == 0x000000, "Member 'TslGameOption_GetCrosshairColors::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetCurrentColorBlindKey
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetCurrentColorBlindKey final
{
public:
	EColorBlindType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetCurrentColorBlindKey) == 0x000001, "Wrong alignment on TslGameOption_GetCurrentColorBlindKey");
static_assert(sizeof(TslGameOption_GetCurrentColorBlindKey) == 0x000001, "Wrong size on TslGameOption_GetCurrentColorBlindKey");
static_assert(offsetof(TslGameOption_GetCurrentColorBlindKey, ReturnValue) == 0x000000, "Member 'TslGameOption_GetCurrentColorBlindKey::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetCurrentCrosshairColorStr
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetCurrentCrosshairColorStr final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetCurrentCrosshairColorStr) == 0x000008, "Wrong alignment on TslGameOption_GetCurrentCrosshairColorStr");
static_assert(sizeof(TslGameOption_GetCurrentCrosshairColorStr) == 0x000010, "Wrong size on TslGameOption_GetCurrentCrosshairColorStr");
static_assert(offsetof(TslGameOption_GetCurrentCrosshairColorStr, ReturnValue) == 0x000000, "Member 'TslGameOption_GetCurrentCrosshairColorStr::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetCurrentCultureName
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetCurrentCultureName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetCurrentCultureName) == 0x000008, "Wrong alignment on TslGameOption_GetCurrentCultureName");
static_assert(sizeof(TslGameOption_GetCurrentCultureName) == 0x000010, "Wrong size on TslGameOption_GetCurrentCultureName");
static_assert(offsetof(TslGameOption_GetCurrentCultureName, ReturnValue) == 0x000000, "Member 'TslGameOption_GetCurrentCultureName::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetCurrentProvider
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetCurrentProvider final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetCurrentProvider) == 0x000008, "Wrong alignment on TslGameOption_GetCurrentProvider");
static_assert(sizeof(TslGameOption_GetCurrentProvider) == 0x000010, "Wrong size on TslGameOption_GetCurrentProvider");
static_assert(offsetof(TslGameOption_GetCurrentProvider, ReturnValue) == 0x000000, "Member 'TslGameOption_GetCurrentProvider::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetDefaultCultureName
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetDefaultCultureName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetDefaultCultureName) == 0x000008, "Wrong alignment on TslGameOption_GetDefaultCultureName");
static_assert(sizeof(TslGameOption_GetDefaultCultureName) == 0x000010, "Wrong size on TslGameOption_GetDefaultCultureName");
static_assert(offsetof(TslGameOption_GetDefaultCultureName, ReturnValue) == 0x000000, "Member 'TslGameOption_GetDefaultCultureName::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetDefaultInputModeSetting
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_GetDefaultInputModeSetting final
{
public:
	EInputModeSettingActions                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETslInputModes                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetDefaultInputModeSetting) == 0x000001, "Wrong alignment on TslGameOption_GetDefaultInputModeSetting");
static_assert(sizeof(TslGameOption_GetDefaultInputModeSetting) == 0x000002, "Wrong size on TslGameOption_GetDefaultInputModeSetting");
static_assert(offsetof(TslGameOption_GetDefaultInputModeSetting, eAction) == 0x000000, "Member 'TslGameOption_GetDefaultInputModeSetting::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetDefaultInputModeSetting, ReturnValue) == 0x000001, "Member 'TslGameOption_GetDefaultInputModeSetting::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetEffectSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetEffectSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetEffectSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_GetEffectSoundVolume");
static_assert(sizeof(TslGameOption_GetEffectSoundVolume) == 0x000004, "Wrong size on TslGameOption_GetEffectSoundVolume");
static_assert(offsetof(TslGameOption_GetEffectSoundVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetEffectSoundVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetFppEquipableItemIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetFppEquipableItemIconShowType final
{
public:
	EUiShowType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetFppEquipableItemIconShowType) == 0x000001, "Wrong alignment on TslGameOption_GetFppEquipableItemIconShowType");
static_assert(sizeof(TslGameOption_GetFppEquipableItemIconShowType) == 0x000001, "Wrong size on TslGameOption_GetFppEquipableItemIconShowType");
static_assert(offsetof(TslGameOption_GetFppEquipableItemIconShowType, ReturnValue) == 0x000000, "Member 'TslGameOption_GetFppEquipableItemIconShowType::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetFppWeaponIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetFppWeaponIconShowType final
{
public:
	EUiShowType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetFppWeaponIconShowType) == 0x000001, "Wrong alignment on TslGameOption_GetFppWeaponIconShowType");
static_assert(sizeof(TslGameOption_GetFppWeaponIconShowType) == 0x000001, "Wrong size on TslGameOption_GetFppWeaponIconShowType");
static_assert(offsetof(TslGameOption_GetFppWeaponIconShowType, ReturnValue) == 0x000000, "Member 'TslGameOption_GetFppWeaponIconShowType::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetFpsCameraFov
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetFpsCameraFov final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetFpsCameraFov) == 0x000004, "Wrong alignment on TslGameOption_GetFpsCameraFov");
static_assert(sizeof(TslGameOption_GetFpsCameraFov) == 0x000004, "Wrong size on TslGameOption_GetFpsCameraFov");
static_assert(offsetof(TslGameOption_GetFpsCameraFov, ReturnValue) == 0x000000, "Member 'TslGameOption_GetFpsCameraFov::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetFullScreenMode
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetFullScreenMode final
{
public:
	EWindowMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetFullScreenMode) == 0x000001, "Wrong alignment on TslGameOption_GetFullScreenMode");
static_assert(sizeof(TslGameOption_GetFullScreenMode) == 0x000001, "Wrong size on TslGameOption_GetFullScreenMode");
static_assert(offsetof(TslGameOption_GetFullScreenMode, ReturnValue) == 0x000000, "Member 'TslGameOption_GetFullScreenMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetGamma) == 0x000004, "Wrong alignment on TslGameOption_GetGamma");
static_assert(sizeof(TslGameOption_GetGamma) == 0x000004, "Wrong size on TslGameOption_GetGamma");
static_assert(offsetof(TslGameOption_GetGamma, ReturnValue) == 0x000000, "Member 'TslGameOption_GetGamma::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetKeyInputModeNames
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetKeyInputModeNames final
{
public:
	TArray<struct FKeyInputModeName>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetKeyInputModeNames) == 0x000008, "Wrong alignment on TslGameOption_GetKeyInputModeNames");
static_assert(sizeof(TslGameOption_GetKeyInputModeNames) == 0x000010, "Wrong size on TslGameOption_GetKeyInputModeNames");
static_assert(offsetof(TslGameOption_GetKeyInputModeNames, ReturnValue) == 0x000000, "Member 'TslGameOption_GetKeyInputModeNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetKeyName
// 0x0038 (0x0038 - 0x0000)
struct TslGameOption_GetKeyName final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetKeyName) == 0x000008, "Wrong alignment on TslGameOption_GetKeyName");
static_assert(sizeof(TslGameOption_GetKeyName) == 0x000038, "Wrong size on TslGameOption_GetKeyName");
static_assert(offsetof(TslGameOption_GetKeyName, Key) == 0x000000, "Member 'TslGameOption_GetKeyName::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetKeyName, ReturnValue) == 0x000020, "Member 'TslGameOption_GetKeyName::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetMasterSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetMasterSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_GetMasterSoundVolume");
static_assert(sizeof(TslGameOption_GetMasterSoundVolume) == 0x000004, "Wrong size on TslGameOption_GetMasterSoundVolume");
static_assert(offsetof(TslGameOption_GetMasterSoundVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetMasterSoundVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetMiniMapTypes
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetMiniMapTypes final
{
public:
	TArray<struct FUiType>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetMiniMapTypes) == 0x000008, "Wrong alignment on TslGameOption_GetMiniMapTypes");
static_assert(sizeof(TslGameOption_GetMiniMapTypes) == 0x000010, "Wrong size on TslGameOption_GetMiniMapTypes");
static_assert(offsetof(TslGameOption_GetMiniMapTypes, ReturnValue) == 0x000000, "Member 'TslGameOption_GetMiniMapTypes::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetMouseSensitivity
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetMouseSensitivity final
{
public:
	struct FName                                   InMouseSensitiveName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_GetMouseSensitivity) == 0x000004, "Wrong alignment on TslGameOption_GetMouseSensitivity");
static_assert(sizeof(TslGameOption_GetMouseSensitivity) == 0x000010, "Wrong size on TslGameOption_GetMouseSensitivity");
static_assert(offsetof(TslGameOption_GetMouseSensitivity, InMouseSensitiveName) == 0x000000, "Member 'TslGameOption_GetMouseSensitivity::InMouseSensitiveName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetMouseSensitivity, ReturnValue) == 0x000008, "Member 'TslGameOption_GetMouseSensitivity::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetNativeLanguage
// 0x0020 (0x0020 - 0x0000)
struct TslGameOption_GetNativeLanguage final
{
public:
	class FString                                 InCultureName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetNativeLanguage) == 0x000008, "Wrong alignment on TslGameOption_GetNativeLanguage");
static_assert(sizeof(TslGameOption_GetNativeLanguage) == 0x000020, "Wrong size on TslGameOption_GetNativeLanguage");
static_assert(offsetof(TslGameOption_GetNativeLanguage, InCultureName) == 0x000000, "Member 'TslGameOption_GetNativeLanguage::InCultureName' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetNativeLanguage, ReturnValue) == 0x000010, "Member 'TslGameOption_GetNativeLanguage::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetOverallScalabilityLevel
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetOverallScalabilityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetOverallScalabilityLevel) == 0x000004, "Wrong alignment on TslGameOption_GetOverallScalabilityLevel");
static_assert(sizeof(TslGameOption_GetOverallScalabilityLevel) == 0x000004, "Wrong size on TslGameOption_GetOverallScalabilityLevel");
static_assert(offsetof(TslGameOption_GetOverallScalabilityLevel, ReturnValue) == 0x000000, "Member 'TslGameOption_GetOverallScalabilityLevel::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetQualityLevel
// 0x0008 (0x0008 - 0x0000)
struct TslGameOption_GetQualityLevel final
{
public:
	EQualityType                                  Quality;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetQualityLevel) == 0x000004, "Wrong alignment on TslGameOption_GetQualityLevel");
static_assert(sizeof(TslGameOption_GetQualityLevel) == 0x000008, "Wrong size on TslGameOption_GetQualityLevel");
static_assert(offsetof(TslGameOption_GetQualityLevel, Quality) == 0x000000, "Member 'TslGameOption_GetQualityLevel::Quality' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetQualityLevel, ReturnValue) == 0x000004, "Member 'TslGameOption_GetQualityLevel::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct TslGameOption_GetScreenResolution final
{
public:
	struct FScreenResolution                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetScreenResolution) == 0x000004, "Wrong alignment on TslGameOption_GetScreenResolution");
static_assert(sizeof(TslGameOption_GetScreenResolution) == 0x000008, "Wrong size on TslGameOption_GetScreenResolution");
static_assert(offsetof(TslGameOption_GetScreenResolution, ReturnValue) == 0x000000, "Member 'TslGameOption_GetScreenResolution::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetScreenScale
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetScreenScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetScreenScale) == 0x000004, "Wrong alignment on TslGameOption_GetScreenScale");
static_assert(sizeof(TslGameOption_GetScreenScale) == 0x000004, "Wrong size on TslGameOption_GetScreenScale");
static_assert(offsetof(TslGameOption_GetScreenScale, ReturnValue) == 0x000000, "Member 'TslGameOption_GetScreenScale::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetSelectMiniMapTypeIndex
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetSelectMiniMapTypeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetSelectMiniMapTypeIndex) == 0x000004, "Wrong alignment on TslGameOption_GetSelectMiniMapTypeIndex");
static_assert(sizeof(TslGameOption_GetSelectMiniMapTypeIndex) == 0x000004, "Wrong size on TslGameOption_GetSelectMiniMapTypeIndex");
static_assert(offsetof(TslGameOption_GetSelectMiniMapTypeIndex, ReturnValue) == 0x000000, "Member 'TslGameOption_GetSelectMiniMapTypeIndex::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetSupportedQualityLevels
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetSupportedQualityLevels final
{
public:
	TArray<struct FSurportQualityLevel>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetSupportedQualityLevels) == 0x000008, "Wrong alignment on TslGameOption_GetSupportedQualityLevels");
static_assert(sizeof(TslGameOption_GetSupportedQualityLevels) == 0x000010, "Wrong size on TslGameOption_GetSupportedQualityLevels");
static_assert(offsetof(TslGameOption_GetSupportedQualityLevels, ReturnValue) == 0x000000, "Member 'TslGameOption_GetSupportedQualityLevels::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetSupportedScreenResolutions
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_GetSupportedScreenResolutions final
{
public:
	TArray<struct FScreenResolution>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetSupportedScreenResolutions) == 0x000008, "Wrong alignment on TslGameOption_GetSupportedScreenResolutions");
static_assert(sizeof(TslGameOption_GetSupportedScreenResolutions) == 0x000010, "Wrong size on TslGameOption_GetSupportedScreenResolutions");
static_assert(offsetof(TslGameOption_GetSupportedScreenResolutions, ReturnValue) == 0x000000, "Member 'TslGameOption_GetSupportedScreenResolutions::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetTpsWeaponIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetTpsWeaponIconShowType final
{
public:
	EUiShowType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetTpsWeaponIconShowType) == 0x000001, "Wrong alignment on TslGameOption_GetTpsWeaponIconShowType");
static_assert(sizeof(TslGameOption_GetTpsWeaponIconShowType) == 0x000001, "Wrong size on TslGameOption_GetTpsWeaponIconShowType");
static_assert(offsetof(TslGameOption_GetTpsWeaponIconShowType, ReturnValue) == 0x000000, "Member 'TslGameOption_GetTpsWeaponIconShowType::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetTslInputMode
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_GetTslInputMode final
{
public:
	EInputModeSettingActions                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETslInputModes                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetTslInputMode) == 0x000001, "Wrong alignment on TslGameOption_GetTslInputMode");
static_assert(sizeof(TslGameOption_GetTslInputMode) == 0x000002, "Wrong size on TslGameOption_GetTslInputMode");
static_assert(offsetof(TslGameOption_GetTslInputMode, eAction) == 0x000000, "Member 'TslGameOption_GetTslInputMode::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_GetTslInputMode, ReturnValue) == 0x000001, "Member 'TslGameOption_GetTslInputMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetUISoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetUISoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetUISoundVolume) == 0x000004, "Wrong alignment on TslGameOption_GetUISoundVolume");
static_assert(sizeof(TslGameOption_GetUISoundVolume) == 0x000004, "Wrong size on TslGameOption_GetUISoundVolume");
static_assert(offsetof(TslGameOption_GetUISoundVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetUISoundVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetUseCharacterCapture
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetUseCharacterCapture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetUseCharacterCapture) == 0x000001, "Wrong alignment on TslGameOption_GetUseCharacterCapture");
static_assert(sizeof(TslGameOption_GetUseCharacterCapture) == 0x000001, "Wrong size on TslGameOption_GetUseCharacterCapture");
static_assert(offsetof(TslGameOption_GetUseCharacterCapture, ReturnValue) == 0x000000, "Member 'TslGameOption_GetUseCharacterCapture::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetUseGlobalVoice
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetUseGlobalVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetUseGlobalVoice) == 0x000001, "Wrong alignment on TslGameOption_GetUseGlobalVoice");
static_assert(sizeof(TslGameOption_GetUseGlobalVoice) == 0x000001, "Wrong size on TslGameOption_GetUseGlobalVoice");
static_assert(offsetof(TslGameOption_GetUseGlobalVoice, ReturnValue) == 0x000000, "Member 'TslGameOption_GetUseGlobalVoice::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetUsePushToTalk
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetUsePushToTalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetUsePushToTalk) == 0x000001, "Wrong alignment on TslGameOption_GetUsePushToTalk");
static_assert(sizeof(TslGameOption_GetUsePushToTalk) == 0x000001, "Wrong size on TslGameOption_GetUsePushToTalk");
static_assert(offsetof(TslGameOption_GetUsePushToTalk, ReturnValue) == 0x000000, "Member 'TslGameOption_GetUsePushToTalk::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetUseTeamVoice
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_GetUseTeamVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetUseTeamVoice) == 0x000001, "Wrong alignment on TslGameOption_GetUseTeamVoice");
static_assert(sizeof(TslGameOption_GetUseTeamVoice) == 0x000001, "Wrong size on TslGameOption_GetUseTeamVoice");
static_assert(offsetof(TslGameOption_GetUseTeamVoice, ReturnValue) == 0x000000, "Member 'TslGameOption_GetUseTeamVoice::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetVoiceInputVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetVoiceInputVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetVoiceInputVolume) == 0x000004, "Wrong alignment on TslGameOption_GetVoiceInputVolume");
static_assert(sizeof(TslGameOption_GetVoiceInputVolume) == 0x000004, "Wrong size on TslGameOption_GetVoiceInputVolume");
static_assert(offsetof(TslGameOption_GetVoiceInputVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetVoiceInputVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetVoiceOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetVoiceOutputVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetVoiceOutputVolume) == 0x000004, "Wrong alignment on TslGameOption_GetVoiceOutputVolume");
static_assert(sizeof(TslGameOption_GetVoiceOutputVolume) == 0x000004, "Wrong size on TslGameOption_GetVoiceOutputVolume");
static_assert(offsetof(TslGameOption_GetVoiceOutputVolume, ReturnValue) == 0x000000, "Member 'TslGameOption_GetVoiceOutputVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.GetWorldMapZoomSpeedLevel
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_GetWorldMapZoomSpeedLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_GetWorldMapZoomSpeedLevel) == 0x000004, "Wrong alignment on TslGameOption_GetWorldMapZoomSpeedLevel");
static_assert(sizeof(TslGameOption_GetWorldMapZoomSpeedLevel) == 0x000004, "Wrong size on TslGameOption_GetWorldMapZoomSpeedLevel");
static_assert(offsetof(TslGameOption_GetWorldMapZoomSpeedLevel, ReturnValue) == 0x000000, "Member 'TslGameOption_GetWorldMapZoomSpeedLevel::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsBGMSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsBGMSoundMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsBGMSoundMute) == 0x000001, "Wrong alignment on TslGameOption_IsBGMSoundMute");
static_assert(sizeof(TslGameOption_IsBGMSoundMute) == 0x000001, "Wrong size on TslGameOption_IsBGMSoundMute");
static_assert(offsetof(TslGameOption_IsBGMSoundMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsBGMSoundMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsDefaultFunctionalityEnabled
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_IsDefaultFunctionalityEnabled final
{
public:
	EGameplayFunctionalities                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsDefaultFunctionalityEnabled) == 0x000001, "Wrong alignment on TslGameOption_IsDefaultFunctionalityEnabled");
static_assert(sizeof(TslGameOption_IsDefaultFunctionalityEnabled) == 0x000002, "Wrong size on TslGameOption_IsDefaultFunctionalityEnabled");
static_assert(offsetof(TslGameOption_IsDefaultFunctionalityEnabled, eAction) == 0x000000, "Member 'TslGameOption_IsDefaultFunctionalityEnabled::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsDefaultFunctionalityEnabled, ReturnValue) == 0x000001, "Member 'TslGameOption_IsDefaultFunctionalityEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsDoubleTapSupported
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_IsDoubleTapSupported final
{
public:
	EInputModeSettingActions                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsDoubleTapSupported) == 0x000001, "Wrong alignment on TslGameOption_IsDoubleTapSupported");
static_assert(sizeof(TslGameOption_IsDoubleTapSupported) == 0x000002, "Wrong size on TslGameOption_IsDoubleTapSupported");
static_assert(offsetof(TslGameOption_IsDoubleTapSupported, eAction) == 0x000000, "Member 'TslGameOption_IsDoubleTapSupported::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsDoubleTapSupported, ReturnValue) == 0x000001, "Member 'TslGameOption_IsDoubleTapSupported::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsEffectSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsEffectSoundMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsEffectSoundMute) == 0x000001, "Wrong alignment on TslGameOption_IsEffectSoundMute");
static_assert(sizeof(TslGameOption_IsEffectSoundMute) == 0x000001, "Wrong size on TslGameOption_IsEffectSoundMute");
static_assert(offsetof(TslGameOption_IsEffectSoundMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsEffectSoundMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsEnabledMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsEnabledMotionBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsEnabledMotionBlur) == 0x000001, "Wrong alignment on TslGameOption_IsEnabledMotionBlur");
static_assert(sizeof(TslGameOption_IsEnabledMotionBlur) == 0x000001, "Wrong size on TslGameOption_IsEnabledMotionBlur");
static_assert(offsetof(TslGameOption_IsEnabledMotionBlur, ReturnValue) == 0x000000, "Member 'TslGameOption_IsEnabledMotionBlur::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsFunctionalityEnabled
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_IsFunctionalityEnabled final
{
public:
	EGameplayFunctionalities                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsFunctionalityEnabled) == 0x000001, "Wrong alignment on TslGameOption_IsFunctionalityEnabled");
static_assert(sizeof(TslGameOption_IsFunctionalityEnabled) == 0x000002, "Wrong size on TslGameOption_IsFunctionalityEnabled");
static_assert(offsetof(TslGameOption_IsFunctionalityEnabled, eAction) == 0x000000, "Member 'TslGameOption_IsFunctionalityEnabled::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsFunctionalityEnabled, ReturnValue) == 0x000001, "Member 'TslGameOption_IsFunctionalityEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsGamepadKey
// 0x0028 (0x0028 - 0x0000)
struct TslGameOption_IsGamepadKey final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_IsGamepadKey) == 0x000008, "Wrong alignment on TslGameOption_IsGamepadKey");
static_assert(sizeof(TslGameOption_IsGamepadKey) == 0x000028, "Wrong size on TslGameOption_IsGamepadKey");
static_assert(offsetof(TslGameOption_IsGamepadKey, Key) == 0x000000, "Member 'TslGameOption_IsGamepadKey::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsGamepadKey, ReturnValue) == 0x000020, "Member 'TslGameOption_IsGamepadKey::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsInvertMouse
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsInvertMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsInvertMouse) == 0x000001, "Wrong alignment on TslGameOption_IsInvertMouse");
static_assert(sizeof(TslGameOption_IsInvertMouse) == 0x000001, "Wrong size on TslGameOption_IsInvertMouse");
static_assert(offsetof(TslGameOption_IsInvertMouse, ReturnValue) == 0x000000, "Member 'TslGameOption_IsInvertMouse::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsKeyUsed
// 0x0028 (0x0028 - 0x0000)
struct TslGameOption_IsKeyUsed final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_IsKeyUsed) == 0x000008, "Wrong alignment on TslGameOption_IsKeyUsed");
static_assert(sizeof(TslGameOption_IsKeyUsed) == 0x000028, "Wrong size on TslGameOption_IsKeyUsed");
static_assert(offsetof(TslGameOption_IsKeyUsed, Key) == 0x000000, "Member 'TslGameOption_IsKeyUsed::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsKeyUsed, ReturnValue) == 0x000020, "Member 'TslGameOption_IsKeyUsed::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsKeyValid
// 0x0028 (0x0028 - 0x0000)
struct TslGameOption_IsKeyValid final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_IsKeyValid) == 0x000008, "Wrong alignment on TslGameOption_IsKeyValid");
static_assert(sizeof(TslGameOption_IsKeyValid) == 0x000028, "Wrong size on TslGameOption_IsKeyValid");
static_assert(offsetof(TslGameOption_IsKeyValid, Key) == 0x000000, "Member 'TslGameOption_IsKeyValid::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsKeyValid, ReturnValue) == 0x000020, "Member 'TslGameOption_IsKeyValid::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsMasterSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsMasterSoundMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsMasterSoundMute) == 0x000001, "Wrong alignment on TslGameOption_IsMasterSoundMute");
static_assert(sizeof(TslGameOption_IsMasterSoundMute) == 0x000001, "Wrong size on TslGameOption_IsMasterSoundMute");
static_assert(offsetof(TslGameOption_IsMasterSoundMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsMasterSoundMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsModifierKey
// 0x0028 (0x0028 - 0x0000)
struct TslGameOption_IsModifierKey final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_IsModifierKey) == 0x000008, "Wrong alignment on TslGameOption_IsModifierKey");
static_assert(sizeof(TslGameOption_IsModifierKey) == 0x000028, "Wrong size on TslGameOption_IsModifierKey");
static_assert(offsetof(TslGameOption_IsModifierKey, Key) == 0x000000, "Member 'TslGameOption_IsModifierKey::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsModifierKey, ReturnValue) == 0x000020, "Member 'TslGameOption_IsModifierKey::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsMouseWheelInput
// 0x0028 (0x0028 - 0x0000)
struct TslGameOption_IsMouseWheelInput final
{
public:
	struct FTslInputKey                           InInputedKey;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_IsMouseWheelInput) == 0x000008, "Wrong alignment on TslGameOption_IsMouseWheelInput");
static_assert(sizeof(TslGameOption_IsMouseWheelInput) == 0x000028, "Wrong size on TslGameOption_IsMouseWheelInput");
static_assert(offsetof(TslGameOption_IsMouseWheelInput, InInputedKey) == 0x000000, "Member 'TslGameOption_IsMouseWheelInput::InInputedKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_IsMouseWheelInput, ReturnValue) == 0x000020, "Member 'TslGameOption_IsMouseWheelInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsUISoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsUISoundMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsUISoundMute) == 0x000001, "Wrong alignment on TslGameOption_IsUISoundMute");
static_assert(sizeof(TslGameOption_IsUISoundMute) == 0x000001, "Wrong size on TslGameOption_IsUISoundMute");
static_assert(offsetof(TslGameOption_IsUISoundMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsUISoundMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsVoiceInputMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsVoiceInputMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsVoiceInputMute) == 0x000001, "Wrong alignment on TslGameOption_IsVoiceInputMute");
static_assert(sizeof(TslGameOption_IsVoiceInputMute) == 0x000001, "Wrong size on TslGameOption_IsVoiceInputMute");
static_assert(offsetof(TslGameOption_IsVoiceInputMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsVoiceInputMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsVoiceOutputMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsVoiceOutputMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsVoiceOutputMute) == 0x000001, "Wrong alignment on TslGameOption_IsVoiceOutputMute");
static_assert(sizeof(TslGameOption_IsVoiceOutputMute) == 0x000001, "Wrong size on TslGameOption_IsVoiceOutputMute");
static_assert(offsetof(TslGameOption_IsVoiceOutputMute, ReturnValue) == 0x000000, "Member 'TslGameOption_IsVoiceOutputMute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.IsVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_IsVSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_IsVSyncEnabled) == 0x000001, "Wrong alignment on TslGameOption_IsVSyncEnabled");
static_assert(sizeof(TslGameOption_IsVSyncEnabled) == 0x000001, "Wrong size on TslGameOption_IsVSyncEnabled");
static_assert(offsetof(TslGameOption_IsVSyncEnabled, ReturnValue) == 0x000000, "Member 'TslGameOption_IsVSyncEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.NotDuplicateCategoryNames
// 0x0018 (0x0018 - 0x0000)
struct TslGameOption_NotDuplicateCategoryNames final
{
public:
	struct FName                                   CatecoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_NotDuplicateCategoryNames) == 0x000008, "Wrong alignment on TslGameOption_NotDuplicateCategoryNames");
static_assert(sizeof(TslGameOption_NotDuplicateCategoryNames) == 0x000018, "Wrong size on TslGameOption_NotDuplicateCategoryNames");
static_assert(offsetof(TslGameOption_NotDuplicateCategoryNames, CatecoryName) == 0x000000, "Member 'TslGameOption_NotDuplicateCategoryNames::CatecoryName' has a wrong offset!");
static_assert(offsetof(TslGameOption_NotDuplicateCategoryNames, ReturnValue) == 0x000008, "Member 'TslGameOption_NotDuplicateCategoryNames::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameOption.SetActionKey
// 0x0030 (0x0030 - 0x0000)
struct TslGameOption_SetActionKey final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTslInputKey                           NewKey;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyBindingSlot                               InKeyBindingSlot;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_SetActionKey) == 0x000008, "Wrong alignment on TslGameOption_SetActionKey");
static_assert(sizeof(TslGameOption_SetActionKey) == 0x000030, "Wrong size on TslGameOption_SetActionKey");
static_assert(offsetof(TslGameOption_SetActionKey, ActionName) == 0x000000, "Member 'TslGameOption_SetActionKey::ActionName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetActionKey, NewKey) == 0x000008, "Member 'TslGameOption_SetActionKey::NewKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetActionKey, InKeyBindingSlot) == 0x000028, "Member 'TslGameOption_SetActionKey::InKeyBindingSlot' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetActionKey, bGamepad) == 0x000029, "Member 'TslGameOption_SetActionKey::bGamepad' has a wrong offset!");

// Function TslGame.TslGameOption.SetActionKeys
// 0x0018 (0x0018 - 0x0000)
struct TslGameOption_SetActionKeys final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTslInputKey>                   NewKeys;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetActionKeys) == 0x000008, "Wrong alignment on TslGameOption_SetActionKeys");
static_assert(sizeof(TslGameOption_SetActionKeys) == 0x000018, "Wrong size on TslGameOption_SetActionKeys");
static_assert(offsetof(TslGameOption_SetActionKeys, ActionName) == 0x000000, "Member 'TslGameOption_SetActionKeys::ActionName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetActionKeys, NewKeys) == 0x000008, "Member 'TslGameOption_SetActionKeys::NewKeys' has a wrong offset!");

// Function TslGame.TslGameOption.SetActionKeysToDefault
// 0x0008 (0x0008 - 0x0000)
struct TslGameOption_SetActionKeysToDefault final
{
public:
	struct FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetActionKeysToDefault) == 0x000004, "Wrong alignment on TslGameOption_SetActionKeysToDefault");
static_assert(sizeof(TslGameOption_SetActionKeysToDefault) == 0x000008, "Wrong size on TslGameOption_SetActionKeysToDefault");
static_assert(offsetof(TslGameOption_SetActionKeysToDefault, ActionName) == 0x000000, "Member 'TslGameOption_SetActionKeysToDefault::ActionName' has a wrong offset!");

// Function TslGame.TslGameOption.SetAxisKey
// 0x0038 (0x0038 - 0x0000)
struct TslGameOption_SetAxisKey final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTslInputKey                           NewKey;                                            // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyBindingSlot                               InKeyBindingSlot;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_SetAxisKey) == 0x000008, "Wrong alignment on TslGameOption_SetAxisKey");
static_assert(sizeof(TslGameOption_SetAxisKey) == 0x000038, "Wrong size on TslGameOption_SetAxisKey");
static_assert(offsetof(TslGameOption_SetAxisKey, AxisName) == 0x000000, "Member 'TslGameOption_SetAxisKey::AxisName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKey, Scale) == 0x000008, "Member 'TslGameOption_SetAxisKey::Scale' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKey, NewKey) == 0x000010, "Member 'TslGameOption_SetAxisKey::NewKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKey, InKeyBindingSlot) == 0x000030, "Member 'TslGameOption_SetAxisKey::InKeyBindingSlot' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKey, bGamepad) == 0x000031, "Member 'TslGameOption_SetAxisKey::bGamepad' has a wrong offset!");

// Function TslGame.TslGameOption.SetAxisKeys
// 0x0020 (0x0020 - 0x0000)
struct TslGameOption_SetAxisKeys final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTslInputKey>                   NewKeys;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetAxisKeys) == 0x000008, "Wrong alignment on TslGameOption_SetAxisKeys");
static_assert(sizeof(TslGameOption_SetAxisKeys) == 0x000020, "Wrong size on TslGameOption_SetAxisKeys");
static_assert(offsetof(TslGameOption_SetAxisKeys, AxisName) == 0x000000, "Member 'TslGameOption_SetAxisKeys::AxisName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKeys, Scale) == 0x000008, "Member 'TslGameOption_SetAxisKeys::Scale' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKeys, NewKeys) == 0x000010, "Member 'TslGameOption_SetAxisKeys::NewKeys' has a wrong offset!");

// Function TslGame.TslGameOption.SetAxisKeysToDefault
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_SetAxisKeysToDefault final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_SetAxisKeysToDefault) == 0x000004, "Wrong alignment on TslGameOption_SetAxisKeysToDefault");
static_assert(sizeof(TslGameOption_SetAxisKeysToDefault) == 0x000010, "Wrong size on TslGameOption_SetAxisKeysToDefault");
static_assert(offsetof(TslGameOption_SetAxisKeysToDefault, AxisName) == 0x000000, "Member 'TslGameOption_SetAxisKeysToDefault::AxisName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetAxisKeysToDefault, Scale) == 0x000008, "Member 'TslGameOption_SetAxisKeysToDefault::Scale' has a wrong offset!");

// Function TslGame.TslGameOption.SetBGMSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetBGMSoundMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetBGMSoundMute) == 0x000001, "Wrong alignment on TslGameOption_SetBGMSoundMute");
static_assert(sizeof(TslGameOption_SetBGMSoundMute) == 0x000001, "Wrong size on TslGameOption_SetBGMSoundMute");
static_assert(offsetof(TslGameOption_SetBGMSoundMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetBGMSoundMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetBGMSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetBGMSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetBGMSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_SetBGMSoundVolume");
static_assert(sizeof(TslGameOption_SetBGMSoundVolume) == 0x000004, "Wrong size on TslGameOption_SetBGMSoundVolume");
static_assert(offsetof(TslGameOption_SetBGMSoundVolume, Volume) == 0x000000, "Member 'TslGameOption_SetBGMSoundVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetCurrentColorBlindKey
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetCurrentColorBlindKey final
{
public:
	EColorBlindType                               ColorBlindKey;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetCurrentColorBlindKey) == 0x000001, "Wrong alignment on TslGameOption_SetCurrentColorBlindKey");
static_assert(sizeof(TslGameOption_SetCurrentColorBlindKey) == 0x000001, "Wrong size on TslGameOption_SetCurrentColorBlindKey");
static_assert(offsetof(TslGameOption_SetCurrentColorBlindKey, ColorBlindKey) == 0x000000, "Member 'TslGameOption_SetCurrentColorBlindKey::ColorBlindKey' has a wrong offset!");

// Function TslGame.TslGameOption.SetCurrentColorBlindKeyByInt
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetCurrentColorBlindKeyByInt final
{
public:
	int32                                         ColorBlindKey;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetCurrentColorBlindKeyByInt) == 0x000004, "Wrong alignment on TslGameOption_SetCurrentColorBlindKeyByInt");
static_assert(sizeof(TslGameOption_SetCurrentColorBlindKeyByInt) == 0x000004, "Wrong size on TslGameOption_SetCurrentColorBlindKeyByInt");
static_assert(offsetof(TslGameOption_SetCurrentColorBlindKeyByInt, ColorBlindKey) == 0x000000, "Member 'TslGameOption_SetCurrentColorBlindKeyByInt::ColorBlindKey' has a wrong offset!");

// Function TslGame.TslGameOption.SetCurrentCrosshairColorString
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_SetCurrentCrosshairColorString final
{
public:
	class FString                                 CrosshairColorStr;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetCurrentCrosshairColorString) == 0x000008, "Wrong alignment on TslGameOption_SetCurrentCrosshairColorString");
static_assert(sizeof(TslGameOption_SetCurrentCrosshairColorString) == 0x000010, "Wrong size on TslGameOption_SetCurrentCrosshairColorString");
static_assert(offsetof(TslGameOption_SetCurrentCrosshairColorString, CrosshairColorStr) == 0x000000, "Member 'TslGameOption_SetCurrentCrosshairColorString::CrosshairColorStr' has a wrong offset!");

// Function TslGame.TslGameOption.SetCurrentCultureName
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_SetCurrentCultureName final
{
public:
	class FString                                 InCultureName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetCurrentCultureName) == 0x000008, "Wrong alignment on TslGameOption_SetCurrentCultureName");
static_assert(sizeof(TslGameOption_SetCurrentCultureName) == 0x000010, "Wrong size on TslGameOption_SetCurrentCultureName");
static_assert(offsetof(TslGameOption_SetCurrentCultureName, InCultureName) == 0x000000, "Member 'TslGameOption_SetCurrentCultureName::InCultureName' has a wrong offset!");

// Function TslGame.TslGameOption.SetCurrentProvider
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_SetCurrentProvider final
{
public:
	class FString                                 ProviderName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetCurrentProvider) == 0x000008, "Wrong alignment on TslGameOption_SetCurrentProvider");
static_assert(sizeof(TslGameOption_SetCurrentProvider) == 0x000010, "Wrong size on TslGameOption_SetCurrentProvider");
static_assert(offsetof(TslGameOption_SetCurrentProvider, ProviderName) == 0x000000, "Member 'TslGameOption_SetCurrentProvider::ProviderName' has a wrong offset!");

// Function TslGame.TslGameOption.SetEffectSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetEffectSoundMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetEffectSoundMute) == 0x000001, "Wrong alignment on TslGameOption_SetEffectSoundMute");
static_assert(sizeof(TslGameOption_SetEffectSoundMute) == 0x000001, "Wrong size on TslGameOption_SetEffectSoundMute");
static_assert(offsetof(TslGameOption_SetEffectSoundMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetEffectSoundMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetEffectSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetEffectSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetEffectSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_SetEffectSoundVolume");
static_assert(sizeof(TslGameOption_SetEffectSoundVolume) == 0x000004, "Wrong size on TslGameOption_SetEffectSoundVolume");
static_assert(offsetof(TslGameOption_SetEffectSoundVolume, Volume) == 0x000000, "Member 'TslGameOption_SetEffectSoundVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetEnableFunctionality
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_SetEnableFunctionality final
{
public:
	EGameplayFunctionalities                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetEnableFunctionality) == 0x000001, "Wrong alignment on TslGameOption_SetEnableFunctionality");
static_assert(sizeof(TslGameOption_SetEnableFunctionality) == 0x000002, "Wrong size on TslGameOption_SetEnableFunctionality");
static_assert(offsetof(TslGameOption_SetEnableFunctionality, eAction) == 0x000000, "Member 'TslGameOption_SetEnableFunctionality::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetEnableFunctionality, bValue) == 0x000001, "Member 'TslGameOption_SetEnableFunctionality::bValue' has a wrong offset!");

// Function TslGame.TslGameOption.SetEquipableIteIconShow
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetEquipableIteIconShow final
{
public:
	bool                                          bNewShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetEquipableIteIconShow) == 0x000001, "Wrong alignment on TslGameOption_SetEquipableIteIconShow");
static_assert(sizeof(TslGameOption_SetEquipableIteIconShow) == 0x000001, "Wrong size on TslGameOption_SetEquipableIteIconShow");
static_assert(offsetof(TslGameOption_SetEquipableIteIconShow, bNewShow) == 0x000000, "Member 'TslGameOption_SetEquipableIteIconShow::bNewShow' has a wrong offset!");

// Function TslGame.TslGameOption.SetFppEquipableItemIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetFppEquipableItemIconShowType final
{
public:
	EUiShowType                                   NewShowType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetFppEquipableItemIconShowType) == 0x000001, "Wrong alignment on TslGameOption_SetFppEquipableItemIconShowType");
static_assert(sizeof(TslGameOption_SetFppEquipableItemIconShowType) == 0x000001, "Wrong size on TslGameOption_SetFppEquipableItemIconShowType");
static_assert(offsetof(TslGameOption_SetFppEquipableItemIconShowType, NewShowType) == 0x000000, "Member 'TslGameOption_SetFppEquipableItemIconShowType::NewShowType' has a wrong offset!");

// Function TslGame.TslGameOption.SetFppWeaponIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetFppWeaponIconShowType final
{
public:
	EUiShowType                                   NewShowType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetFppWeaponIconShowType) == 0x000001, "Wrong alignment on TslGameOption_SetFppWeaponIconShowType");
static_assert(sizeof(TslGameOption_SetFppWeaponIconShowType) == 0x000001, "Wrong size on TslGameOption_SetFppWeaponIconShowType");
static_assert(offsetof(TslGameOption_SetFppWeaponIconShowType, NewShowType) == 0x000000, "Member 'TslGameOption_SetFppWeaponIconShowType::NewShowType' has a wrong offset!");

// Function TslGame.TslGameOption.SetFpsCameraFov
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetFpsCameraFov final
{
public:
	float                                         NewFovValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetFpsCameraFov) == 0x000004, "Wrong alignment on TslGameOption_SetFpsCameraFov");
static_assert(sizeof(TslGameOption_SetFpsCameraFov) == 0x000004, "Wrong size on TslGameOption_SetFpsCameraFov");
static_assert(offsetof(TslGameOption_SetFpsCameraFov, NewFovValue) == 0x000000, "Member 'TslGameOption_SetFpsCameraFov::NewFovValue' has a wrong offset!");

// Function TslGame.TslGameOption.SetFpsWeaponSlotShow
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetFpsWeaponSlotShow final
{
public:
	bool                                          bNewShow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetFpsWeaponSlotShow) == 0x000001, "Wrong alignment on TslGameOption_SetFpsWeaponSlotShow");
static_assert(sizeof(TslGameOption_SetFpsWeaponSlotShow) == 0x000001, "Wrong size on TslGameOption_SetFpsWeaponSlotShow");
static_assert(offsetof(TslGameOption_SetFpsWeaponSlotShow, bNewShow) == 0x000000, "Member 'TslGameOption_SetFpsWeaponSlotShow::bNewShow' has a wrong offset!");

// Function TslGame.TslGameOption.SetFullScreen
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetFullScreen final
{
public:
	EWindowMode                                   InFullscreenMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetFullScreen) == 0x000001, "Wrong alignment on TslGameOption_SetFullScreen");
static_assert(sizeof(TslGameOption_SetFullScreen) == 0x000001, "Wrong size on TslGameOption_SetFullScreen");
static_assert(offsetof(TslGameOption_SetFullScreen, InFullscreenMode) == 0x000000, "Member 'TslGameOption_SetFullScreen::InFullscreenMode' has a wrong offset!");

// Function TslGame.TslGameOption.SetGamma
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetGamma final
{
public:
	float                                         Gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetGamma) == 0x000004, "Wrong alignment on TslGameOption_SetGamma");
static_assert(sizeof(TslGameOption_SetGamma) == 0x000004, "Wrong size on TslGameOption_SetGamma");
static_assert(offsetof(TslGameOption_SetGamma, Gamma) == 0x000000, "Member 'TslGameOption_SetGamma::Gamma' has a wrong offset!");

// Function TslGame.TslGameOption.SetInputKey_Internal
// 0x0038 (0x0038 - 0x0000)
struct TslGameOption_SetInputKey_Internal final
{
public:
	TArray<struct FTslInputKey>                   OutKeyList;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTslInputKey                           NewKey;                                            // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyBindingSlot                               InKeyBindingSlot;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_SetInputKey_Internal) == 0x000008, "Wrong alignment on TslGameOption_SetInputKey_Internal");
static_assert(sizeof(TslGameOption_SetInputKey_Internal) == 0x000038, "Wrong size on TslGameOption_SetInputKey_Internal");
static_assert(offsetof(TslGameOption_SetInputKey_Internal, OutKeyList) == 0x000000, "Member 'TslGameOption_SetInputKey_Internal::OutKeyList' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetInputKey_Internal, NewKey) == 0x000010, "Member 'TslGameOption_SetInputKey_Internal::NewKey' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetInputKey_Internal, InKeyBindingSlot) == 0x000030, "Member 'TslGameOption_SetInputKey_Internal::InKeyBindingSlot' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetInputKey_Internal, bGamepad) == 0x000031, "Member 'TslGameOption_SetInputKey_Internal::bGamepad' has a wrong offset!");

// Function TslGame.TslGameOption.SetInvertMouse
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetInvertMouse final
{
public:
	bool                                          bInvert;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetInvertMouse) == 0x000001, "Wrong alignment on TslGameOption_SetInvertMouse");
static_assert(sizeof(TslGameOption_SetInvertMouse) == 0x000001, "Wrong size on TslGameOption_SetInvertMouse");
static_assert(offsetof(TslGameOption_SetInvertMouse, bInvert) == 0x000000, "Member 'TslGameOption_SetInvertMouse::bInvert' has a wrong offset!");

// Function TslGame.TslGameOption.SetMasterSoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetMasterSoundMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetMasterSoundMute) == 0x000001, "Wrong alignment on TslGameOption_SetMasterSoundMute");
static_assert(sizeof(TslGameOption_SetMasterSoundMute) == 0x000001, "Wrong size on TslGameOption_SetMasterSoundMute");
static_assert(offsetof(TslGameOption_SetMasterSoundMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetMasterSoundMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetMasterSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetMasterSoundVolume) == 0x000004, "Wrong alignment on TslGameOption_SetMasterSoundVolume");
static_assert(sizeof(TslGameOption_SetMasterSoundVolume) == 0x000004, "Wrong size on TslGameOption_SetMasterSoundVolume");
static_assert(offsetof(TslGameOption_SetMasterSoundVolume, Volume) == 0x000000, "Member 'TslGameOption_SetMasterSoundVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetMotionBlur final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetMotionBlur) == 0x000001, "Wrong alignment on TslGameOption_SetMotionBlur");
static_assert(sizeof(TslGameOption_SetMotionBlur) == 0x000001, "Wrong size on TslGameOption_SetMotionBlur");
static_assert(offsetof(TslGameOption_SetMotionBlur, bEnabled) == 0x000000, "Member 'TslGameOption_SetMotionBlur::bEnabled' has a wrong offset!");

// Function TslGame.TslGameOption.SetMouseSensitivity
// 0x0010 (0x0010 - 0x0000)
struct TslGameOption_SetMouseSensitivity final
{
public:
	struct FName                                   InMouseSensitiveName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMouseSensitivity;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameOption_SetMouseSensitivity) == 0x000004, "Wrong alignment on TslGameOption_SetMouseSensitivity");
static_assert(sizeof(TslGameOption_SetMouseSensitivity) == 0x000010, "Wrong size on TslGameOption_SetMouseSensitivity");
static_assert(offsetof(TslGameOption_SetMouseSensitivity, InMouseSensitiveName) == 0x000000, "Member 'TslGameOption_SetMouseSensitivity::InMouseSensitiveName' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetMouseSensitivity, InMouseSensitivity) == 0x000008, "Member 'TslGameOption_SetMouseSensitivity::InMouseSensitivity' has a wrong offset!");

// Function TslGame.TslGameOption.SetOverallScalabilityLevel
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetOverallScalabilityLevel final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetOverallScalabilityLevel) == 0x000004, "Wrong alignment on TslGameOption_SetOverallScalabilityLevel");
static_assert(sizeof(TslGameOption_SetOverallScalabilityLevel) == 0x000004, "Wrong size on TslGameOption_SetOverallScalabilityLevel");
static_assert(offsetof(TslGameOption_SetOverallScalabilityLevel, Value) == 0x000000, "Member 'TslGameOption_SetOverallScalabilityLevel::Value' has a wrong offset!");

// Function TslGame.TslGameOption.SetQualityLevel
// 0x0008 (0x0008 - 0x0000)
struct TslGameOption_SetQualityLevel final
{
public:
	EQualityType                                  Quality;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QualityLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetQualityLevel) == 0x000004, "Wrong alignment on TslGameOption_SetQualityLevel");
static_assert(sizeof(TslGameOption_SetQualityLevel) == 0x000008, "Wrong size on TslGameOption_SetQualityLevel");
static_assert(offsetof(TslGameOption_SetQualityLevel, Quality) == 0x000000, "Member 'TslGameOption_SetQualityLevel::Quality' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetQualityLevel, QualityLevel) == 0x000004, "Member 'TslGameOption_SetQualityLevel::QualityLevel' has a wrong offset!");

// Function TslGame.TslGameOption.SetScreenResoultion
// 0x0008 (0x0008 - 0x0000)
struct TslGameOption_SetScreenResoultion final
{
public:
	struct FScreenResolution                      ScreenResolution;                                  // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetScreenResoultion) == 0x000004, "Wrong alignment on TslGameOption_SetScreenResoultion");
static_assert(sizeof(TslGameOption_SetScreenResoultion) == 0x000008, "Wrong size on TslGameOption_SetScreenResoultion");
static_assert(offsetof(TslGameOption_SetScreenResoultion, ScreenResolution) == 0x000000, "Member 'TslGameOption_SetScreenResoultion::ScreenResolution' has a wrong offset!");

// Function TslGame.TslGameOption.SetScreenScale
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetScreenScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetScreenScale) == 0x000004, "Wrong alignment on TslGameOption_SetScreenScale");
static_assert(sizeof(TslGameOption_SetScreenScale) == 0x000004, "Wrong size on TslGameOption_SetScreenScale");
static_assert(offsetof(TslGameOption_SetScreenScale, Value) == 0x000000, "Member 'TslGameOption_SetScreenScale::Value' has a wrong offset!");

// Function TslGame.TslGameOption.SetSelectMinimapTypeIndex
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetSelectMinimapTypeIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetSelectMinimapTypeIndex) == 0x000004, "Wrong alignment on TslGameOption_SetSelectMinimapTypeIndex");
static_assert(sizeof(TslGameOption_SetSelectMinimapTypeIndex) == 0x000004, "Wrong size on TslGameOption_SetSelectMinimapTypeIndex");
static_assert(offsetof(TslGameOption_SetSelectMinimapTypeIndex, Index_0) == 0x000000, "Member 'TslGameOption_SetSelectMinimapTypeIndex::Index_0' has a wrong offset!");

// Function TslGame.TslGameOption.SetTpsWeaponIconShowType
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetTpsWeaponIconShowType final
{
public:
	EUiShowType                                   NewShowType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetTpsWeaponIconShowType) == 0x000001, "Wrong alignment on TslGameOption_SetTpsWeaponIconShowType");
static_assert(sizeof(TslGameOption_SetTpsWeaponIconShowType) == 0x000001, "Wrong size on TslGameOption_SetTpsWeaponIconShowType");
static_assert(offsetof(TslGameOption_SetTpsWeaponIconShowType, NewShowType) == 0x000000, "Member 'TslGameOption_SetTpsWeaponIconShowType::NewShowType' has a wrong offset!");

// Function TslGame.TslGameOption.SetTslInputMode
// 0x0002 (0x0002 - 0x0000)
struct TslGameOption_SetTslInputMode final
{
public:
	EInputModeSettingActions                      eAction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETslInputModes                                eTslInputMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetTslInputMode) == 0x000001, "Wrong alignment on TslGameOption_SetTslInputMode");
static_assert(sizeof(TslGameOption_SetTslInputMode) == 0x000002, "Wrong size on TslGameOption_SetTslInputMode");
static_assert(offsetof(TslGameOption_SetTslInputMode, eAction) == 0x000000, "Member 'TslGameOption_SetTslInputMode::eAction' has a wrong offset!");
static_assert(offsetof(TslGameOption_SetTslInputMode, eTslInputMode) == 0x000001, "Member 'TslGameOption_SetTslInputMode::eTslInputMode' has a wrong offset!");

// Function TslGame.TslGameOption.SetUISoundMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetUISoundMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUISoundMute) == 0x000001, "Wrong alignment on TslGameOption_SetUISoundMute");
static_assert(sizeof(TslGameOption_SetUISoundMute) == 0x000001, "Wrong size on TslGameOption_SetUISoundMute");
static_assert(offsetof(TslGameOption_SetUISoundMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetUISoundMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetUISoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetUISoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUISoundVolume) == 0x000004, "Wrong alignment on TslGameOption_SetUISoundVolume");
static_assert(sizeof(TslGameOption_SetUISoundVolume) == 0x000004, "Wrong size on TslGameOption_SetUISoundVolume");
static_assert(offsetof(TslGameOption_SetUISoundVolume, Volume) == 0x000000, "Member 'TslGameOption_SetUISoundVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetUseCharacterCapture
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetUseCharacterCapture final
{
public:
	bool                                          bUseCharacterCapture;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUseCharacterCapture) == 0x000001, "Wrong alignment on TslGameOption_SetUseCharacterCapture");
static_assert(sizeof(TslGameOption_SetUseCharacterCapture) == 0x000001, "Wrong size on TslGameOption_SetUseCharacterCapture");
static_assert(offsetof(TslGameOption_SetUseCharacterCapture, bUseCharacterCapture) == 0x000000, "Member 'TslGameOption_SetUseCharacterCapture::bUseCharacterCapture' has a wrong offset!");

// Function TslGame.TslGameOption.SetUseGlobalVoice
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetUseGlobalVoice final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUseGlobalVoice) == 0x000001, "Wrong alignment on TslGameOption_SetUseGlobalVoice");
static_assert(sizeof(TslGameOption_SetUseGlobalVoice) == 0x000001, "Wrong size on TslGameOption_SetUseGlobalVoice");
static_assert(offsetof(TslGameOption_SetUseGlobalVoice, bUse) == 0x000000, "Member 'TslGameOption_SetUseGlobalVoice::bUse' has a wrong offset!");

// Function TslGame.TslGameOption.SetUsePushToTalk
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetUsePushToTalk final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUsePushToTalk) == 0x000001, "Wrong alignment on TslGameOption_SetUsePushToTalk");
static_assert(sizeof(TslGameOption_SetUsePushToTalk) == 0x000001, "Wrong size on TslGameOption_SetUsePushToTalk");
static_assert(offsetof(TslGameOption_SetUsePushToTalk, bUse) == 0x000000, "Member 'TslGameOption_SetUsePushToTalk::bUse' has a wrong offset!");

// Function TslGame.TslGameOption.SetUseTeamVoice
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetUseTeamVoice final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetUseTeamVoice) == 0x000001, "Wrong alignment on TslGameOption_SetUseTeamVoice");
static_assert(sizeof(TslGameOption_SetUseTeamVoice) == 0x000001, "Wrong size on TslGameOption_SetUseTeamVoice");
static_assert(offsetof(TslGameOption_SetUseTeamVoice, bUse) == 0x000000, "Member 'TslGameOption_SetUseTeamVoice::bUse' has a wrong offset!");

// Function TslGame.TslGameOption.SetVoiceInputMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetVoiceInputMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetVoiceInputMute) == 0x000001, "Wrong alignment on TslGameOption_SetVoiceInputMute");
static_assert(sizeof(TslGameOption_SetVoiceInputMute) == 0x000001, "Wrong size on TslGameOption_SetVoiceInputMute");
static_assert(offsetof(TslGameOption_SetVoiceInputMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetVoiceInputMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetVoiceInputVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetVoiceInputVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetVoiceInputVolume) == 0x000004, "Wrong alignment on TslGameOption_SetVoiceInputVolume");
static_assert(sizeof(TslGameOption_SetVoiceInputVolume) == 0x000004, "Wrong size on TslGameOption_SetVoiceInputVolume");
static_assert(offsetof(TslGameOption_SetVoiceInputVolume, Volume) == 0x000000, "Member 'TslGameOption_SetVoiceInputVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetVoiceOutputMute
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetVoiceOutputMute final
{
public:
	bool                                          bIsMute;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetVoiceOutputMute) == 0x000001, "Wrong alignment on TslGameOption_SetVoiceOutputMute");
static_assert(sizeof(TslGameOption_SetVoiceOutputMute) == 0x000001, "Wrong size on TslGameOption_SetVoiceOutputMute");
static_assert(offsetof(TslGameOption_SetVoiceOutputMute, bIsMute) == 0x000000, "Member 'TslGameOption_SetVoiceOutputMute::bIsMute' has a wrong offset!");

// Function TslGame.TslGameOption.SetVoiceOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetVoiceOutputVolume final
{
public:
	int32                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetVoiceOutputVolume) == 0x000004, "Wrong alignment on TslGameOption_SetVoiceOutputVolume");
static_assert(sizeof(TslGameOption_SetVoiceOutputVolume) == 0x000004, "Wrong size on TslGameOption_SetVoiceOutputVolume");
static_assert(offsetof(TslGameOption_SetVoiceOutputVolume, Volume) == 0x000000, "Member 'TslGameOption_SetVoiceOutputVolume::Volume' has a wrong offset!");

// Function TslGame.TslGameOption.SetVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslGameOption_SetVSyncEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetVSyncEnabled) == 0x000001, "Wrong alignment on TslGameOption_SetVSyncEnabled");
static_assert(sizeof(TslGameOption_SetVSyncEnabled) == 0x000001, "Wrong size on TslGameOption_SetVSyncEnabled");
static_assert(offsetof(TslGameOption_SetVSyncEnabled, bEnable) == 0x000000, "Member 'TslGameOption_SetVSyncEnabled::bEnable' has a wrong offset!");

// Function TslGame.TslGameOption.SetWorldMapZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct TslGameOption_SetWorldMapZoomLevel final
{
public:
	int32                                         NewZoomLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_SetWorldMapZoomLevel) == 0x000004, "Wrong alignment on TslGameOption_SetWorldMapZoomLevel");
static_assert(sizeof(TslGameOption_SetWorldMapZoomLevel) == 0x000004, "Wrong size on TslGameOption_SetWorldMapZoomLevel");
static_assert(offsetof(TslGameOption_SetWorldMapZoomLevel, NewZoomLevel) == 0x000000, "Member 'TslGameOption_SetWorldMapZoomLevel::NewZoomLevel' has a wrong offset!");

// Function TslGame.TslGameOption.WheelAxisNameToWheelActionName
// 0x0040 (0x0040 - 0x0000)
struct TslGameOption_WheelAxisNameToWheelActionName final
{
public:
	struct FTslInputKey                           Key;                                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         InAxisScale;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameOption_WheelAxisNameToWheelActionName) == 0x000008, "Wrong alignment on TslGameOption_WheelAxisNameToWheelActionName");
static_assert(sizeof(TslGameOption_WheelAxisNameToWheelActionName) == 0x000040, "Wrong size on TslGameOption_WheelAxisNameToWheelActionName");
static_assert(offsetof(TslGameOption_WheelAxisNameToWheelActionName, Key) == 0x000000, "Member 'TslGameOption_WheelAxisNameToWheelActionName::Key' has a wrong offset!");
static_assert(offsetof(TslGameOption_WheelAxisNameToWheelActionName, InAxisScale) == 0x000020, "Member 'TslGameOption_WheelAxisNameToWheelActionName::InAxisScale' has a wrong offset!");
static_assert(offsetof(TslGameOption_WheelAxisNameToWheelActionName, ReturnValue) == 0x000028, "Member 'TslGameOption_WheelAxisNameToWheelActionName::ReturnValue' has a wrong offset!");

// Function TslGame.DroppedItemInteractionComponent.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct DroppedItemInteractionComponent_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DroppedItemInteractionComponent_AllowInteractBy) == 0x000008, "Wrong alignment on DroppedItemInteractionComponent_AllowInteractBy");
static_assert(sizeof(DroppedItemInteractionComponent_AllowInteractBy) == 0x000010, "Wrong size on DroppedItemInteractionComponent_AllowInteractBy");
static_assert(offsetof(DroppedItemInteractionComponent_AllowInteractBy, Character) == 0x000000, "Member 'DroppedItemInteractionComponent_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(DroppedItemInteractionComponent_AllowInteractBy, ReturnValue) == 0x000008, "Member 'DroppedItemInteractionComponent_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.AllowInteractDelegate
// 0x0010 (0x0010 - 0x0000)
struct VehicleSeatInteractionComponent_AllowInteractDelegate final
{
public:
	const class ATslCharacter*                    OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSeatInteractionComponent_AllowInteractDelegate) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_AllowInteractDelegate");
static_assert(sizeof(VehicleSeatInteractionComponent_AllowInteractDelegate) == 0x000010, "Wrong size on VehicleSeatInteractionComponent_AllowInteractDelegate");
static_assert(offsetof(VehicleSeatInteractionComponent_AllowInteractDelegate, OtherCharacter) == 0x000000, "Member 'VehicleSeatInteractionComponent_AllowInteractDelegate::OtherCharacter' has a wrong offset!");
static_assert(offsetof(VehicleSeatInteractionComponent_AllowInteractDelegate, ReturnValue) == 0x000008, "Member 'VehicleSeatInteractionComponent_AllowInteractDelegate::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetMaxPitchByYaw
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetMaxPitchByYaw final
{
public:
	float                                         CurrentYaw;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetMaxPitchByYaw) == 0x000004, "Wrong alignment on VehicleSeatInteractionComponent_GetMaxPitchByYaw");
static_assert(sizeof(VehicleSeatInteractionComponent_GetMaxPitchByYaw) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetMaxPitchByYaw");
static_assert(offsetof(VehicleSeatInteractionComponent_GetMaxPitchByYaw, CurrentYaw) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetMaxPitchByYaw::CurrentYaw' has a wrong offset!");
static_assert(offsetof(VehicleSeatInteractionComponent_GetMaxPitchByYaw, ReturnValue) == 0x000004, "Member 'VehicleSeatInteractionComponent_GetMaxPitchByYaw::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetMinPitchByYaw
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetMinPitchByYaw final
{
public:
	float                                         CurrentYaw;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetMinPitchByYaw) == 0x000004, "Wrong alignment on VehicleSeatInteractionComponent_GetMinPitchByYaw");
static_assert(sizeof(VehicleSeatInteractionComponent_GetMinPitchByYaw) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetMinPitchByYaw");
static_assert(offsetof(VehicleSeatInteractionComponent_GetMinPitchByYaw, CurrentYaw) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetMinPitchByYaw::CurrentYaw' has a wrong offset!");
static_assert(offsetof(VehicleSeatInteractionComponent_GetMinPitchByYaw, ReturnValue) == 0x000004, "Member 'VehicleSeatInteractionComponent_GetMinPitchByYaw::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.OnInteractDelegate
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_OnInteractDelegate final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_OnInteractDelegate) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_OnInteractDelegate");
static_assert(sizeof(VehicleSeatInteractionComponent_OnInteractDelegate) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_OnInteractDelegate");
static_assert(offsetof(VehicleSeatInteractionComponent_OnInteractDelegate, OtherCharacter) == 0x000000, "Member 'VehicleSeatInteractionComponent_OnInteractDelegate::OtherCharacter' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetAdditionalMessage
// 0x0020 (0x0020 - 0x0000)
struct VehicleSeatInteractionComponent_GetAdditionalMessage final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetAdditionalMessage) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetAdditionalMessage");
static_assert(sizeof(VehicleSeatInteractionComponent_GetAdditionalMessage) == 0x000020, "Wrong size on VehicleSeatInteractionComponent_GetAdditionalMessage");
static_assert(offsetof(VehicleSeatInteractionComponent_GetAdditionalMessage, Character) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetAdditionalMessage::Character' has a wrong offset!");
static_assert(offsetof(VehicleSeatInteractionComponent_GetAdditionalMessage, ReturnValue) == 0x000008, "Member 'VehicleSeatInteractionComponent_GetAdditionalMessage::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetCanFireOnlyWhileAimed
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed) == 0x000001, "Wrong alignment on VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed");
static_assert(sizeof(VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed) == 0x000001, "Wrong size on VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed");
static_assert(offsetof(VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetCanFireOnlyWhileAimed::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetRider
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetRider final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetRider) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetRider");
static_assert(sizeof(VehicleSeatInteractionComponent_GetRider) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetRider");
static_assert(offsetof(VehicleSeatInteractionComponent_GetRider, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetRider::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetSeatAimingBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetSeatAimingBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetSeatAimingBlendspace) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetSeatAimingBlendspace");
static_assert(sizeof(VehicleSeatInteractionComponent_GetSeatAimingBlendspace) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetSeatAimingBlendspace");
static_assert(offsetof(VehicleSeatInteractionComponent_GetSeatAimingBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetSeatAimingBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetSeatAimingFPPBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace");
static_assert(sizeof(VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace");
static_assert(offsetof(VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetSeatAimingFPPBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetSeatIdleAnimation
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetSeatIdleAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetSeatIdleAnimation) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetSeatIdleAnimation");
static_assert(sizeof(VehicleSeatInteractionComponent_GetSeatIdleAnimation) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetSeatIdleAnimation");
static_assert(offsetof(VehicleSeatInteractionComponent_GetSeatIdleAnimation, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetSeatIdleAnimation::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetSeatIdleAO
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetSeatIdleAO final
{
public:
	class UAimOffsetBlendSpace*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetSeatIdleAO) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetSeatIdleAO");
static_assert(sizeof(VehicleSeatInteractionComponent_GetSeatIdleAO) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetSeatIdleAO");
static_assert(offsetof(VehicleSeatInteractionComponent_GetSeatIdleAO, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetSeatIdleAO::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetTransitionInBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetTransitionInBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetTransitionInBlendspace) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetTransitionInBlendspace");
static_assert(sizeof(VehicleSeatInteractionComponent_GetTransitionInBlendspace) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetTransitionInBlendspace");
static_assert(offsetof(VehicleSeatInteractionComponent_GetTransitionInBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetTransitionInBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetTransitionOutBlendspace
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetTransitionOutBlendspace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetTransitionOutBlendspace) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetTransitionOutBlendspace");
static_assert(sizeof(VehicleSeatInteractionComponent_GetTransitionOutBlendspace) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetTransitionOutBlendspace");
static_assert(offsetof(VehicleSeatInteractionComponent_GetTransitionOutBlendspace, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetTransitionOutBlendspace::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetVehicleAnimType
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatInteractionComponent_GetVehicleAnimType final
{
public:
	EVehicleAnimType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetVehicleAnimType) == 0x000001, "Wrong alignment on VehicleSeatInteractionComponent_GetVehicleAnimType");
static_assert(sizeof(VehicleSeatInteractionComponent_GetVehicleAnimType) == 0x000001, "Wrong size on VehicleSeatInteractionComponent_GetVehicleAnimType");
static_assert(offsetof(VehicleSeatInteractionComponent_GetVehicleAnimType, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetVehicleAnimType::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetVehicleInterface
// 0x0010 (0x0010 - 0x0000)
struct VehicleSeatInteractionComponent_GetVehicleInterface final
{
public:
	TScriptInterface<class ITslVehicleInterface>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetVehicleInterface) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetVehicleInterface");
static_assert(sizeof(VehicleSeatInteractionComponent_GetVehicleInterface) == 0x000010, "Wrong size on VehicleSeatInteractionComponent_GetVehicleInterface");
static_assert(offsetof(VehicleSeatInteractionComponent_GetVehicleInterface, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetVehicleInterface::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetVehiclePawn
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetVehiclePawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetVehiclePawn) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetVehiclePawn");
static_assert(sizeof(VehicleSeatInteractionComponent_GetVehiclePawn) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetVehiclePawn");
static_assert(offsetof(VehicleSeatInteractionComponent_GetVehiclePawn, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetVehiclePawn::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.GetVehicleSeatComponent
// 0x0008 (0x0008 - 0x0000)
struct VehicleSeatInteractionComponent_GetVehicleSeatComponent final
{
public:
	class UTslVehicleSeatComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_GetVehicleSeatComponent) == 0x000008, "Wrong alignment on VehicleSeatInteractionComponent_GetVehicleSeatComponent");
static_assert(sizeof(VehicleSeatInteractionComponent_GetVehicleSeatComponent) == 0x000008, "Wrong size on VehicleSeatInteractionComponent_GetVehicleSeatComponent");
static_assert(offsetof(VehicleSeatInteractionComponent_GetVehicleSeatComponent, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_GetVehicleSeatComponent::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.IsEntryAllowedByVelocity
// 0x0001 (0x0001 - 0x0000)
struct VehicleSeatInteractionComponent_IsEntryAllowedByVelocity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_IsEntryAllowedByVelocity) == 0x000001, "Wrong alignment on VehicleSeatInteractionComponent_IsEntryAllowedByVelocity");
static_assert(sizeof(VehicleSeatInteractionComponent_IsEntryAllowedByVelocity) == 0x000001, "Wrong size on VehicleSeatInteractionComponent_IsEntryAllowedByVelocity");
static_assert(offsetof(VehicleSeatInteractionComponent_IsEntryAllowedByVelocity, ReturnValue) == 0x000000, "Member 'VehicleSeatInteractionComponent_IsEntryAllowedByVelocity::ReturnValue' has a wrong offset!");

// Function TslGame.VehicleSeatInteractionComponent.IsWeaponClassAllowed
// 0x0002 (0x0002 - 0x0000)
struct VehicleSeatInteractionComponent_IsWeaponClassAllowed final
{
public:
	EWeaponClass                                  InClass;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSeatInteractionComponent_IsWeaponClassAllowed) == 0x000001, "Wrong alignment on VehicleSeatInteractionComponent_IsWeaponClassAllowed");
static_assert(sizeof(VehicleSeatInteractionComponent_IsWeaponClassAllowed) == 0x000002, "Wrong size on VehicleSeatInteractionComponent_IsWeaponClassAllowed");
static_assert(offsetof(VehicleSeatInteractionComponent_IsWeaponClassAllowed, InClass) == 0x000000, "Member 'VehicleSeatInteractionComponent_IsWeaponClassAllowed::InClass' has a wrong offset!");
static_assert(offsetof(VehicleSeatInteractionComponent_IsWeaponClassAllowed, ReturnValue) == 0x000001, "Member 'VehicleSeatInteractionComponent_IsWeaponClassAllowed::ReturnValue' has a wrong offset!");

// Function TslGame.TslGunAnimInstance.HandleFiremodeMontage
// 0x0008 (0x0008 - 0x0000)
struct TslGunAnimInstance_HandleFiremodeMontage final
{
public:
	class UAnimMontage*                           FireModeMontage;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGunAnimInstance_HandleFiremodeMontage) == 0x000008, "Wrong alignment on TslGunAnimInstance_HandleFiremodeMontage");
static_assert(sizeof(TslGunAnimInstance_HandleFiremodeMontage) == 0x000008, "Wrong size on TslGunAnimInstance_HandleFiremodeMontage");
static_assert(offsetof(TslGunAnimInstance_HandleFiremodeMontage, FireModeMontage) == 0x000000, "Member 'TslGunAnimInstance_HandleFiremodeMontage::FireModeMontage' has a wrong offset!");

// Function TslGame.MotorbikeVehicleSeatInteraction.IsEntryAllowed
// 0x0001 (0x0001 - 0x0000)
struct MotorbikeVehicleSeatInteraction_IsEntryAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotorbikeVehicleSeatInteraction_IsEntryAllowed) == 0x000001, "Wrong alignment on MotorbikeVehicleSeatInteraction_IsEntryAllowed");
static_assert(sizeof(MotorbikeVehicleSeatInteraction_IsEntryAllowed) == 0x000001, "Wrong size on MotorbikeVehicleSeatInteraction_IsEntryAllowed");
static_assert(offsetof(MotorbikeVehicleSeatInteraction_IsEntryAllowed, ReturnValue) == 0x000000, "Member 'MotorbikeVehicleSeatInteraction_IsEntryAllowed::ReturnValue' has a wrong offset!");

// Function TslGame.FreeFallMovement.ServerUpdateInput
// 0x0010 (0x0010 - 0x0000)
struct FreeFallMovement_ServerUpdateInput final
{
public:
	float                                         InForwardInput;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRightInput;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDesiredPitchRotation;                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDesiredYawRotation;                              // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FreeFallMovement_ServerUpdateInput) == 0x000004, "Wrong alignment on FreeFallMovement_ServerUpdateInput");
static_assert(sizeof(FreeFallMovement_ServerUpdateInput) == 0x000010, "Wrong size on FreeFallMovement_ServerUpdateInput");
static_assert(offsetof(FreeFallMovement_ServerUpdateInput, InForwardInput) == 0x000000, "Member 'FreeFallMovement_ServerUpdateInput::InForwardInput' has a wrong offset!");
static_assert(offsetof(FreeFallMovement_ServerUpdateInput, InRightInput) == 0x000004, "Member 'FreeFallMovement_ServerUpdateInput::InRightInput' has a wrong offset!");
static_assert(offsetof(FreeFallMovement_ServerUpdateInput, InDesiredPitchRotation) == 0x000008, "Member 'FreeFallMovement_ServerUpdateInput::InDesiredPitchRotation' has a wrong offset!");
static_assert(offsetof(FreeFallMovement_ServerUpdateInput, InDesiredYawRotation) == 0x00000C, "Member 'FreeFallMovement_ServerUpdateInput::InDesiredYawRotation' has a wrong offset!");

// Function TslGame.FreeFallMovement.GetForwardInput
// 0x0004 (0x0004 - 0x0000)
struct FreeFallMovement_GetForwardInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FreeFallMovement_GetForwardInput) == 0x000004, "Wrong alignment on FreeFallMovement_GetForwardInput");
static_assert(sizeof(FreeFallMovement_GetForwardInput) == 0x000004, "Wrong size on FreeFallMovement_GetForwardInput");
static_assert(offsetof(FreeFallMovement_GetForwardInput, ReturnValue) == 0x000000, "Member 'FreeFallMovement_GetForwardInput::ReturnValue' has a wrong offset!");

// Function TslGame.FreeFallMovement.GetRightInput
// 0x0004 (0x0004 - 0x0000)
struct FreeFallMovement_GetRightInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FreeFallMovement_GetRightInput) == 0x000004, "Wrong alignment on FreeFallMovement_GetRightInput");
static_assert(sizeof(FreeFallMovement_GetRightInput) == 0x000004, "Wrong size on FreeFallMovement_GetRightInput");
static_assert(offsetof(FreeFallMovement_GetRightInput, ReturnValue) == 0x000000, "Member 'FreeFallMovement_GetRightInput::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicleMovement.ServerUpdateInput
// 0x0008 (0x0008 - 0x0000)
struct ParachuteVehicleMovement_ServerUpdateInput final
{
public:
	float                                         InForwardInput;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationInput;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicleMovement_ServerUpdateInput) == 0x000004, "Wrong alignment on ParachuteVehicleMovement_ServerUpdateInput");
static_assert(sizeof(ParachuteVehicleMovement_ServerUpdateInput) == 0x000008, "Wrong size on ParachuteVehicleMovement_ServerUpdateInput");
static_assert(offsetof(ParachuteVehicleMovement_ServerUpdateInput, InForwardInput) == 0x000000, "Member 'ParachuteVehicleMovement_ServerUpdateInput::InForwardInput' has a wrong offset!");
static_assert(offsetof(ParachuteVehicleMovement_ServerUpdateInput, InRotationInput) == 0x000004, "Member 'ParachuteVehicleMovement_ServerUpdateInput::InRotationInput' has a wrong offset!");

// Function TslGame.ParachuteVehicleMovement.GetClientRotation
// 0x000C (0x000C - 0x0000)
struct ParachuteVehicleMovement_GetClientRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicleMovement_GetClientRotation) == 0x000004, "Wrong alignment on ParachuteVehicleMovement_GetClientRotation");
static_assert(sizeof(ParachuteVehicleMovement_GetClientRotation) == 0x00000C, "Wrong size on ParachuteVehicleMovement_GetClientRotation");
static_assert(offsetof(ParachuteVehicleMovement_GetClientRotation, ReturnValue) == 0x000000, "Member 'ParachuteVehicleMovement_GetClientRotation::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicleMovement.GetForwardInput
// 0x0004 (0x0004 - 0x0000)
struct ParachuteVehicleMovement_GetForwardInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicleMovement_GetForwardInput) == 0x000004, "Wrong alignment on ParachuteVehicleMovement_GetForwardInput");
static_assert(sizeof(ParachuteVehicleMovement_GetForwardInput) == 0x000004, "Wrong size on ParachuteVehicleMovement_GetForwardInput");
static_assert(offsetof(ParachuteVehicleMovement_GetForwardInput, ReturnValue) == 0x000000, "Member 'ParachuteVehicleMovement_GetForwardInput::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicleMovement.GetRotationInput
// 0x0004 (0x0004 - 0x0000)
struct ParachuteVehicleMovement_GetRotationInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicleMovement_GetRotationInput) == 0x000004, "Wrong alignment on ParachuteVehicleMovement_GetRotationInput");
static_assert(sizeof(ParachuteVehicleMovement_GetRotationInput) == 0x000004, "Wrong size on ParachuteVehicleMovement_GetRotationInput");
static_assert(offsetof(ParachuteVehicleMovement_GetRotationInput, ReturnValue) == 0x000000, "Member 'ParachuteVehicleMovement_GetRotationInput::ReturnValue' has a wrong offset!");

// Function TslGame.ParachuteVehicleMovement.GetRotationYawRate
// 0x0004 (0x0004 - 0x0000)
struct ParachuteVehicleMovement_GetRotationYawRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParachuteVehicleMovement_GetRotationYawRate) == 0x000004, "Wrong alignment on ParachuteVehicleMovement_GetRotationYawRate");
static_assert(sizeof(ParachuteVehicleMovement_GetRotationYawRate) == 0x000004, "Wrong size on ParachuteVehicleMovement_GetRotationYawRate");
static_assert(offsetof(ParachuteVehicleMovement_GetRotationYawRate, ReturnValue) == 0x000000, "Member 'ParachuteVehicleMovement_GetRotationYawRate::ReturnValue' has a wrong offset!");

// Function TslGame.StanceComponent.ClientInitByReconnection
// 0x0001 (0x0001 - 0x0000)
struct StanceComponent_ClientInitByReconnection final
{
public:
	EStanceMode                                   InitStance;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StanceComponent_ClientInitByReconnection) == 0x000001, "Wrong alignment on StanceComponent_ClientInitByReconnection");
static_assert(sizeof(StanceComponent_ClientInitByReconnection) == 0x000001, "Wrong size on StanceComponent_ClientInitByReconnection");
static_assert(offsetof(StanceComponent_ClientInitByReconnection, InitStance) == 0x000000, "Member 'StanceComponent_ClientInitByReconnection::InitStance' has a wrong offset!");

// Function TslGame.StanceComponent.ServerChangeStance
// 0x0001 (0x0001 - 0x0000)
struct StanceComponent_ServerChangeStance final
{
public:
	EStanceMode                                   ToStance;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StanceComponent_ServerChangeStance) == 0x000001, "Wrong alignment on StanceComponent_ServerChangeStance");
static_assert(sizeof(StanceComponent_ServerChangeStance) == 0x000001, "Wrong size on StanceComponent_ServerChangeStance");
static_assert(offsetof(StanceComponent_ServerChangeStance, ToStance) == 0x000000, "Member 'StanceComponent_ServerChangeStance::ToStance' has a wrong offset!");

// Function TslGame.TslInstancedGlassWindowComponent.ClientNotifyHit
// 0x0020 (0x0020 - 0x0000)
struct TslInstancedGlassWindowComponent_ClientNotifyHit final
{
public:
	bool                                          bBlockingHit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    Location;                                          // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0010(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslInstancedGlassWindowComponent_ClientNotifyHit) == 0x000004, "Wrong alignment on TslInstancedGlassWindowComponent_ClientNotifyHit");
static_assert(sizeof(TslInstancedGlassWindowComponent_ClientNotifyHit) == 0x000020, "Wrong size on TslInstancedGlassWindowComponent_ClientNotifyHit");
static_assert(offsetof(TslInstancedGlassWindowComponent_ClientNotifyHit, bBlockingHit) == 0x000000, "Member 'TslInstancedGlassWindowComponent_ClientNotifyHit::bBlockingHit' has a wrong offset!");
static_assert(offsetof(TslInstancedGlassWindowComponent_ClientNotifyHit, Location) == 0x000004, "Member 'TslInstancedGlassWindowComponent_ClientNotifyHit::Location' has a wrong offset!");
static_assert(offsetof(TslInstancedGlassWindowComponent_ClientNotifyHit, ImpactNormal) == 0x000010, "Member 'TslInstancedGlassWindowComponent_ClientNotifyHit::ImpactNormal' has a wrong offset!");
static_assert(offsetof(TslInstancedGlassWindowComponent_ClientNotifyHit, InstanceIndex) == 0x00001C, "Member 'TslInstancedGlassWindowComponent_ClientNotifyHit::InstanceIndex' has a wrong offset!");

// Function TslGame.TslInstancedGlassWindowComponent.OnRep_ReplicatedOnClient
// 0x0001 (0x0001 - 0x0000)
struct TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient final
{
public:
	bool                                          bLastReplicatedOnClient;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient) == 0x000001, "Wrong alignment on TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient");
static_assert(sizeof(TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient) == 0x000001, "Wrong size on TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient");
static_assert(offsetof(TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient, bLastReplicatedOnClient) == 0x000000, "Member 'TslInstancedGlassWindowComponent_OnRep_ReplicatedOnClient::bLastReplicatedOnClient' has a wrong offset!");

// Function TslGame.TslPlayerStart.GetRandomStartLocation
// 0x000C (0x000C - 0x0000)
struct TslPlayerStart_GetRandomStartLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerStart_GetRandomStartLocation) == 0x000004, "Wrong alignment on TslPlayerStart_GetRandomStartLocation");
static_assert(sizeof(TslPlayerStart_GetRandomStartLocation) == 0x00000C, "Wrong size on TslPlayerStart_GetRandomStartLocation");
static_assert(offsetof(TslPlayerStart_GetRandomStartLocation, ReturnValue) == 0x000000, "Member 'TslPlayerStart_GetRandomStartLocation::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerStart.GetRandomStartYawRotation
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerStart_GetRandomStartYawRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerStart_GetRandomStartYawRotation) == 0x000004, "Wrong alignment on TslPlayerStart_GetRandomStartYawRotation");
static_assert(sizeof(TslPlayerStart_GetRandomStartYawRotation) == 0x000004, "Wrong size on TslPlayerStart_GetRandomStartYawRotation");
static_assert(offsetof(TslPlayerStart_GetRandomStartYawRotation, ReturnValue) == 0x000000, "Member 'TslPlayerStart_GetRandomStartYawRotation::ReturnValue' has a wrong offset!");

// Function TslGame.InventoryFacade.GetEquipment
// 0x0008 (0x0008 - 0x0000)
struct InventoryFacade_GetEquipment final
{
public:
	class AEquipment*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFacade_GetEquipment) == 0x000008, "Wrong alignment on InventoryFacade_GetEquipment");
static_assert(sizeof(InventoryFacade_GetEquipment) == 0x000008, "Wrong size on InventoryFacade_GetEquipment");
static_assert(offsetof(InventoryFacade_GetEquipment, ReturnValue) == 0x000000, "Member 'InventoryFacade_GetEquipment::ReturnValue' has a wrong offset!");

// Function TslGame.InventoryFacade.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryFacade_GetInventory final
{
public:
	class AInventory*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFacade_GetInventory) == 0x000008, "Wrong alignment on InventoryFacade_GetInventory");
static_assert(sizeof(InventoryFacade_GetInventory) == 0x000008, "Wrong size on InventoryFacade_GetInventory");
static_assert(offsetof(InventoryFacade_GetInventory, ReturnValue) == 0x000000, "Member 'InventoryFacade_GetInventory::ReturnValue' has a wrong offset!");

// Function TslGame.InventoryFacade.GiveItem_Admin
// 0x0008 (0x0008 - 0x0000)
struct InventoryFacade_GiveItem_Admin final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFacade_GiveItem_Admin) == 0x000008, "Wrong alignment on InventoryFacade_GiveItem_Admin");
static_assert(sizeof(InventoryFacade_GiveItem_Admin) == 0x000008, "Wrong size on InventoryFacade_GiveItem_Admin");
static_assert(offsetof(InventoryFacade_GiveItem_Admin, ItemClass) == 0x000000, "Member 'InventoryFacade_GiveItem_Admin::ItemClass' has a wrong offset!");

// Function TslGame.InventoryFacade.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct InventoryFacade_GetOwnerCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFacade_GetOwnerCharacter) == 0x000008, "Wrong alignment on InventoryFacade_GetOwnerCharacter");
static_assert(sizeof(InventoryFacade_GetOwnerCharacter) == 0x000008, "Wrong size on InventoryFacade_GetOwnerCharacter");
static_assert(offsetof(InventoryFacade_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'InventoryFacade_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.InventoryFacade.HasItemByClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryFacade_HasItemByClass final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFacade_HasItemByClass) == 0x000008, "Wrong alignment on InventoryFacade_HasItemByClass");
static_assert(sizeof(InventoryFacade_HasItemByClass) == 0x000010, "Wrong size on InventoryFacade_HasItemByClass");
static_assert(offsetof(InventoryFacade_HasItemByClass, ItemClass) == 0x000000, "Member 'InventoryFacade_HasItemByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryFacade_HasItemByClass, ReturnValue) == 0x000008, "Member 'InventoryFacade_HasItemByClass::ReturnValue' has a wrong offset!");

// Function TslGame.InventoryFacade.IsAutoSwappable
// 0x0002 (0x0002 - 0x0000)
struct InventoryFacade_IsAutoSwappable final
{
public:
	EEquipSlotID                                  SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFacade_IsAutoSwappable) == 0x000001, "Wrong alignment on InventoryFacade_IsAutoSwappable");
static_assert(sizeof(InventoryFacade_IsAutoSwappable) == 0x000002, "Wrong size on InventoryFacade_IsAutoSwappable");
static_assert(offsetof(InventoryFacade_IsAutoSwappable, SlotID) == 0x000000, "Member 'InventoryFacade_IsAutoSwappable::SlotID' has a wrong offset!");
static_assert(offsetof(InventoryFacade_IsAutoSwappable, ReturnValue) == 0x000001, "Member 'InventoryFacade_IsAutoSwappable::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.DetachItem
// 0x0018 (0x0018 - 0x0000)
struct Equipment_DetachItem final
{
public:
	struct FEquipPosition                         EquipPosition;                                     // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_DetachItem) == 0x000004, "Wrong alignment on Equipment_DetachItem");
static_assert(sizeof(Equipment_DetachItem) == 0x000018, "Wrong size on Equipment_DetachItem");
static_assert(offsetof(Equipment_DetachItem, EquipPosition) == 0x000000, "Member 'Equipment_DetachItem::EquipPosition' has a wrong offset!");
static_assert(offsetof(Equipment_DetachItem, ItemClassForVerify) == 0x000008, "Member 'Equipment_DetachItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Equipment_DetachItem, SlotID) == 0x000010, "Member 'Equipment_DetachItem::SlotID' has a wrong offset!");
static_assert(offsetof(Equipment_DetachItem, bSoundPlay) == 0x000011, "Member 'Equipment_DetachItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Equipment.DropAttachedItem
// 0x0018 (0x0018 - 0x0000)
struct Equipment_DropAttachedItem final
{
public:
	struct FEquipPosition                         EquipPosition;                                     // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAttachmentSlotID                       SlotID;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_DropAttachedItem) == 0x000004, "Wrong alignment on Equipment_DropAttachedItem");
static_assert(sizeof(Equipment_DropAttachedItem) == 0x000018, "Wrong size on Equipment_DropAttachedItem");
static_assert(offsetof(Equipment_DropAttachedItem, EquipPosition) == 0x000000, "Member 'Equipment_DropAttachedItem::EquipPosition' has a wrong offset!");
static_assert(offsetof(Equipment_DropAttachedItem, ItemClassForVerify) == 0x000008, "Member 'Equipment_DropAttachedItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Equipment_DropAttachedItem, SlotID) == 0x000010, "Member 'Equipment_DropAttachedItem::SlotID' has a wrong offset!");
static_assert(offsetof(Equipment_DropAttachedItem, bSoundPlay) == 0x000011, "Member 'Equipment_DropAttachedItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Equipment.DropItem
// 0x0018 (0x0018 - 0x0000)
struct Equipment_DropItem final
{
public:
	struct FEquipPosition                         Position;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForce;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_DropItem) == 0x000004, "Wrong alignment on Equipment_DropItem");
static_assert(sizeof(Equipment_DropItem) == 0x000018, "Wrong size on Equipment_DropItem");
static_assert(offsetof(Equipment_DropItem, Position) == 0x000000, "Member 'Equipment_DropItem::Position' has a wrong offset!");
static_assert(offsetof(Equipment_DropItem, ItemClassForVerify) == 0x000008, "Member 'Equipment_DropItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Equipment_DropItem, bIsForce) == 0x000010, "Member 'Equipment_DropItem::bIsForce' has a wrong offset!");
static_assert(offsetof(Equipment_DropItem, bSoundPlay) == 0x000011, "Member 'Equipment_DropItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Equipment.EquipItem
// 0x0018 (0x0018 - 0x0000)
struct Equipment_EquipItem final
{
public:
	struct FEquipPosition                         Position;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class UEquipableItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckViaCanEquipTo;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_EquipItem) == 0x000008, "Wrong alignment on Equipment_EquipItem");
static_assert(sizeof(Equipment_EquipItem) == 0x000018, "Wrong size on Equipment_EquipItem");
static_assert(offsetof(Equipment_EquipItem, Position) == 0x000000, "Member 'Equipment_EquipItem::Position' has a wrong offset!");
static_assert(offsetof(Equipment_EquipItem, Item) == 0x000008, "Member 'Equipment_EquipItem::Item' has a wrong offset!");
static_assert(offsetof(Equipment_EquipItem, bCheckViaCanEquipTo) == 0x000010, "Member 'Equipment_EquipItem::bCheckViaCanEquipTo' has a wrong offset!");
static_assert(offsetof(Equipment_EquipItem, bSoundPlay) == 0x000011, "Member 'Equipment_EquipItem::bSoundPlay' has a wrong offset!");
static_assert(offsetof(Equipment_EquipItem, ReturnValue) == 0x000012, "Member 'Equipment_EquipItem::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.PrimaryWeaponSwap
// 0x0018 (0x0018 - 0x0000)
struct Equipment_PrimaryWeaponSwap final
{
public:
	struct FEquipPosition                         EquipPosition;                                     // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_PrimaryWeaponSwap) == 0x000008, "Wrong alignment on Equipment_PrimaryWeaponSwap");
static_assert(sizeof(Equipment_PrimaryWeaponSwap) == 0x000018, "Wrong size on Equipment_PrimaryWeaponSwap");
static_assert(offsetof(Equipment_PrimaryWeaponSwap, EquipPosition) == 0x000000, "Member 'Equipment_PrimaryWeaponSwap::EquipPosition' has a wrong offset!");
static_assert(offsetof(Equipment_PrimaryWeaponSwap, Options) == 0x000008, "Member 'Equipment_PrimaryWeaponSwap::Options' has a wrong offset!");

// Function TslGame.Equipment.TryEquipItem
// 0x0010 (0x0010 - 0x0000)
struct Equipment_TryEquipItem final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_TryEquipItem) == 0x000008, "Wrong alignment on Equipment_TryEquipItem");
static_assert(sizeof(Equipment_TryEquipItem) == 0x000010, "Wrong size on Equipment_TryEquipItem");
static_assert(offsetof(Equipment_TryEquipItem, Item) == 0x000000, "Member 'Equipment_TryEquipItem::Item' has a wrong offset!");
static_assert(offsetof(Equipment_TryEquipItem, bSoundPlay) == 0x000008, "Member 'Equipment_TryEquipItem::bSoundPlay' has a wrong offset!");
static_assert(offsetof(Equipment_TryEquipItem, ReturnValue) == 0x000009, "Member 'Equipment_TryEquipItem::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.UnequipItem
// 0x0018 (0x0018 - 0x0000)
struct Equipment_UnequipItem final
{
public:
	struct FEquipPosition                         Position;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_UnequipItem) == 0x000004, "Wrong alignment on Equipment_UnequipItem");
static_assert(sizeof(Equipment_UnequipItem) == 0x000018, "Wrong size on Equipment_UnequipItem");
static_assert(offsetof(Equipment_UnequipItem, Position) == 0x000000, "Member 'Equipment_UnequipItem::Position' has a wrong offset!");
static_assert(offsetof(Equipment_UnequipItem, ItemClassForVerify) == 0x000008, "Member 'Equipment_UnequipItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Equipment_UnequipItem, bSoundPlay) == 0x000010, "Member 'Equipment_UnequipItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Equipment.WeaponAttachmentSwap
// 0x0020 (0x0020 - 0x0000)
struct Equipment_WeaponAttachmentSwap final
{
public:
	struct FEquipPosition                         SourceWeapon;                                      // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FEquipPosition                         TargetWeapon;                                      // 0x0008(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FName                                   ItemClassForVerify;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAttachmentSlotID                       AttachmentSlotID;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_WeaponAttachmentSwap) == 0x000004, "Wrong alignment on Equipment_WeaponAttachmentSwap");
static_assert(sizeof(Equipment_WeaponAttachmentSwap) == 0x000020, "Wrong size on Equipment_WeaponAttachmentSwap");
static_assert(offsetof(Equipment_WeaponAttachmentSwap, SourceWeapon) == 0x000000, "Member 'Equipment_WeaponAttachmentSwap::SourceWeapon' has a wrong offset!");
static_assert(offsetof(Equipment_WeaponAttachmentSwap, TargetWeapon) == 0x000008, "Member 'Equipment_WeaponAttachmentSwap::TargetWeapon' has a wrong offset!");
static_assert(offsetof(Equipment_WeaponAttachmentSwap, ItemClassForVerify) == 0x000010, "Member 'Equipment_WeaponAttachmentSwap::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Equipment_WeaponAttachmentSwap, AttachmentSlotID) == 0x000018, "Member 'Equipment_WeaponAttachmentSwap::AttachmentSlotID' has a wrong offset!");
static_assert(offsetof(Equipment_WeaponAttachmentSwap, bSoundPlay) == 0x000019, "Member 'Equipment_WeaponAttachmentSwap::bSoundPlay' has a wrong offset!");

// Function TslGame.Equipment.EquipPositionToWeaponIndex
// 0x000C (0x000C - 0x0000)
struct Equipment_EquipPositionToWeaponIndex final
{
public:
	struct FEquipPosition                         Position;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_EquipPositionToWeaponIndex) == 0x000004, "Wrong alignment on Equipment_EquipPositionToWeaponIndex");
static_assert(sizeof(Equipment_EquipPositionToWeaponIndex) == 0x00000C, "Wrong size on Equipment_EquipPositionToWeaponIndex");
static_assert(offsetof(Equipment_EquipPositionToWeaponIndex, Position) == 0x000000, "Member 'Equipment_EquipPositionToWeaponIndex::Position' has a wrong offset!");
static_assert(offsetof(Equipment_EquipPositionToWeaponIndex, ReturnValue) == 0x000008, "Member 'Equipment_EquipPositionToWeaponIndex::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.FindAttachableWeaponIndex
// 0x0020 (0x0020 - 0x0000)
struct Equipment_FindAttachableWeaponIndex final
{
public:
	class UAttachableItem*                        AttachableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_FindAttachableWeaponIndex) == 0x000008, "Wrong alignment on Equipment_FindAttachableWeaponIndex");
static_assert(sizeof(Equipment_FindAttachableWeaponIndex) == 0x000020, "Wrong size on Equipment_FindAttachableWeaponIndex");
static_assert(offsetof(Equipment_FindAttachableWeaponIndex, AttachableItem) == 0x000000, "Member 'Equipment_FindAttachableWeaponIndex::AttachableItem' has a wrong offset!");
static_assert(offsetof(Equipment_FindAttachableWeaponIndex, Options) == 0x000008, "Member 'Equipment_FindAttachableWeaponIndex::Options' has a wrong offset!");
static_assert(offsetof(Equipment_FindAttachableWeaponIndex, ReturnValue) == 0x000018, "Member 'Equipment_FindAttachableWeaponIndex::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.FindEquipableWeaponPosition
// 0x0020 (0x0020 - 0x0000)
struct Equipment_FindEquipableWeaponPosition final
{
public:
	class UEquipableItem*                         EquipableItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipPosition                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_FindEquipableWeaponPosition) == 0x000008, "Wrong alignment on Equipment_FindEquipableWeaponPosition");
static_assert(sizeof(Equipment_FindEquipableWeaponPosition) == 0x000020, "Wrong size on Equipment_FindEquipableWeaponPosition");
static_assert(offsetof(Equipment_FindEquipableWeaponPosition, EquipableItem) == 0x000000, "Member 'Equipment_FindEquipableWeaponPosition::EquipableItem' has a wrong offset!");
static_assert(offsetof(Equipment_FindEquipableWeaponPosition, Options) == 0x000008, "Member 'Equipment_FindEquipableWeaponPosition::Options' has a wrong offset!");
static_assert(offsetof(Equipment_FindEquipableWeaponPosition, ReturnValue) == 0x000018, "Member 'Equipment_FindEquipableWeaponPosition::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.FindEquipPosition
// 0x000C (0x000C - 0x0000)
struct Equipment_FindEquipPosition final
{
public:
	EEquipSlotID                                  SlotID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyFree;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquipPosition                         ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_FindEquipPosition) == 0x000004, "Wrong alignment on Equipment_FindEquipPosition");
static_assert(sizeof(Equipment_FindEquipPosition) == 0x00000C, "Wrong size on Equipment_FindEquipPosition");
static_assert(offsetof(Equipment_FindEquipPosition, SlotID) == 0x000000, "Member 'Equipment_FindEquipPosition::SlotID' has a wrong offset!");
static_assert(offsetof(Equipment_FindEquipPosition, bOnlyFree) == 0x000001, "Member 'Equipment_FindEquipPosition::bOnlyFree' has a wrong offset!");
static_assert(offsetof(Equipment_FindEquipPosition, ReturnValue) == 0x000004, "Member 'Equipment_FindEquipPosition::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.FindPosition
// 0x0010 (0x0010 - 0x0000)
struct Equipment_FindPosition final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipPosition                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_FindPosition) == 0x000008, "Wrong alignment on Equipment_FindPosition");
static_assert(sizeof(Equipment_FindPosition) == 0x000010, "Wrong size on Equipment_FindPosition");
static_assert(offsetof(Equipment_FindPosition, Item) == 0x000000, "Member 'Equipment_FindPosition::Item' has a wrong offset!");
static_assert(offsetof(Equipment_FindPosition, ReturnValue) == 0x000008, "Member 'Equipment_FindPosition::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.GetInventoryFacade
// 0x0008 (0x0008 - 0x0000)
struct Equipment_GetInventoryFacade final
{
public:
	class AInventoryFacade*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetInventoryFacade) == 0x000008, "Wrong alignment on Equipment_GetInventoryFacade");
static_assert(sizeof(Equipment_GetInventoryFacade) == 0x000008, "Wrong size on Equipment_GetInventoryFacade");
static_assert(offsetof(Equipment_GetInventoryFacade, ReturnValue) == 0x000000, "Member 'Equipment_GetInventoryFacade::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.GetItem
// 0x0010 (0x0010 - 0x0000)
struct Equipment_GetItem final
{
public:
	struct FEquipPosition                         Position;                                          // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class UEquipableItem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetItem) == 0x000008, "Wrong alignment on Equipment_GetItem");
static_assert(sizeof(Equipment_GetItem) == 0x000010, "Wrong size on Equipment_GetItem");
static_assert(offsetof(Equipment_GetItem, Position) == 0x000000, "Member 'Equipment_GetItem::Position' has a wrong offset!");
static_assert(offsetof(Equipment_GetItem, ReturnValue) == 0x000008, "Member 'Equipment_GetItem::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.GetItemCountByClass
// 0x0010 (0x0010 - 0x0000)
struct Equipment_GetItemCountByClass final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_GetItemCountByClass) == 0x000008, "Wrong alignment on Equipment_GetItemCountByClass");
static_assert(sizeof(Equipment_GetItemCountByClass) == 0x000010, "Wrong size on Equipment_GetItemCountByClass");
static_assert(offsetof(Equipment_GetItemCountByClass, ItemClass) == 0x000000, "Member 'Equipment_GetItemCountByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(Equipment_GetItemCountByClass, ReturnValue) == 0x000008, "Member 'Equipment_GetItemCountByClass::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct Equipment_GetOwnerCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetOwnerCharacter) == 0x000008, "Wrong alignment on Equipment_GetOwnerCharacter");
static_assert(sizeof(Equipment_GetOwnerCharacter) == 0x000008, "Wrong size on Equipment_GetOwnerCharacter");
static_assert(offsetof(Equipment_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'Equipment_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.IsAttachableToWeapon
// 0x0018 (0x0018 - 0x0000)
struct Equipment_IsAttachableToWeapon final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttachableItem*                        AttachableItem;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyFree;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_IsAttachableToWeapon) == 0x000008, "Wrong alignment on Equipment_IsAttachableToWeapon");
static_assert(sizeof(Equipment_IsAttachableToWeapon) == 0x000018, "Wrong size on Equipment_IsAttachableToWeapon");
static_assert(offsetof(Equipment_IsAttachableToWeapon, WeaponIndex) == 0x000000, "Member 'Equipment_IsAttachableToWeapon::WeaponIndex' has a wrong offset!");
static_assert(offsetof(Equipment_IsAttachableToWeapon, AttachableItem) == 0x000008, "Member 'Equipment_IsAttachableToWeapon::AttachableItem' has a wrong offset!");
static_assert(offsetof(Equipment_IsAttachableToWeapon, bOnlyFree) == 0x000010, "Member 'Equipment_IsAttachableToWeapon::bOnlyFree' has a wrong offset!");
static_assert(offsetof(Equipment_IsAttachableToWeapon, ReturnValue) == 0x000011, "Member 'Equipment_IsAttachableToWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.IsSwapablePrimaryWeapon
// 0x0020 (0x0020 - 0x0000)
struct Equipment_IsSwapablePrimaryWeapon final
{
public:
	struct FEquipPosition                         EquipPosition;                                     // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Equipment_IsSwapablePrimaryWeapon) == 0x000008, "Wrong alignment on Equipment_IsSwapablePrimaryWeapon");
static_assert(sizeof(Equipment_IsSwapablePrimaryWeapon) == 0x000020, "Wrong size on Equipment_IsSwapablePrimaryWeapon");
static_assert(offsetof(Equipment_IsSwapablePrimaryWeapon, EquipPosition) == 0x000000, "Member 'Equipment_IsSwapablePrimaryWeapon::EquipPosition' has a wrong offset!");
static_assert(offsetof(Equipment_IsSwapablePrimaryWeapon, Options) == 0x000008, "Member 'Equipment_IsSwapablePrimaryWeapon::Options' has a wrong offset!");
static_assert(offsetof(Equipment_IsSwapablePrimaryWeapon, ReturnValue) == 0x000018, "Member 'Equipment_IsSwapablePrimaryWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.Equipment.WeaponIndexToEquipPosition
// 0x000C (0x000C - 0x0000)
struct Equipment_WeaponIndexToEquipPosition final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipPosition                         ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_WeaponIndexToEquipPosition) == 0x000004, "Wrong alignment on Equipment_WeaponIndexToEquipPosition");
static_assert(sizeof(Equipment_WeaponIndexToEquipPosition) == 0x00000C, "Wrong size on Equipment_WeaponIndexToEquipPosition");
static_assert(offsetof(Equipment_WeaponIndexToEquipPosition, WeaponIndex) == 0x000000, "Member 'Equipment_WeaponIndexToEquipPosition::WeaponIndex' has a wrong offset!");
static_assert(offsetof(Equipment_WeaponIndexToEquipPosition, ReturnValue) == 0x000004, "Member 'Equipment_WeaponIndexToEquipPosition::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.AttachItem
// 0x0020 (0x0020 - 0x0000)
struct Inventory_AttachItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipPosition                         EquipPosition;                                     // 0x0010(0x0008)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AttachItem) == 0x000004, "Wrong alignment on Inventory_AttachItem");
static_assert(sizeof(Inventory_AttachItem) == 0x000020, "Wrong size on Inventory_AttachItem");
static_assert(offsetof(Inventory_AttachItem, Index_0) == 0x000000, "Member 'Inventory_AttachItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_AttachItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_AttachItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Inventory_AttachItem, EquipPosition) == 0x000010, "Member 'Inventory_AttachItem::EquipPosition' has a wrong offset!");
static_assert(offsetof(Inventory_AttachItem, bSoundPlay) == 0x000018, "Member 'Inventory_AttachItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Inventory.AttachOrDropItem
// 0x0018 (0x0018 - 0x0000)
struct Inventory_AttachOrDropItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AttachOrDropItem) == 0x000004, "Wrong alignment on Inventory_AttachOrDropItem");
static_assert(sizeof(Inventory_AttachOrDropItem) == 0x000018, "Wrong size on Inventory_AttachOrDropItem");
static_assert(offsetof(Inventory_AttachOrDropItem, Index_0) == 0x000000, "Member 'Inventory_AttachOrDropItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_AttachOrDropItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_AttachOrDropItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Inventory_AttachOrDropItem, bSoundPlay) == 0x000010, "Member 'Inventory_AttachOrDropItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Inventory.ConsumeItemByClass
// 0x0010 (0x0010 - 0x0000)
struct Inventory_ConsumeItemByClass final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ConsumeItemByClass) == 0x000008, "Wrong alignment on Inventory_ConsumeItemByClass");
static_assert(sizeof(Inventory_ConsumeItemByClass) == 0x000010, "Wrong size on Inventory_ConsumeItemByClass");
static_assert(offsetof(Inventory_ConsumeItemByClass, ItemClass) == 0x000000, "Member 'Inventory_ConsumeItemByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(Inventory_ConsumeItemByClass, Count) == 0x000008, "Member 'Inventory_ConsumeItemByClass::Count' has a wrong offset!");
static_assert(offsetof(Inventory_ConsumeItemByClass, ReturnValue) == 0x00000C, "Member 'Inventory_ConsumeItemByClass::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.DropItem
// 0x0028 (0x0028 - 0x0000)
struct Inventory_DropItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_DropItem) == 0x000008, "Wrong alignment on Inventory_DropItem");
static_assert(sizeof(Inventory_DropItem) == 0x000028, "Wrong size on Inventory_DropItem");
static_assert(offsetof(Inventory_DropItem, Index_0) == 0x000000, "Member 'Inventory_DropItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_DropItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_DropItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Inventory_DropItem, Options) == 0x000010, "Member 'Inventory_DropItem::Options' has a wrong offset!");
static_assert(offsetof(Inventory_DropItem, bSoundPlay) == 0x000020, "Member 'Inventory_DropItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Inventory.EquipItem
// 0x0018 (0x0018 - 0x0000)
struct Inventory_EquipItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_EquipItem) == 0x000004, "Wrong alignment on Inventory_EquipItem");
static_assert(sizeof(Inventory_EquipItem) == 0x000018, "Wrong size on Inventory_EquipItem");
static_assert(offsetof(Inventory_EquipItem, Index_0) == 0x000000, "Member 'Inventory_EquipItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_EquipItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_EquipItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Inventory_EquipItem, bSoundPlay) == 0x000010, "Member 'Inventory_EquipItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Inventory.EquipOrDropItem
// 0x0018 (0x0018 - 0x0000)
struct Inventory_EquipOrDropItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundPlay;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_EquipOrDropItem) == 0x000004, "Wrong alignment on Inventory_EquipOrDropItem");
static_assert(sizeof(Inventory_EquipOrDropItem) == 0x000018, "Wrong size on Inventory_EquipOrDropItem");
static_assert(offsetof(Inventory_EquipOrDropItem, Index_0) == 0x000000, "Member 'Inventory_EquipOrDropItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_EquipOrDropItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_EquipOrDropItem::ItemClassForVerify' has a wrong offset!");
static_assert(offsetof(Inventory_EquipOrDropItem, bSoundPlay) == 0x000010, "Member 'Inventory_EquipOrDropItem::bSoundPlay' has a wrong offset!");

// Function TslGame.Inventory.FindItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_FindItem final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItem*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_FindItem) == 0x000008, "Wrong alignment on Inventory_FindItem");
static_assert(sizeof(Inventory_FindItem) == 0x000010, "Wrong size on Inventory_FindItem");
static_assert(offsetof(Inventory_FindItem, ItemClass) == 0x000000, "Member 'Inventory_FindItem::ItemClass' has a wrong offset!");
static_assert(offsetof(Inventory_FindItem, ReturnValue) == 0x000008, "Member 'Inventory_FindItem::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.FindItemHasMinStack
// 0x0010 (0x0010 - 0x0000)
struct Inventory_FindItemHasMinStack final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItem*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_FindItemHasMinStack) == 0x000008, "Wrong alignment on Inventory_FindItemHasMinStack");
static_assert(sizeof(Inventory_FindItemHasMinStack) == 0x000010, "Wrong size on Inventory_FindItemHasMinStack");
static_assert(offsetof(Inventory_FindItemHasMinStack, ItemClass) == 0x000000, "Member 'Inventory_FindItemHasMinStack::ItemClass' has a wrong offset!");
static_assert(offsetof(Inventory_FindItemHasMinStack, ReturnValue) == 0x000008, "Member 'Inventory_FindItemHasMinStack::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.OnFinishUseCast
// 0x0008 (0x0008 - 0x0000)
struct Inventory_OnFinishUseCast final
{
public:
	class UObject*                                CastObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_OnFinishUseCast) == 0x000008, "Wrong alignment on Inventory_OnFinishUseCast");
static_assert(sizeof(Inventory_OnFinishUseCast) == 0x000008, "Wrong size on Inventory_OnFinishUseCast");
static_assert(offsetof(Inventory_OnFinishUseCast, CastObject) == 0x000000, "Member 'Inventory_OnFinishUseCast::CastObject' has a wrong offset!");

// Function TslGame.Inventory.UseItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_UseItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ItemClassForVerify;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_UseItem) == 0x000004, "Wrong alignment on Inventory_UseItem");
static_assert(sizeof(Inventory_UseItem) == 0x000010, "Wrong size on Inventory_UseItem");
static_assert(offsetof(Inventory_UseItem, Index_0) == 0x000000, "Member 'Inventory_UseItem::Index_0' has a wrong offset!");
static_assert(offsetof(Inventory_UseItem, ItemClassForVerify) == 0x000008, "Member 'Inventory_UseItem::ItemClassForVerify' has a wrong offset!");

// Function TslGame.Inventory.FindItemIndex
// 0x0010 (0x0010 - 0x0000)
struct Inventory_FindItemIndex final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_FindItemIndex) == 0x000008, "Wrong alignment on Inventory_FindItemIndex");
static_assert(sizeof(Inventory_FindItemIndex) == 0x000010, "Wrong size on Inventory_FindItemIndex");
static_assert(offsetof(Inventory_FindItemIndex, Item) == 0x000000, "Member 'Inventory_FindItemIndex::Item' has a wrong offset!");
static_assert(offsetof(Inventory_FindItemIndex, ReturnValue) == 0x000008, "Member 'Inventory_FindItemIndex::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetAdditionalMaxCount
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetAdditionalMaxCount final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetAdditionalMaxCount) == 0x000008, "Wrong alignment on Inventory_GetAdditionalMaxCount");
static_assert(sizeof(Inventory_GetAdditionalMaxCount) == 0x000010, "Wrong size on Inventory_GetAdditionalMaxCount");
static_assert(offsetof(Inventory_GetAdditionalMaxCount, Item) == 0x000000, "Member 'Inventory_GetAdditionalMaxCount::Item' has a wrong offset!");
static_assert(offsetof(Inventory_GetAdditionalMaxCount, ReturnValue) == 0x000008, "Member 'Inventory_GetAdditionalMaxCount::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetAllItems final
{
public:
	TArray<struct FInventoryItem>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllItems) == 0x000008, "Wrong alignment on Inventory_GetAllItems");
static_assert(sizeof(Inventory_GetAllItems) == 0x000010, "Wrong size on Inventory_GetAllItems");
static_assert(offsetof(Inventory_GetAllItems, ReturnValue) == 0x000000, "Member 'Inventory_GetAllItems::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetAllItemsByType
// 0x0018 (0x0018 - 0x0000)
struct Inventory_GetAllItemsByType final
{
public:
	TSubclassOf<class UItem>                      ItemSuperClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInventoryItem>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllItemsByType) == 0x000008, "Wrong alignment on Inventory_GetAllItemsByType");
static_assert(sizeof(Inventory_GetAllItemsByType) == 0x000018, "Wrong size on Inventory_GetAllItemsByType");
static_assert(offsetof(Inventory_GetAllItemsByType, ItemSuperClass) == 0x000000, "Member 'Inventory_GetAllItemsByType::ItemSuperClass' has a wrong offset!");
static_assert(offsetof(Inventory_GetAllItemsByType, ReturnValue) == 0x000008, "Member 'Inventory_GetAllItemsByType::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetCurrentSpace
// 0x0004 (0x0004 - 0x0000)
struct Inventory_GetCurrentSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetCurrentSpace) == 0x000004, "Wrong alignment on Inventory_GetCurrentSpace");
static_assert(sizeof(Inventory_GetCurrentSpace) == 0x000004, "Wrong size on Inventory_GetCurrentSpace");
static_assert(offsetof(Inventory_GetCurrentSpace, ReturnValue) == 0x000000, "Member 'Inventory_GetCurrentSpace::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetInventoryFacade
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetInventoryFacade final
{
public:
	class AInventoryFacade*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetInventoryFacade) == 0x000008, "Wrong alignment on Inventory_GetInventoryFacade");
static_assert(sizeof(Inventory_GetInventoryFacade) == 0x000008, "Wrong size on Inventory_GetInventoryFacade");
static_assert(offsetof(Inventory_GetInventoryFacade, ReturnValue) == 0x000000, "Member 'Inventory_GetInventoryFacade::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct Inventory_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetItemCount) == 0x000004, "Wrong alignment on Inventory_GetItemCount");
static_assert(sizeof(Inventory_GetItemCount) == 0x000004, "Wrong size on Inventory_GetItemCount");
static_assert(offsetof(Inventory_GetItemCount, ReturnValue) == 0x000000, "Member 'Inventory_GetItemCount::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetItemCountByClass
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetItemCountByClass final
{
public:
	TSubclassOf<class UItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemCountByClass) == 0x000008, "Wrong alignment on Inventory_GetItemCountByClass");
static_assert(sizeof(Inventory_GetItemCountByClass) == 0x000010, "Wrong size on Inventory_GetItemCountByClass");
static_assert(offsetof(Inventory_GetItemCountByClass, ItemClass) == 0x000000, "Member 'Inventory_GetItemCountByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemCountByClass, ReturnValue) == 0x000008, "Member 'Inventory_GetItemCountByClass::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetMaxSpace
// 0x0004 (0x0004 - 0x0000)
struct Inventory_GetMaxSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetMaxSpace) == 0x000004, "Wrong alignment on Inventory_GetMaxSpace");
static_assert(sizeof(Inventory_GetMaxSpace) == 0x000004, "Wrong size on Inventory_GetMaxSpace");
static_assert(offsetof(Inventory_GetMaxSpace, ReturnValue) == 0x000000, "Member 'Inventory_GetMaxSpace::ReturnValue' has a wrong offset!");

// Function TslGame.Inventory.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetOwnerCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetOwnerCharacter) == 0x000008, "Wrong alignment on Inventory_GetOwnerCharacter");
static_assert(sizeof(Inventory_GetOwnerCharacter) == 0x000008, "Wrong size on Inventory_GetOwnerCharacter");
static_assert(offsetof(Inventory_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'Inventory_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.ItemExplorerProxy.PropagateCreateAndShowContextMenuWidget
// 0x0010 (0x0010 - 0x0000)
struct ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget final
{
public:
	TScriptInterface<class ISlotContainerInterface> Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget) == 0x000008, "Wrong alignment on ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget");
static_assert(sizeof(ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget) == 0x000010, "Wrong size on ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget");
static_assert(offsetof(ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget, Param) == 0x000000, "Member 'ItemExplorerProxy_PropagateCreateAndShowContextMenuWidget::Param' has a wrong offset!");

// Function TslGame.ItemExplorerProxy.IsBaseExplorer
// 0x0001 (0x0001 - 0x0000)
struct ItemExplorerProxy_IsBaseExplorer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemExplorerProxy_IsBaseExplorer) == 0x000001, "Wrong alignment on ItemExplorerProxy_IsBaseExplorer");
static_assert(sizeof(ItemExplorerProxy_IsBaseExplorer) == 0x000001, "Wrong size on ItemExplorerProxy_IsBaseExplorer");
static_assert(offsetof(ItemExplorerProxy_IsBaseExplorer, ReturnValue) == 0x000000, "Member 'ItemExplorerProxy_IsBaseExplorer::ReturnValue' has a wrong offset!");

// Function TslGame.CarePackageItem.IsFalling
// 0x0001 (0x0001 - 0x0000)
struct CarePackageItem_IsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarePackageItem_IsFalling) == 0x000001, "Wrong alignment on CarePackageItem_IsFalling");
static_assert(sizeof(CarePackageItem_IsFalling) == 0x000001, "Wrong size on CarePackageItem_IsFalling");
static_assert(offsetof(CarePackageItem_IsFalling, ReturnValue) == 0x000000, "Member 'CarePackageItem_IsFalling::ReturnValue' has a wrong offset!");

// Function TslGame.CarePackageItem.IsPickupedItem
// 0x0001 (0x0001 - 0x0000)
struct CarePackageItem_IsPickupedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarePackageItem_IsPickupedItem) == 0x000001, "Wrong alignment on CarePackageItem_IsPickupedItem");
static_assert(sizeof(CarePackageItem_IsPickupedItem) == 0x000001, "Wrong size on CarePackageItem_IsPickupedItem");
static_assert(offsetof(CarePackageItem_IsPickupedItem, ReturnValue) == 0x000000, "Member 'CarePackageItem_IsPickupedItem::ReturnValue' has a wrong offset!");

// Function TslGame.TslPawnInputBindingComponent.NotifyOwnerPossessed
// 0x0008 (0x0008 - 0x0000)
struct TslPawnInputBindingComponent_NotifyOwnerPossessed final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPawnInputBindingComponent_NotifyOwnerPossessed) == 0x000008, "Wrong alignment on TslPawnInputBindingComponent_NotifyOwnerPossessed");
static_assert(sizeof(TslPawnInputBindingComponent_NotifyOwnerPossessed) == 0x000008, "Wrong size on TslPawnInputBindingComponent_NotifyOwnerPossessed");
static_assert(offsetof(TslPawnInputBindingComponent_NotifyOwnerPossessed, InController) == 0x000000, "Member 'TslPawnInputBindingComponent_NotifyOwnerPossessed::InController' has a wrong offset!");

// Function TslGame.TslPawnInputBindingComponent.NotifyOwnerUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct TslPawnInputBindingComponent_NotifyOwnerUnPossessed final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPawnInputBindingComponent_NotifyOwnerUnPossessed) == 0x000008, "Wrong alignment on TslPawnInputBindingComponent_NotifyOwnerUnPossessed");
static_assert(sizeof(TslPawnInputBindingComponent_NotifyOwnerUnPossessed) == 0x000008, "Wrong size on TslPawnInputBindingComponent_NotifyOwnerUnPossessed");
static_assert(offsetof(TslPawnInputBindingComponent_NotifyOwnerUnPossessed, InController) == 0x000000, "Member 'TslPawnInputBindingComponent_NotifyOwnerUnPossessed::InController' has a wrong offset!");

// Function TslGame.Team.OnRep_Dying
// 0x0001 (0x0001 - 0x0000)
struct Team_OnRep_Dying final
{
public:
	bool                                          bLastDying;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_OnRep_Dying) == 0x000001, "Wrong alignment on Team_OnRep_Dying");
static_assert(sizeof(Team_OnRep_Dying) == 0x000001, "Wrong size on Team_OnRep_Dying");
static_assert(offsetof(Team_OnRep_Dying, bLastDying) == 0x000000, "Member 'Team_OnRep_Dying::bLastDying' has a wrong offset!");

// Function TslGame.Team.ServerSetMapMarkerPosition
// 0x0008 (0x0008 - 0x0000)
struct Team_ServerSetMapMarkerPosition final
{
public:
	struct FVector2D                              NewMapMarkerPosition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_ServerSetMapMarkerPosition) == 0x000004, "Wrong alignment on Team_ServerSetMapMarkerPosition");
static_assert(sizeof(Team_ServerSetMapMarkerPosition) == 0x000008, "Wrong size on Team_ServerSetMapMarkerPosition");
static_assert(offsetof(Team_ServerSetMapMarkerPosition, NewMapMarkerPosition) == 0x000000, "Member 'Team_ServerSetMapMarkerPosition::NewMapMarkerPosition' has a wrong offset!");

// Function TslGame.Team.ServerSetShowMapMarker
// 0x0001 (0x0001 - 0x0000)
struct Team_ServerSetShowMapMarker final
{
public:
	bool                                          bNewShowMapMarker;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_ServerSetShowMapMarker) == 0x000001, "Wrong alignment on Team_ServerSetShowMapMarker");
static_assert(sizeof(Team_ServerSetShowMapMarker) == 0x000001, "Wrong size on Team_ServerSetShowMapMarker");
static_assert(offsetof(Team_ServerSetShowMapMarker, bNewShowMapMarker) == 0x000000, "Member 'Team_ServerSetShowMapMarker::bNewShowMapMarker' has a wrong offset!");

// Function TslGame.Team.GetGroggyHealth
// 0x0004 (0x0004 - 0x0000)
struct Team_GetGroggyHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetGroggyHealth) == 0x000004, "Wrong alignment on Team_GetGroggyHealth");
static_assert(sizeof(Team_GetGroggyHealth) == 0x000004, "Wrong size on Team_GetGroggyHealth");
static_assert(offsetof(Team_GetGroggyHealth, ReturnValue) == 0x000000, "Member 'Team_GetGroggyHealth::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetGroggyHealthMax
// 0x0004 (0x0004 - 0x0000)
struct Team_GetGroggyHealthMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetGroggyHealthMax) == 0x000004, "Wrong alignment on Team_GetGroggyHealthMax");
static_assert(sizeof(Team_GetGroggyHealthMax) == 0x000004, "Wrong size on Team_GetGroggyHealthMax");
static_assert(offsetof(Team_GetGroggyHealthMax, ReturnValue) == 0x000000, "Member 'Team_GetGroggyHealthMax::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct Team_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetHealth) == 0x000004, "Wrong alignment on Team_GetHealth");
static_assert(sizeof(Team_GetHealth) == 0x000004, "Wrong size on Team_GetHealth");
static_assert(offsetof(Team_GetHealth, ReturnValue) == 0x000000, "Member 'Team_GetHealth::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetHealthMax
// 0x0004 (0x0004 - 0x0000)
struct Team_GetHealthMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetHealthMax) == 0x000004, "Wrong alignment on Team_GetHealthMax");
static_assert(sizeof(Team_GetHealthMax) == 0x000004, "Wrong size on Team_GetHealthMax");
static_assert(offsetof(Team_GetHealthMax, ReturnValue) == 0x000000, "Member 'Team_GetHealthMax::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetMapMarkerPosition
// 0x0008 (0x0008 - 0x0000)
struct Team_GetMapMarkerPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetMapMarkerPosition) == 0x000004, "Wrong alignment on Team_GetMapMarkerPosition");
static_assert(sizeof(Team_GetMapMarkerPosition) == 0x000008, "Wrong size on Team_GetMapMarkerPosition");
static_assert(offsetof(Team_GetMapMarkerPosition, ReturnValue) == 0x000000, "Member 'Team_GetMapMarkerPosition::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetMemberNumber
// 0x0004 (0x0004 - 0x0000)
struct Team_GetMemberNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetMemberNumber) == 0x000004, "Wrong alignment on Team_GetMemberNumber");
static_assert(sizeof(Team_GetMemberNumber) == 0x000004, "Wrong size on Team_GetMemberNumber");
static_assert(offsetof(Team_GetMemberNumber, ReturnValue) == 0x000000, "Member 'Team_GetMemberNumber::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct Team_GetPlayerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetPlayerLocation) == 0x000004, "Wrong alignment on Team_GetPlayerLocation");
static_assert(sizeof(Team_GetPlayerLocation) == 0x00000C, "Wrong size on Team_GetPlayerLocation");
static_assert(offsetof(Team_GetPlayerLocation, ReturnValue) == 0x000000, "Member 'Team_GetPlayerLocation::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct Team_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetPlayerName) == 0x000008, "Wrong alignment on Team_GetPlayerName");
static_assert(sizeof(Team_GetPlayerName) == 0x000010, "Wrong size on Team_GetPlayerName");
static_assert(offsetof(Team_GetPlayerName, ReturnValue) == 0x000000, "Member 'Team_GetPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetPlayerRotation
// 0x000C (0x000C - 0x0000)
struct Team_GetPlayerRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetPlayerRotation) == 0x000004, "Wrong alignment on Team_GetPlayerRotation");
static_assert(sizeof(Team_GetPlayerRotation) == 0x00000C, "Wrong size on Team_GetPlayerRotation");
static_assert(offsetof(Team_GetPlayerRotation, ReturnValue) == 0x000000, "Member 'Team_GetPlayerRotation::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetPlayerUniqueId
// 0x0010 (0x0010 - 0x0000)
struct Team_GetPlayerUniqueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetPlayerUniqueId) == 0x000008, "Wrong alignment on Team_GetPlayerUniqueId");
static_assert(sizeof(Team_GetPlayerUniqueId) == 0x000010, "Wrong size on Team_GetPlayerUniqueId");
static_assert(offsetof(Team_GetPlayerUniqueId, ReturnValue) == 0x000000, "Member 'Team_GetPlayerUniqueId::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetRideVehicle
// 0x0001 (0x0001 - 0x0000)
struct Team_GetRideVehicle final
{
public:
	ETeamVehicleType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetRideVehicle) == 0x000001, "Wrong alignment on Team_GetRideVehicle");
static_assert(sizeof(Team_GetRideVehicle) == 0x000001, "Wrong size on Team_GetRideVehicle");
static_assert(offsetof(Team_GetRideVehicle, ReturnValue) == 0x000000, "Member 'Team_GetRideVehicle::ReturnValue' has a wrong offset!");

// Function TslGame.Team.GetTslCharacter
// 0x0008 (0x0008 - 0x0000)
struct Team_GetTslCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_GetTslCharacter) == 0x000008, "Wrong alignment on Team_GetTslCharacter");
static_assert(sizeof(Team_GetTslCharacter) == 0x000008, "Wrong size on Team_GetTslCharacter");
static_assert(offsetof(Team_GetTslCharacter, ReturnValue) == 0x000000, "Member 'Team_GetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.Team.IsDying
// 0x0001 (0x0001 - 0x0000)
struct Team_IsDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_IsDying) == 0x000001, "Wrong alignment on Team_IsDying");
static_assert(sizeof(Team_IsDying) == 0x000001, "Wrong size on Team_IsDying");
static_assert(offsetof(Team_IsDying, ReturnValue) == 0x000000, "Member 'Team_IsDying::ReturnValue' has a wrong offset!");

// Function TslGame.Team.IsGroggying
// 0x0001 (0x0001 - 0x0000)
struct Team_IsGroggying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_IsGroggying) == 0x000001, "Wrong alignment on Team_IsGroggying");
static_assert(sizeof(Team_IsGroggying) == 0x000001, "Wrong size on Team_IsGroggying");
static_assert(offsetof(Team_IsGroggying, ReturnValue) == 0x000000, "Member 'Team_IsGroggying::ReturnValue' has a wrong offset!");

// Function TslGame.Team.IsQuitter
// 0x0001 (0x0001 - 0x0000)
struct Team_IsQuitter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_IsQuitter) == 0x000001, "Wrong alignment on Team_IsQuitter");
static_assert(sizeof(Team_IsQuitter) == 0x000001, "Wrong size on Team_IsQuitter");
static_assert(offsetof(Team_IsQuitter, ReturnValue) == 0x000000, "Member 'Team_IsQuitter::ReturnValue' has a wrong offset!");

// Function TslGame.Team.IsShowMapMarker
// 0x0001 (0x0001 - 0x0000)
struct Team_IsShowMapMarker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Team_IsShowMapMarker) == 0x000001, "Wrong alignment on Team_IsShowMapMarker");
static_assert(sizeof(Team_IsShowMapMarker) == 0x000001, "Wrong size on Team_IsShowMapMarker");
static_assert(offsetof(Team_IsShowMapMarker, ReturnValue) == 0x000000, "Member 'Team_IsShowMapMarker::ReturnValue' has a wrong offset!");

// Function TslGame.TslProjectile.ExplodeBP
// 0x00A8 (0x00A8 - 0x0000)
struct TslProjectile_ExplodeBP final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             Impact;                                            // 0x0018(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslProjectile_ExplodeBP) == 0x000008, "Wrong alignment on TslProjectile_ExplodeBP");
static_assert(sizeof(TslProjectile_ExplodeBP) == 0x0000A8, "Wrong size on TslProjectile_ExplodeBP");
static_assert(offsetof(TslProjectile_ExplodeBP, Location) == 0x000000, "Member 'TslProjectile_ExplodeBP::Location' has a wrong offset!");
static_assert(offsetof(TslProjectile_ExplodeBP, Rotation) == 0x00000C, "Member 'TslProjectile_ExplodeBP::Rotation' has a wrong offset!");
static_assert(offsetof(TslProjectile_ExplodeBP, Impact) == 0x000018, "Member 'TslProjectile_ExplodeBP::Impact' has a wrong offset!");
static_assert(offsetof(TslProjectile_ExplodeBP, Radius) == 0x0000A0, "Member 'TslProjectile_ExplodeBP::Radius' has a wrong offset!");

// Function TslGame.TslProjectile.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct TslProjectile_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslProjectile_OnHit) == 0x000008, "Wrong alignment on TslProjectile_OnHit");
static_assert(sizeof(TslProjectile_OnHit) == 0x0000B0, "Wrong size on TslProjectile_OnHit");
static_assert(offsetof(TslProjectile_OnHit, HitComponent) == 0x000000, "Member 'TslProjectile_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(TslProjectile_OnHit, OtherActor) == 0x000008, "Member 'TslProjectile_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(TslProjectile_OnHit, OtherComp) == 0x000010, "Member 'TslProjectile_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(TslProjectile_OnHit, NormalImpulse) == 0x000018, "Member 'TslProjectile_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslProjectile_OnHit, Hit) == 0x000028, "Member 'TslProjectile_OnHit::Hit' has a wrong offset!");

// Function TslGame.TslProjectile.OnImpact
// 0x0098 (0x0098 - 0x0000)
struct TslProjectile_OnImpact final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslProjectile_OnImpact) == 0x000008, "Wrong alignment on TslProjectile_OnImpact");
static_assert(sizeof(TslProjectile_OnImpact) == 0x000098, "Wrong size on TslProjectile_OnImpact");
static_assert(offsetof(TslProjectile_OnImpact, ImpactResult) == 0x000000, "Member 'TslProjectile_OnImpact::ImpactResult' has a wrong offset!");
static_assert(offsetof(TslProjectile_OnImpact, ImpactVelocity) == 0x000088, "Member 'TslProjectile_OnImpact::ImpactVelocity' has a wrong offset!");

// Function TslGame.TslAccessoryComponent.InitSetupComponent
// 0x0001 (0x0001 - 0x0000)
struct TslAccessoryComponent_InitSetupComponent final
{
public:
	bool                                          bSimulatePhysics;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAccessoryComponent_InitSetupComponent) == 0x000001, "Wrong alignment on TslAccessoryComponent_InitSetupComponent");
static_assert(sizeof(TslAccessoryComponent_InitSetupComponent) == 0x000001, "Wrong size on TslAccessoryComponent_InitSetupComponent");
static_assert(offsetof(TslAccessoryComponent_InitSetupComponent, bSimulatePhysics) == 0x000000, "Member 'TslAccessoryComponent_InitSetupComponent::bSimulatePhysics' has a wrong offset!");

// Function TslGame.TslAccessoryComponent.SetPhysicsSimulation
// 0x0001 (0x0001 - 0x0000)
struct TslAccessoryComponent_SetPhysicsSimulation final
{
public:
	bool                                          bSimulatePhysics;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAccessoryComponent_SetPhysicsSimulation) == 0x000001, "Wrong alignment on TslAccessoryComponent_SetPhysicsSimulation");
static_assert(sizeof(TslAccessoryComponent_SetPhysicsSimulation) == 0x000001, "Wrong size on TslAccessoryComponent_SetPhysicsSimulation");
static_assert(offsetof(TslAccessoryComponent_SetPhysicsSimulation, bSimulatePhysics) == 0x000000, "Member 'TslAccessoryComponent_SetPhysicsSimulation::bSimulatePhysics' has a wrong offset!");

// Function TslGame.TslParticle.GetEmitterGlobalSpawnRateScale
// 0x0004 (0x0004 - 0x0000)
struct TslParticle_GetEmitterGlobalSpawnRateScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslParticle_GetEmitterGlobalSpawnRateScale) == 0x000004, "Wrong alignment on TslParticle_GetEmitterGlobalSpawnRateScale");
static_assert(sizeof(TslParticle_GetEmitterGlobalSpawnRateScale) == 0x000004, "Wrong size on TslParticle_GetEmitterGlobalSpawnRateScale");
static_assert(offsetof(TslParticle_GetEmitterGlobalSpawnRateScale, ReturnValue) == 0x000000, "Member 'TslParticle_GetEmitterGlobalSpawnRateScale::ReturnValue' has a wrong offset!");

// Function TslGame.TslParticle.ForceSpawn
// 0x0010 (0x0010 - 0x0000)
struct TslParticle_ForceSpawn final
{
public:
	int32                                         emitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslParticle_ForceSpawn) == 0x000004, "Wrong alignment on TslParticle_ForceSpawn");
static_assert(sizeof(TslParticle_ForceSpawn) == 0x000010, "Wrong size on TslParticle_ForceSpawn");
static_assert(offsetof(TslParticle_ForceSpawn, emitterIndex) == 0x000000, "Member 'TslParticle_ForceSpawn::emitterIndex' has a wrong offset!");
static_assert(offsetof(TslParticle_ForceSpawn, InLocation) == 0x000004, "Member 'TslParticle_ForceSpawn::InLocation' has a wrong offset!");

// Function TslGame.TslParticle.OnParticleCollide
// 0x0050 (0x0050 - 0x0000)
struct TslParticle_OnParticleCollide final
{
public:
	struct FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                   BoneName;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslParticle_OnParticleCollide) == 0x000008, "Wrong alignment on TslParticle_OnParticleCollide");
static_assert(sizeof(TslParticle_OnParticleCollide) == 0x000050, "Wrong size on TslParticle_OnParticleCollide");
static_assert(offsetof(TslParticle_OnParticleCollide, EventName) == 0x000000, "Member 'TslParticle_OnParticleCollide::EventName' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, EmitterTime) == 0x000008, "Member 'TslParticle_OnParticleCollide::EmitterTime' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, ParticleTime) == 0x00000C, "Member 'TslParticle_OnParticleCollide::ParticleTime' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, Location) == 0x000010, "Member 'TslParticle_OnParticleCollide::Location' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, Velocity) == 0x00001C, "Member 'TslParticle_OnParticleCollide::Velocity' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, Direction) == 0x000028, "Member 'TslParticle_OnParticleCollide::Direction' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, Normal) == 0x000034, "Member 'TslParticle_OnParticleCollide::Normal' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, BoneName) == 0x000040, "Member 'TslParticle_OnParticleCollide::BoneName' has a wrong offset!");
static_assert(offsetof(TslParticle_OnParticleCollide, PhysMat) == 0x000048, "Member 'TslParticle_OnParticleCollide::PhysMat' has a wrong offset!");

// Function TslGame.TslParticle.OnParticleFinish
// 0x0008 (0x0008 - 0x0000)
struct TslParticle_OnParticleFinish final
{
public:
	class UParticleSystemComponent*               PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslParticle_OnParticleFinish) == 0x000008, "Wrong alignment on TslParticle_OnParticleFinish");
static_assert(sizeof(TslParticle_OnParticleFinish) == 0x000008, "Wrong size on TslParticle_OnParticleFinish");
static_assert(offsetof(TslParticle_OnParticleFinish, PSystem) == 0x000000, "Member 'TslParticle_OnParticleFinish::PSystem' has a wrong offset!");

// Function TslGame.TslParticle.SetParticleParameter
// 0x0018 (0x0018 - 0x0000)
struct TslParticle_SetParticleParameter final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRTPC;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslParticle_SetParticleParameter) == 0x000008, "Wrong alignment on TslParticle_SetParticleParameter");
static_assert(sizeof(TslParticle_SetParticleParameter) == 0x000018, "Wrong size on TslParticle_SetParticleParameter");
static_assert(offsetof(TslParticle_SetParticleParameter, Name_0) == 0x000000, "Member 'TslParticle_SetParticleParameter::Name_0' has a wrong offset!");
static_assert(offsetof(TslParticle_SetParticleParameter, Value) == 0x000010, "Member 'TslParticle_SetParticleParameter::Value' has a wrong offset!");
static_assert(offsetof(TslParticle_SetParticleParameter, bEnableRTPC) == 0x000014, "Member 'TslParticle_SetParticleParameter::bEnableRTPC' has a wrong offset!");

// Function TslGame.TslParticle.GetParticleParamter
// 0x0018 (0x0018 - 0x0000)
struct TslParticle_GetParticleParamter final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslParticle_GetParticleParamter) == 0x000008, "Wrong alignment on TslParticle_GetParticleParamter");
static_assert(sizeof(TslParticle_GetParticleParamter) == 0x000018, "Wrong size on TslParticle_GetParticleParamter");
static_assert(offsetof(TslParticle_GetParticleParamter, Name_0) == 0x000000, "Member 'TslParticle_GetParticleParamter::Name_0' has a wrong offset!");
static_assert(offsetof(TslParticle_GetParticleParamter, DefaultValue) == 0x000010, "Member 'TslParticle_GetParticleParamter::DefaultValue' has a wrong offset!");
static_assert(offsetof(TslParticle_GetParticleParamter, ReturnValue) == 0x000014, "Member 'TslParticle_GetParticleParamter::ReturnValue' has a wrong offset!");

// Function TslGame.TslAIController.FindClosestEnemyWithLOS
// 0x0010 (0x0010 - 0x0000)
struct TslAIController_FindClosestEnemyWithLOS final
{
public:
	class ATslCharacter*                          ExcludeEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslAIController_FindClosestEnemyWithLOS) == 0x000008, "Wrong alignment on TslAIController_FindClosestEnemyWithLOS");
static_assert(sizeof(TslAIController_FindClosestEnemyWithLOS) == 0x000010, "Wrong size on TslAIController_FindClosestEnemyWithLOS");
static_assert(offsetof(TslAIController_FindClosestEnemyWithLOS, ExcludeEnemy) == 0x000000, "Member 'TslAIController_FindClosestEnemyWithLOS::ExcludeEnemy' has a wrong offset!");
static_assert(offsetof(TslAIController_FindClosestEnemyWithLOS, ReturnValue) == 0x000008, "Member 'TslAIController_FindClosestEnemyWithLOS::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Projectile.ServerFireProjectile
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_Projectile_ServerFireProjectile final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Projectile_ServerFireProjectile) == 0x000004, "Wrong alignment on TslWeapon_Projectile_ServerFireProjectile");
static_assert(sizeof(TslWeapon_Projectile_ServerFireProjectile) == 0x000018, "Wrong size on TslWeapon_Projectile_ServerFireProjectile");
static_assert(offsetof(TslWeapon_Projectile_ServerFireProjectile, Origin) == 0x000000, "Member 'TslWeapon_Projectile_ServerFireProjectile::Origin' has a wrong offset!");
static_assert(offsetof(TslWeapon_Projectile_ServerFireProjectile, ShootDir) == 0x00000C, "Member 'TslWeapon_Projectile_ServerFireProjectile::ShootDir' has a wrong offset!");

// Function TslGame.AircraftCarePackage.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct AircraftCarePackage_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AircraftCarePackage_IsPlayInEditor) == 0x000001, "Wrong alignment on AircraftCarePackage_IsPlayInEditor");
static_assert(sizeof(AircraftCarePackage_IsPlayInEditor) == 0x000001, "Wrong size on AircraftCarePackage_IsPlayInEditor");
static_assert(offsetof(AircraftCarePackage_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'AircraftCarePackage_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function TslGame.TransportAircraftVehicle.AllowInteractBy
// 0x0010 (0x0010 - 0x0000)
struct TransportAircraftVehicle_AllowInteractBy final
{
public:
	const class ATslCharacter*                    Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransportAircraftVehicle_AllowInteractBy) == 0x000008, "Wrong alignment on TransportAircraftVehicle_AllowInteractBy");
static_assert(sizeof(TransportAircraftVehicle_AllowInteractBy) == 0x000010, "Wrong size on TransportAircraftVehicle_AllowInteractBy");
static_assert(offsetof(TransportAircraftVehicle_AllowInteractBy, Character) == 0x000000, "Member 'TransportAircraftVehicle_AllowInteractBy::Character' has a wrong offset!");
static_assert(offsetof(TransportAircraftVehicle_AllowInteractBy, ReturnValue) == 0x000008, "Member 'TransportAircraftVehicle_AllowInteractBy::ReturnValue' has a wrong offset!");

// Function TslGame.TransportAircraftVehicle.OnInteractBy
// 0x0008 (0x0008 - 0x0000)
struct TransportAircraftVehicle_OnInteractBy final
{
public:
	class ATslCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransportAircraftVehicle_OnInteractBy) == 0x000008, "Wrong alignment on TransportAircraftVehicle_OnInteractBy");
static_assert(sizeof(TransportAircraftVehicle_OnInteractBy) == 0x000008, "Wrong size on TransportAircraftVehicle_OnInteractBy");
static_assert(offsetof(TransportAircraftVehicle_OnInteractBy, Character) == 0x000000, "Member 'TransportAircraftVehicle_OnInteractBy::Character' has a wrong offset!");

// Function TslGame.TransportAircraftVehicle.OnLeave
// 0x0010 (0x0010 - 0x0000)
struct TransportAircraftVehicle_OnLeave final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransportAircraftVehicle_OnLeave) == 0x000008, "Wrong alignment on TransportAircraftVehicle_OnLeave");
static_assert(sizeof(TransportAircraftVehicle_OnLeave) == 0x000010, "Wrong size on TransportAircraftVehicle_OnLeave");
static_assert(offsetof(TransportAircraftVehicle_OnLeave, Rider) == 0x000000, "Member 'TransportAircraftVehicle_OnLeave::Rider' has a wrong offset!");
static_assert(offsetof(TransportAircraftVehicle_OnLeave, Seat) == 0x000008, "Member 'TransportAircraftVehicle_OnLeave::Seat' has a wrong offset!");

// Function TslGame.TransportAircraftVehicle.OnRide
// 0x0010 (0x0010 - 0x0000)
struct TransportAircraftVehicle_OnRide final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransportAircraftVehicle_OnRide) == 0x000008, "Wrong alignment on TransportAircraftVehicle_OnRide");
static_assert(sizeof(TransportAircraftVehicle_OnRide) == 0x000010, "Wrong size on TransportAircraftVehicle_OnRide");
static_assert(offsetof(TransportAircraftVehicle_OnRide, Rider) == 0x000000, "Member 'TransportAircraftVehicle_OnRide::Rider' has a wrong offset!");
static_assert(offsetof(TransportAircraftVehicle_OnRide, Seat) == 0x000008, "Member 'TransportAircraftVehicle_OnRide::Seat' has a wrong offset!");

// Function TslGame.TransportAircraftVehicle.IsInEjectionArea
// 0x0001 (0x0001 - 0x0000)
struct TransportAircraftVehicle_IsInEjectionArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransportAircraftVehicle_IsInEjectionArea) == 0x000001, "Wrong alignment on TransportAircraftVehicle_IsInEjectionArea");
static_assert(sizeof(TransportAircraftVehicle_IsInEjectionArea) == 0x000001, "Wrong size on TransportAircraftVehicle_IsInEjectionArea");
static_assert(offsetof(TransportAircraftVehicle_IsInEjectionArea, ReturnValue) == 0x000000, "Member 'TransportAircraftVehicle_IsInEjectionArea::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.ActivationTriggerBeginOverlap
// 0x00A0 (0x00A0 - 0x0000)
struct TslWheeledVehicle_ActivationTriggerBeginOverlap final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0018(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_ActivationTriggerBeginOverlap) == 0x000008, "Wrong alignment on TslWheeledVehicle_ActivationTriggerBeginOverlap");
static_assert(sizeof(TslWheeledVehicle_ActivationTriggerBeginOverlap) == 0x0000A0, "Wrong size on TslWheeledVehicle_ActivationTriggerBeginOverlap");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerBeginOverlap, Other) == 0x000000, "Member 'TslWheeledVehicle_ActivationTriggerBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerBeginOverlap, OtherComp) == 0x000008, "Member 'TslWheeledVehicle_ActivationTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerBeginOverlap, OtherBodyIndex) == 0x000010, "Member 'TslWheeledVehicle_ActivationTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerBeginOverlap, bFromSweep) == 0x000014, "Member 'TslWheeledVehicle_ActivationTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerBeginOverlap, OverlapInfo) == 0x000018, "Member 'TslWheeledVehicle_ActivationTriggerBeginOverlap::OverlapInfo' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.ActivationTriggerEndOverlap
// 0x0018 (0x0018 - 0x0000)
struct TslWheeledVehicle_ActivationTriggerEndOverlap final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWheeledVehicle_ActivationTriggerEndOverlap) == 0x000008, "Wrong alignment on TslWheeledVehicle_ActivationTriggerEndOverlap");
static_assert(sizeof(TslWheeledVehicle_ActivationTriggerEndOverlap) == 0x000018, "Wrong size on TslWheeledVehicle_ActivationTriggerEndOverlap");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerEndOverlap, Other) == 0x000000, "Member 'TslWheeledVehicle_ActivationTriggerEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerEndOverlap, OtherComp) == 0x000008, "Member 'TslWheeledVehicle_ActivationTriggerEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_ActivationTriggerEndOverlap, OtherBodyIndex) == 0x000010, "Member 'TslWheeledVehicle_ActivationTriggerEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.BindCallbackToHUD
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_BindCallbackToHUD final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_BindCallbackToHUD) == 0x000008, "Wrong alignment on TslWheeledVehicle_BindCallbackToHUD");
static_assert(sizeof(TslWheeledVehicle_BindCallbackToHUD) == 0x000008, "Wrong size on TslWheeledVehicle_BindCallbackToHUD");
static_assert(offsetof(TslWheeledVehicle_BindCallbackToHUD, InController) == 0x000000, "Member 'TslWheeledVehicle_BindCallbackToHUD::InController' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.MulticastCharacterHitEffects
// 0x0010 (0x0010 - 0x0000)
struct TslWheeledVehicle_MulticastCharacterHitEffects final
{
public:
	class ATslCharacter*                          CharacterHit;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDamage;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWheeledVehicle_MulticastCharacterHitEffects) == 0x000008, "Wrong alignment on TslWheeledVehicle_MulticastCharacterHitEffects");
static_assert(sizeof(TslWheeledVehicle_MulticastCharacterHitEffects) == 0x000010, "Wrong size on TslWheeledVehicle_MulticastCharacterHitEffects");
static_assert(offsetof(TslWheeledVehicle_MulticastCharacterHitEffects, CharacterHit) == 0x000000, "Member 'TslWheeledVehicle_MulticastCharacterHitEffects::CharacterHit' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_MulticastCharacterHitEffects, HitDamage) == 0x000008, "Member 'TslWheeledVehicle_MulticastCharacterHitEffects::HitDamage' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.MulticastSetInstantHorn
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_MulticastSetInstantHorn final
{
public:
	struct FHornPlayInfo                          InHornPlayInfo;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_MulticastSetInstantHorn) == 0x000004, "Wrong alignment on TslWheeledVehicle_MulticastSetInstantHorn");
static_assert(sizeof(TslWheeledVehicle_MulticastSetInstantHorn) == 0x000008, "Wrong size on TslWheeledVehicle_MulticastSetInstantHorn");
static_assert(offsetof(TslWheeledVehicle_MulticastSetInstantHorn, InHornPlayInfo) == 0x000000, "Member 'TslWheeledVehicle_MulticastSetInstantHorn::InHornPlayInfo' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.OnBlockingWidgetOpened
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_OnBlockingWidgetOpened final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_OnBlockingWidgetOpened) == 0x000008, "Wrong alignment on TslWheeledVehicle_OnBlockingWidgetOpened");
static_assert(sizeof(TslWheeledVehicle_OnBlockingWidgetOpened) == 0x000008, "Wrong size on TslWheeledVehicle_OnBlockingWidgetOpened");
static_assert(offsetof(TslWheeledVehicle_OnBlockingWidgetOpened, Widget) == 0x000000, "Member 'TslWheeledVehicle_OnBlockingWidgetOpened::Widget' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.OnCharacterHit
// 0x0010 (0x0010 - 0x0000)
struct TslWheeledVehicle_OnCharacterHit final
{
public:
	class ATslCharacter*                          HitCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDamage;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWheeledVehicle_OnCharacterHit) == 0x000008, "Wrong alignment on TslWheeledVehicle_OnCharacterHit");
static_assert(sizeof(TslWheeledVehicle_OnCharacterHit) == 0x000010, "Wrong size on TslWheeledVehicle_OnCharacterHit");
static_assert(offsetof(TslWheeledVehicle_OnCharacterHit, HitCharacter) == 0x000000, "Member 'TslWheeledVehicle_OnCharacterHit::HitCharacter' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_OnCharacterHit, HitDamage) == 0x000008, "Member 'TslWheeledVehicle_OnCharacterHit::HitDamage' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.OnRide
// 0x0010 (0x0010 - 0x0000)
struct TslWheeledVehicle_OnRide final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_OnRide) == 0x000008, "Wrong alignment on TslWheeledVehicle_OnRide");
static_assert(sizeof(TslWheeledVehicle_OnRide) == 0x000010, "Wrong size on TslWheeledVehicle_OnRide");
static_assert(offsetof(TslWheeledVehicle_OnRide, Rider) == 0x000000, "Member 'TslWheeledVehicle_OnRide::Rider' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_OnRide, Seat) == 0x000008, "Member 'TslWheeledVehicle_OnRide::Seat' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.PlayHorn
// 0x0002 (0x0002 - 0x0000)
struct TslWheeledVehicle_PlayHorn final
{
public:
	bool                                          bIsLocalPlay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHornSoundType                                InHornSoundType;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_PlayHorn) == 0x000001, "Wrong alignment on TslWheeledVehicle_PlayHorn");
static_assert(sizeof(TslWheeledVehicle_PlayHorn) == 0x000002, "Wrong size on TslWheeledVehicle_PlayHorn");
static_assert(offsetof(TslWheeledVehicle_PlayHorn, bIsLocalPlay) == 0x000000, "Member 'TslWheeledVehicle_PlayHorn::bIsLocalPlay' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicle_PlayHorn, InHornSoundType) == 0x000001, "Member 'TslWheeledVehicle_PlayHorn::InHornSoundType' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.ServerSetBoosting
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_ServerSetBoosting final
{
public:
	bool                                          bNewBoosting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_ServerSetBoosting) == 0x000001, "Wrong alignment on TslWheeledVehicle_ServerSetBoosting");
static_assert(sizeof(TslWheeledVehicle_ServerSetBoosting) == 0x000001, "Wrong size on TslWheeledVehicle_ServerSetBoosting");
static_assert(offsetof(TslWheeledVehicle_ServerSetBoosting, bNewBoosting) == 0x000000, "Member 'TslWheeledVehicle_ServerSetBoosting::bNewBoosting' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.ServerSetHorn
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_ServerSetHorn final
{
public:
	struct FHornPlayInfo                          InHornPlayInfo;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_ServerSetHorn) == 0x000004, "Wrong alignment on TslWheeledVehicle_ServerSetHorn");
static_assert(sizeof(TslWheeledVehicle_ServerSetHorn) == 0x000008, "Wrong size on TslWheeledVehicle_ServerSetHorn");
static_assert(offsetof(TslWheeledVehicle_ServerSetHorn, InHornPlayInfo) == 0x000000, "Member 'TslWheeledVehicle_ServerSetHorn::InHornPlayInfo' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.SetAirControlPitchInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicle_SetAirControlPitchInput final
{
public:
	float                                         InInput;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_SetAirControlPitchInput) == 0x000004, "Wrong alignment on TslWheeledVehicle_SetAirControlPitchInput");
static_assert(sizeof(TslWheeledVehicle_SetAirControlPitchInput) == 0x000004, "Wrong size on TslWheeledVehicle_SetAirControlPitchInput");
static_assert(offsetof(TslWheeledVehicle_SetAirControlPitchInput, InInput) == 0x000000, "Member 'TslWheeledVehicle_SetAirControlPitchInput::InInput' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.TickHorn
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicle_TickHorn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_TickHorn) == 0x000004, "Wrong alignment on TslWheeledVehicle_TickHorn");
static_assert(sizeof(TslWheeledVehicle_TickHorn) == 0x000004, "Wrong size on TslWheeledVehicle_TickHorn");
static_assert(offsetof(TslWheeledVehicle_TickHorn, DeltaSeconds) == 0x000000, "Member 'TslWheeledVehicle_TickHorn::DeltaSeconds' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.UnBindCallbackToHUD
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_UnBindCallbackToHUD final
{
public:
	class ATslPlayerController*                   InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_UnBindCallbackToHUD) == 0x000008, "Wrong alignment on TslWheeledVehicle_UnBindCallbackToHUD");
static_assert(sizeof(TslWheeledVehicle_UnBindCallbackToHUD) == 0x000008, "Wrong size on TslWheeledVehicle_UnBindCallbackToHUD");
static_assert(offsetof(TslWheeledVehicle_UnBindCallbackToHUD, InController) == 0x000000, "Member 'TslWheeledVehicle_UnBindCallbackToHUD::InController' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.GetAirControlPitchInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicle_GetAirControlPitchInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_GetAirControlPitchInput) == 0x000004, "Wrong alignment on TslWheeledVehicle_GetAirControlPitchInput");
static_assert(sizeof(TslWheeledVehicle_GetAirControlPitchInput) == 0x000004, "Wrong size on TslWheeledVehicle_GetAirControlPitchInput");
static_assert(offsetof(TslWheeledVehicle_GetAirControlPitchInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_GetAirControlPitchInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.GetBuffComponent
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_GetBuffComponent final
{
public:
	class UBuffComponet*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_GetBuffComponent) == 0x000008, "Wrong alignment on TslWheeledVehicle_GetBuffComponent");
static_assert(sizeof(TslWheeledVehicle_GetBuffComponent) == 0x000008, "Wrong size on TslWheeledVehicle_GetBuffComponent");
static_assert(offsetof(TslWheeledVehicle_GetBuffComponent, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_GetBuffComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.GetCurrentWaterSurfaceZ
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicle_GetCurrentWaterSurfaceZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_GetCurrentWaterSurfaceZ) == 0x000004, "Wrong alignment on TslWheeledVehicle_GetCurrentWaterSurfaceZ");
static_assert(sizeof(TslWheeledVehicle_GetCurrentWaterSurfaceZ) == 0x000004, "Wrong size on TslWheeledVehicle_GetCurrentWaterSurfaceZ");
static_assert(offsetof(TslWheeledVehicle_GetCurrentWaterSurfaceZ, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_GetCurrentWaterSurfaceZ::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.GetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicle_GetSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_GetSteeringInput) == 0x000004, "Wrong alignment on TslWheeledVehicle_GetSteeringInput");
static_assert(sizeof(TslWheeledVehicle_GetSteeringInput) == 0x000004, "Wrong size on TslWheeledVehicle_GetSteeringInput");
static_assert(offsetof(TslWheeledVehicle_GetSteeringInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_GetSteeringInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.GetTslVehicleMovement
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicle_GetTslVehicleMovement final
{
public:
	class UTslWheeledVehicleMovement*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_GetTslVehicleMovement) == 0x000008, "Wrong alignment on TslWheeledVehicle_GetTslVehicleMovement");
static_assert(sizeof(TslWheeledVehicle_GetTslVehicleMovement) == 0x000008, "Wrong size on TslWheeledVehicle_GetTslVehicleMovement");
static_assert(offsetof(TslWheeledVehicle_GetTslVehicleMovement, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_GetTslVehicleMovement::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsBoosting
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsBoosting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsBoosting) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsBoosting");
static_assert(sizeof(TslWheeledVehicle_IsBoosting) == 0x000001, "Wrong size on TslWheeledVehicle_IsBoosting");
static_assert(offsetof(TslWheeledVehicle_IsBoosting, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsBoosting::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsEnabledOptimizeTick
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsEnabledOptimizeTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsEnabledOptimizeTick) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsEnabledOptimizeTick");
static_assert(sizeof(TslWheeledVehicle_IsEnabledOptimizeTick) == 0x000001, "Wrong size on TslWheeledVehicle_IsEnabledOptimizeTick");
static_assert(offsetof(TslWheeledVehicle_IsEnabledOptimizeTick, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsEnabledOptimizeTick::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsInWaterVolume
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsInWaterVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsInWaterVolume) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsInWaterVolume");
static_assert(sizeof(TslWheeledVehicle_IsInWaterVolume) == 0x000001, "Wrong size on TslWheeledVehicle_IsInWaterVolume");
static_assert(offsetof(TslWheeledVehicle_IsInWaterVolume, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsInWaterVolume::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsStabilizeOverrideEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsStabilizeOverrideEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsStabilizeOverrideEnabled) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsStabilizeOverrideEnabled");
static_assert(sizeof(TslWheeledVehicle_IsStabilizeOverrideEnabled) == 0x000001, "Wrong size on TslWheeledVehicle_IsStabilizeOverrideEnabled");
static_assert(offsetof(TslWheeledVehicle_IsStabilizeOverrideEnabled, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsStabilizeOverrideEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsStablizeOverrideActive
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsStablizeOverrideActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsStablizeOverrideActive) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsStablizeOverrideActive");
static_assert(sizeof(TslWheeledVehicle_IsStablizeOverrideActive) == 0x000001, "Wrong size on TslWheeledVehicle_IsStablizeOverrideActive");
static_assert(offsetof(TslWheeledVehicle_IsStablizeOverrideActive, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsStablizeOverrideActive::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicle.IsSunken
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicle_IsSunken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicle_IsSunken) == 0x000001, "Wrong alignment on TslWheeledVehicle_IsSunken");
static_assert(sizeof(TslWheeledVehicle_IsSunken) == 0x000001, "Wrong size on TslWheeledVehicle_IsSunken");
static_assert(offsetof(TslWheeledVehicle_IsSunken, ReturnValue) == 0x000000, "Member 'TslWheeledVehicle_IsSunken::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicle.GetSteerYawAngle
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicle_GetSteerYawAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicle_GetSteerYawAngle) == 0x000004, "Wrong alignment on TslFloatingVehicle_GetSteerYawAngle");
static_assert(sizeof(TslFloatingVehicle_GetSteerYawAngle) == 0x000004, "Wrong size on TslFloatingVehicle_GetSteerYawAngle");
static_assert(offsetof(TslFloatingVehicle_GetSteerYawAngle, ReturnValue) == 0x000000, "Member 'TslFloatingVehicle_GetSteerYawAngle::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicle.GetVehicleAcceleration
// 0x000C (0x000C - 0x0000)
struct TslFloatingVehicle_GetVehicleAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicle_GetVehicleAcceleration) == 0x000004, "Wrong alignment on TslFloatingVehicle_GetVehicleAcceleration");
static_assert(sizeof(TslFloatingVehicle_GetVehicleAcceleration) == 0x00000C, "Wrong size on TslFloatingVehicle_GetVehicleAcceleration");
static_assert(offsetof(TslFloatingVehicle_GetVehicleAcceleration, ReturnValue) == 0x000000, "Member 'TslFloatingVehicle_GetVehicleAcceleration::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicle.GetVehicleEngineImmersionDepth
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicle_GetVehicleEngineImmersionDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicle_GetVehicleEngineImmersionDepth) == 0x000004, "Wrong alignment on TslFloatingVehicle_GetVehicleEngineImmersionDepth");
static_assert(sizeof(TslFloatingVehicle_GetVehicleEngineImmersionDepth) == 0x000004, "Wrong size on TslFloatingVehicle_GetVehicleEngineImmersionDepth");
static_assert(offsetof(TslFloatingVehicle_GetVehicleEngineImmersionDepth, ReturnValue) == 0x000000, "Member 'TslFloatingVehicle_GetVehicleEngineImmersionDepth::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicle.IsBoosting
// 0x0001 (0x0001 - 0x0000)
struct TslFloatingVehicle_IsBoosting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicle_IsBoosting) == 0x000001, "Wrong alignment on TslFloatingVehicle_IsBoosting");
static_assert(sizeof(TslFloatingVehicle_IsBoosting) == 0x000001, "Wrong size on TslFloatingVehicle_IsBoosting");
static_assert(offsetof(TslFloatingVehicle_IsBoosting, ReturnValue) == 0x000000, "Member 'TslFloatingVehicle_IsBoosting::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.ClientPunctureTire
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_ClientPunctureTire final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_ClientPunctureTire) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_ClientPunctureTire");
static_assert(sizeof(TslWheeledVehicleMovement_ClientPunctureTire) == 0x000004, "Wrong size on TslWheeledVehicleMovement_ClientPunctureTire");
static_assert(offsetof(TslWheeledVehicleMovement_ClientPunctureTire, WheelIndex) == 0x000000, "Member 'TslWheeledVehicleMovement_ClientPunctureTire::WheelIndex' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.ServerUpdateAdditionalState
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_ServerUpdateAdditionalState final
{
public:
	int32                                         TargetGear;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_ServerUpdateAdditionalState) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_ServerUpdateAdditionalState");
static_assert(sizeof(TslWheeledVehicleMovement_ServerUpdateAdditionalState) == 0x000004, "Wrong size on TslWheeledVehicleMovement_ServerUpdateAdditionalState");
static_assert(offsetof(TslWheeledVehicleMovement_ServerUpdateAdditionalState, TargetGear) == 0x000000, "Member 'TslWheeledVehicleMovement_ServerUpdateAdditionalState::TargetGear' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.SetSimulateVehicle
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicleMovement_SetSimulateVehicle final
{
public:
	bool                                          bSimulate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_SetSimulateVehicle) == 0x000001, "Wrong alignment on TslWheeledVehicleMovement_SetSimulateVehicle");
static_assert(sizeof(TslWheeledVehicleMovement_SetSimulateVehicle) == 0x000001, "Wrong size on TslWheeledVehicleMovement_SetSimulateVehicle");
static_assert(offsetof(TslWheeledVehicleMovement_SetSimulateVehicle, bSimulate) == 0x000000, "Member 'TslWheeledVehicleMovement_SetSimulateVehicle::bSimulate' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_GetBrakeInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetBrakeInput) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetBrakeInput");
static_assert(sizeof(TslWheeledVehicleMovement_GetBrakeInput) == 0x000004, "Wrong size on TslWheeledVehicleMovement_GetBrakeInput");
static_assert(offsetof(TslWheeledVehicleMovement_GetBrakeInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetBrakeInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetHandbrakeInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_GetHandbrakeInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetHandbrakeInput) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetHandbrakeInput");
static_assert(sizeof(TslWheeledVehicleMovement_GetHandbrakeInput) == 0x000004, "Wrong size on TslWheeledVehicleMovement_GetHandbrakeInput");
static_assert(offsetof(TslWheeledVehicleMovement_GetHandbrakeInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetHandbrakeInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_GetSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetSteeringInput) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetSteeringInput");
static_assert(sizeof(TslWheeledVehicleMovement_GetSteeringInput) == 0x000004, "Wrong size on TslWheeledVehicleMovement_GetSteeringInput");
static_assert(offsetof(TslWheeledVehicleMovement_GetSteeringInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetSteeringInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetSteeringInputClamped
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_GetSteeringInputClamped final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetSteeringInputClamped) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetSteeringInputClamped");
static_assert(sizeof(TslWheeledVehicleMovement_GetSteeringInputClamped) == 0x000004, "Wrong size on TslWheeledVehicleMovement_GetSteeringInputClamped");
static_assert(offsetof(TslWheeledVehicleMovement_GetSteeringInputClamped, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetSteeringInputClamped::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct TslWheeledVehicleMovement_GetThrottleInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetThrottleInput) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetThrottleInput");
static_assert(sizeof(TslWheeledVehicleMovement_GetThrottleInput) == 0x000004, "Wrong size on TslWheeledVehicleMovement_GetThrottleInput");
static_assert(offsetof(TslWheeledVehicleMovement_GetThrottleInput, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetThrottleInput::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelContactData
// 0x0018 (0x0018 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelContactData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSkid;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpin;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspOffsetForContact;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWheelContactData                      ReturnValue;                                       // 0x0014(0x0003)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelContactData) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelContactData");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelContactData) == 0x000018, "Wrong size on TslWheeledVehicleMovement_GetWheelContactData");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelContactData::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, MinVelocity) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelContactData::MinVelocity' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, MinSkid) == 0x000008, "Member 'TslWheeledVehicleMovement_GetWheelContactData::MinSkid' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, MinSpin) == 0x00000C, "Member 'TslWheeledVehicleMovement_GetWheelContactData::MinSpin' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, SuspOffsetForContact) == 0x000010, "Member 'TslWheeledVehicleMovement_GetWheelContactData::SuspOffsetForContact' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactData, ReturnValue) == 0x000014, "Member 'TslWheeledVehicleMovement_GetWheelContactData::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelContactSurfaceMaterial
// 0x0010 (0x0010 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial) == 0x000008, "Wrong alignment on TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial) == 0x000010, "Wrong size on TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial, ReturnValue) == 0x000008, "Member 'TslWheeledVehicleMovement_GetWheelContactSurfaceMaterial::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelContactType
// 0x0018 (0x0018 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelContactType final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSkid;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpin;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspOffsetForContact;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelContactType                             ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelContactType) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelContactType");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelContactType) == 0x000018, "Wrong size on TslWheeledVehicleMovement_GetWheelContactType");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelContactType::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, MinVelocity) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelContactType::MinVelocity' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, MinSkid) == 0x000008, "Member 'TslWheeledVehicleMovement_GetWheelContactType::MinSkid' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, MinSpin) == 0x00000C, "Member 'TslWheeledVehicleMovement_GetWheelContactType::MinSpin' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, SuspOffsetForContact) == 0x000010, "Member 'TslWheeledVehicleMovement_GetWheelContactType::SuspOffsetForContact' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelContactType, ReturnValue) == 0x000014, "Member 'TslWheeledVehicleMovement_GetWheelContactType::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelHealthPercentages
// 0x0010 (0x0010 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelHealthPercentages final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelHealthPercentages) == 0x000008, "Wrong alignment on TslWheeledVehicleMovement_GetWheelHealthPercentages");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelHealthPercentages) == 0x000010, "Wrong size on TslWheeledVehicleMovement_GetWheelHealthPercentages");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelHealthPercentages, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelHealthPercentages::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelRotationSpeed
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelRotationSpeed final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelRotationSpeed) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelRotationSpeed");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelRotationSpeed) == 0x000008, "Wrong size on TslWheeledVehicleMovement_GetWheelRotationSpeed");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelRotationSpeed, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelRotationSpeed::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelRotationSpeed, ReturnValue) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelRotationSpeed::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelSuspensionMaxDrop
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop) == 0x000008, "Wrong size on TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop, ReturnValue) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelSuspensionMaxDrop::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelSuspensionMaxRaise
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise) == 0x000008, "Wrong size on TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise, ReturnValue) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelSuspensionMaxRaise::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.GetWheelWaterDepth
// 0x0008 (0x0008 - 0x0000)
struct TslWheeledVehicleMovement_GetWheelWaterDepth final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_GetWheelWaterDepth) == 0x000004, "Wrong alignment on TslWheeledVehicleMovement_GetWheelWaterDepth");
static_assert(sizeof(TslWheeledVehicleMovement_GetWheelWaterDepth) == 0x000008, "Wrong size on TslWheeledVehicleMovement_GetWheelWaterDepth");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelWaterDepth, Index_0) == 0x000000, "Member 'TslWheeledVehicleMovement_GetWheelWaterDepth::Index_0' has a wrong offset!");
static_assert(offsetof(TslWheeledVehicleMovement_GetWheelWaterDepth, ReturnValue) == 0x000004, "Member 'TslWheeledVehicleMovement_GetWheelWaterDepth::ReturnValue' has a wrong offset!");

// Function TslGame.TslWheeledVehicleMovement.IsSimulatingVehicle
// 0x0001 (0x0001 - 0x0000)
struct TslWheeledVehicleMovement_IsSimulatingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWheeledVehicleMovement_IsSimulatingVehicle) == 0x000001, "Wrong alignment on TslWheeledVehicleMovement_IsSimulatingVehicle");
static_assert(sizeof(TslWheeledVehicleMovement_IsSimulatingVehicle) == 0x000001, "Wrong size on TslWheeledVehicleMovement_IsSimulatingVehicle");
static_assert(offsetof(TslWheeledVehicleMovement_IsSimulatingVehicle, ReturnValue) == 0x000000, "Member 'TslWheeledVehicleMovement_IsSimulatingVehicle::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.ServerUpdateInput
// 0x000C (0x000C - 0x0000)
struct TslFloatingVehicleMovement_ServerUpdateInput final
{
public:
	float                                         InForwardInput;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationInput;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsBoosting;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslFloatingVehicleMovement_ServerUpdateInput) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_ServerUpdateInput");
static_assert(sizeof(TslFloatingVehicleMovement_ServerUpdateInput) == 0x00000C, "Wrong size on TslFloatingVehicleMovement_ServerUpdateInput");
static_assert(offsetof(TslFloatingVehicleMovement_ServerUpdateInput, InForwardInput) == 0x000000, "Member 'TslFloatingVehicleMovement_ServerUpdateInput::InForwardInput' has a wrong offset!");
static_assert(offsetof(TslFloatingVehicleMovement_ServerUpdateInput, InRotationInput) == 0x000004, "Member 'TslFloatingVehicleMovement_ServerUpdateInput::InRotationInput' has a wrong offset!");
static_assert(offsetof(TslFloatingVehicleMovement_ServerUpdateInput, bInIsBoosting) == 0x000008, "Member 'TslFloatingVehicleMovement_ServerUpdateInput::bInIsBoosting' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.GetAcceleration
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicleMovement_GetAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_GetAcceleration) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_GetAcceleration");
static_assert(sizeof(TslFloatingVehicleMovement_GetAcceleration) == 0x000004, "Wrong size on TslFloatingVehicleMovement_GetAcceleration");
static_assert(offsetof(TslFloatingVehicleMovement_GetAcceleration, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_GetAcceleration::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.GetCalculatedAcceleration
// 0x000C (0x000C - 0x0000)
struct TslFloatingVehicleMovement_GetCalculatedAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_GetCalculatedAcceleration) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_GetCalculatedAcceleration");
static_assert(sizeof(TslFloatingVehicleMovement_GetCalculatedAcceleration) == 0x00000C, "Wrong size on TslFloatingVehicleMovement_GetCalculatedAcceleration");
static_assert(offsetof(TslFloatingVehicleMovement_GetCalculatedAcceleration, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_GetCalculatedAcceleration::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.GetMaxAcceleration
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicleMovement_GetMaxAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_GetMaxAcceleration) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_GetMaxAcceleration");
static_assert(sizeof(TslFloatingVehicleMovement_GetMaxAcceleration) == 0x000004, "Wrong size on TslFloatingVehicleMovement_GetMaxAcceleration");
static_assert(offsetof(TslFloatingVehicleMovement_GetMaxAcceleration, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_GetMaxAcceleration::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.GetMaxRotationYawAngle
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicleMovement_GetMaxRotationYawAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_GetMaxRotationYawAngle) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_GetMaxRotationYawAngle");
static_assert(sizeof(TslFloatingVehicleMovement_GetMaxRotationYawAngle) == 0x000004, "Wrong size on TslFloatingVehicleMovement_GetMaxRotationYawAngle");
static_assert(offsetof(TslFloatingVehicleMovement_GetMaxRotationYawAngle, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_GetMaxRotationYawAngle::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.GetRotationYawAngle
// 0x0004 (0x0004 - 0x0000)
struct TslFloatingVehicleMovement_GetRotationYawAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_GetRotationYawAngle) == 0x000004, "Wrong alignment on TslFloatingVehicleMovement_GetRotationYawAngle");
static_assert(sizeof(TslFloatingVehicleMovement_GetRotationYawAngle) == 0x000004, "Wrong size on TslFloatingVehicleMovement_GetRotationYawAngle");
static_assert(offsetof(TslFloatingVehicleMovement_GetRotationYawAngle, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_GetRotationYawAngle::ReturnValue' has a wrong offset!");

// Function TslGame.TslFloatingVehicleMovement.IsBoosting
// 0x0001 (0x0001 - 0x0000)
struct TslFloatingVehicleMovement_IsBoosting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFloatingVehicleMovement_IsBoosting) == 0x000001, "Wrong alignment on TslFloatingVehicleMovement_IsBoosting");
static_assert(sizeof(TslFloatingVehicleMovement_IsBoosting) == 0x000001, "Wrong size on TslFloatingVehicleMovement_IsBoosting");
static_assert(offsetof(TslFloatingVehicleMovement_IsBoosting, ReturnValue) == 0x000000, "Member 'TslFloatingVehicleMovement_IsBoosting::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.StartVaultingTask
// 0x0040 (0x0040 - 0x0000)
struct TslCharacterMovement_StartVaultingTask final
{
public:
	struct FVaultingTask                          InVaultTask;                                       // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_StartVaultingTask) == 0x000004, "Wrong alignment on TslCharacterMovement_StartVaultingTask");
static_assert(sizeof(TslCharacterMovement_StartVaultingTask) == 0x000040, "Wrong size on TslCharacterMovement_StartVaultingTask");
static_assert(offsetof(TslCharacterMovement_StartVaultingTask, InVaultTask) == 0x000000, "Member 'TslCharacterMovement_StartVaultingTask::InVaultTask' has a wrong offset!");

// Function TslGame.TslCharacterMovement.EndCurrentTaskToFall
// 0x0001 (0x0001 - 0x0000)
struct TslCharacterMovement_EndCurrentTaskToFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_EndCurrentTaskToFall) == 0x000001, "Wrong alignment on TslCharacterMovement_EndCurrentTaskToFall");
static_assert(sizeof(TslCharacterMovement_EndCurrentTaskToFall) == 0x000001, "Wrong size on TslCharacterMovement_EndCurrentTaskToFall");
static_assert(offsetof(TslCharacterMovement_EndCurrentTaskToFall, ReturnValue) == 0x000000, "Member 'TslCharacterMovement_EndCurrentTaskToFall::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.EvaluateVaultAnimType
// 0x0018 (0x0018 - 0x0000)
struct TslCharacterMovement_EvaluateVaultAnimType final
{
public:
	int32                                         FirstRow;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApexAdditiveStepCounter;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageCellCount;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceVault;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceClimb;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharVelocity;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVaultAnimType                                ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacterMovement_EvaluateVaultAnimType) == 0x000004, "Wrong alignment on TslCharacterMovement_EvaluateVaultAnimType");
static_assert(sizeof(TslCharacterMovement_EvaluateVaultAnimType) == 0x000018, "Wrong size on TslCharacterMovement_EvaluateVaultAnimType");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, FirstRow) == 0x000000, "Member 'TslCharacterMovement_EvaluateVaultAnimType::FirstRow' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, ApexAdditiveStepCounter) == 0x000004, "Member 'TslCharacterMovement_EvaluateVaultAnimType::ApexAdditiveStepCounter' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, AverageCellCount) == 0x000008, "Member 'TslCharacterMovement_EvaluateVaultAnimType::AverageCellCount' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, bForceVault) == 0x00000C, "Member 'TslCharacterMovement_EvaluateVaultAnimType::bForceVault' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, bForceClimb) == 0x00000D, "Member 'TslCharacterMovement_EvaluateVaultAnimType::bForceClimb' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, CharVelocity) == 0x000010, "Member 'TslCharacterMovement_EvaluateVaultAnimType::CharVelocity' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_EvaluateVaultAnimType, ReturnValue) == 0x000014, "Member 'TslCharacterMovement_EvaluateVaultAnimType::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.GetCurrentVaultType
// 0x0001 (0x0001 - 0x0000)
struct TslCharacterMovement_GetCurrentVaultType final
{
public:
	EVaultAnimType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_GetCurrentVaultType) == 0x000001, "Wrong alignment on TslCharacterMovement_GetCurrentVaultType");
static_assert(sizeof(TslCharacterMovement_GetCurrentVaultType) == 0x000001, "Wrong size on TslCharacterMovement_GetCurrentVaultType");
static_assert(offsetof(TslCharacterMovement_GetCurrentVaultType, ReturnValue) == 0x000000, "Member 'TslCharacterMovement_GetCurrentVaultType::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.GetGlobalVaultingSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct TslCharacterMovement_GetGlobalVaultingSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_GetGlobalVaultingSpeedMultiplier) == 0x000004, "Wrong alignment on TslCharacterMovement_GetGlobalVaultingSpeedMultiplier");
static_assert(sizeof(TslCharacterMovement_GetGlobalVaultingSpeedMultiplier) == 0x000004, "Wrong size on TslCharacterMovement_GetGlobalVaultingSpeedMultiplier");
static_assert(offsetof(TslCharacterMovement_GetGlobalVaultingSpeedMultiplier, ReturnValue) == 0x000000, "Member 'TslCharacterMovement_GetGlobalVaultingSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.GetVaultingDataFromAnim
// 0x0010 (0x0010 - 0x0000)
struct TslCharacterMovement_GetVaultingDataFromAnim final
{
public:
	EVaultAnimType                                InVaultType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVaultingData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_GetVaultingDataFromAnim) == 0x000008, "Wrong alignment on TslCharacterMovement_GetVaultingDataFromAnim");
static_assert(sizeof(TslCharacterMovement_GetVaultingDataFromAnim) == 0x000010, "Wrong size on TslCharacterMovement_GetVaultingDataFromAnim");
static_assert(offsetof(TslCharacterMovement_GetVaultingDataFromAnim, InVaultType) == 0x000000, "Member 'TslCharacterMovement_GetVaultingDataFromAnim::InVaultType' has a wrong offset!");
static_assert(offsetof(TslCharacterMovement_GetVaultingDataFromAnim, ReturnValue) == 0x000008, "Member 'TslCharacterMovement_GetVaultingDataFromAnim::ReturnValue' has a wrong offset!");

// Function TslGame.TslCharacterMovement.GetVTimer
// 0x0004 (0x0004 - 0x0000)
struct TslCharacterMovement_GetVTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterMovement_GetVTimer) == 0x000004, "Wrong alignment on TslCharacterMovement_GetVTimer");
static_assert(sizeof(TslCharacterMovement_GetVTimer) == 0x000004, "Wrong size on TslCharacterMovement_GetVTimer");
static_assert(offsetof(TslCharacterMovement_GetVTimer, ReturnValue) == 0x000000, "Member 'TslCharacterMovement_GetVTimer::ReturnValue' has a wrong offset!");

// Function TslGame.TslAnimInstance.CacheCharacterReference
// 0x0008 (0x0008 - 0x0000)
struct TslAnimInstance_CacheCharacterReference final
{
public:
	class ATslCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAnimInstance_CacheCharacterReference) == 0x000008, "Wrong alignment on TslAnimInstance_CacheCharacterReference");
static_assert(sizeof(TslAnimInstance_CacheCharacterReference) == 0x000008, "Wrong size on TslAnimInstance_CacheCharacterReference");
static_assert(offsetof(TslAnimInstance_CacheCharacterReference, InCharacter) == 0x000000, "Member 'TslAnimInstance_CacheCharacterReference::InCharacter' has a wrong offset!");

// Function TslGame.TslAnimInstance.OnHitReaction
// 0x0020 (0x0020 - 0x0000)
struct TslAnimInstance_OnHitReaction final
{
public:
	EAnimWeaponType                               WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslAnimInstance_OnHitReaction) == 0x000004, "Wrong alignment on TslAnimInstance_OnHitReaction");
static_assert(sizeof(TslAnimInstance_OnHitReaction) == 0x000020, "Wrong size on TslAnimInstance_OnHitReaction");
static_assert(offsetof(TslAnimInstance_OnHitReaction, WeaponType) == 0x000000, "Member 'TslAnimInstance_OnHitReaction::WeaponType' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_OnHitReaction, BoneName) == 0x000008, "Member 'TslAnimInstance_OnHitReaction::BoneName' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_OnHitReaction, Direction) == 0x000010, "Member 'TslAnimInstance_OnHitReaction::Direction' has a wrong offset!");

// Function TslGame.TslAnimInstance.RandomizeIdleIndex_CP
// 0x0001 (0x0001 - 0x0000)
struct TslAnimInstance_RandomizeIdleIndex_CP final
{
public:
	bool                                          ExludeLastIndex;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAnimInstance_RandomizeIdleIndex_CP) == 0x000001, "Wrong alignment on TslAnimInstance_RandomizeIdleIndex_CP");
static_assert(sizeof(TslAnimInstance_RandomizeIdleIndex_CP) == 0x000001, "Wrong size on TslAnimInstance_RandomizeIdleIndex_CP");
static_assert(offsetof(TslAnimInstance_RandomizeIdleIndex_CP, ExludeLastIndex) == 0x000000, "Member 'TslAnimInstance_RandomizeIdleIndex_CP::ExludeLastIndex' has a wrong offset!");

// Function TslGame.TslAnimInstance.SetJumpStartLocation
// 0x0010 (0x0010 - 0x0000)
struct TslAnimInstance_SetJumpStartLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DefaultFallHeight;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAnimInstance_SetJumpStartLocation) == 0x000004, "Wrong alignment on TslAnimInstance_SetJumpStartLocation");
static_assert(sizeof(TslAnimInstance_SetJumpStartLocation) == 0x000010, "Wrong size on TslAnimInstance_SetJumpStartLocation");
static_assert(offsetof(TslAnimInstance_SetJumpStartLocation, NewLocation) == 0x000000, "Member 'TslAnimInstance_SetJumpStartLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_SetJumpStartLocation, DefaultFallHeight) == 0x00000C, "Member 'TslAnimInstance_SetJumpStartLocation::DefaultFallHeight' has a wrong offset!");

// Function TslGame.TslAnimInstance.SetLandPredictionVector
// 0x000C (0x000C - 0x0000)
struct TslAnimInstance_SetLandPredictionVector final
{
public:
	struct FVector                                newLandVector;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAnimInstance_SetLandPredictionVector) == 0x000004, "Wrong alignment on TslAnimInstance_SetLandPredictionVector");
static_assert(sizeof(TslAnimInstance_SetLandPredictionVector) == 0x00000C, "Wrong size on TslAnimInstance_SetLandPredictionVector");
static_assert(offsetof(TslAnimInstance_SetLandPredictionVector, newLandVector) == 0x000000, "Member 'TslAnimInstance_SetLandPredictionVector::newLandVector' has a wrong offset!");

// Function TslGame.TslAnimInstance.SetWeaponStatesEvaluationCooldown
// 0x0004 (0x0004 - 0x0000)
struct TslAnimInstance_SetWeaponStatesEvaluationCooldown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAnimInstance_SetWeaponStatesEvaluationCooldown) == 0x000004, "Wrong alignment on TslAnimInstance_SetWeaponStatesEvaluationCooldown");
static_assert(sizeof(TslAnimInstance_SetWeaponStatesEvaluationCooldown) == 0x000004, "Wrong size on TslAnimInstance_SetWeaponStatesEvaluationCooldown");
static_assert(offsetof(TslAnimInstance_SetWeaponStatesEvaluationCooldown, Time) == 0x000000, "Member 'TslAnimInstance_SetWeaponStatesEvaluationCooldown::Time' has a wrong offset!");

// Function TslGame.TslAnimInstance.FindPositionFromDistanceCurve
// 0x0018 (0x0018 - 0x0000)
struct TslAnimInstance_FindPositionFromDistanceCurve final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      InAnimSequence;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslAnimInstance_FindPositionFromDistanceCurve) == 0x000008, "Wrong alignment on TslAnimInstance_FindPositionFromDistanceCurve");
static_assert(sizeof(TslAnimInstance_FindPositionFromDistanceCurve) == 0x000018, "Wrong size on TslAnimInstance_FindPositionFromDistanceCurve");
static_assert(offsetof(TslAnimInstance_FindPositionFromDistanceCurve, Distance) == 0x000000, "Member 'TslAnimInstance_FindPositionFromDistanceCurve::Distance' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_FindPositionFromDistanceCurve, InAnimSequence) == 0x000008, "Member 'TslAnimInstance_FindPositionFromDistanceCurve::InAnimSequence' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_FindPositionFromDistanceCurve, ReturnValue) == 0x000010, "Member 'TslAnimInstance_FindPositionFromDistanceCurve::ReturnValue' has a wrong offset!");

// Function TslGame.TslAnimInstance.HandleCardinalDirection90
// 0x0008 (0x0008 - 0x0000)
struct TslAnimInstance_HandleCardinalDirection90 final
{
public:
	float                                         InDirection;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslAnimInstance_HandleCardinalDirection90) == 0x000004, "Wrong alignment on TslAnimInstance_HandleCardinalDirection90");
static_assert(sizeof(TslAnimInstance_HandleCardinalDirection90) == 0x000008, "Wrong size on TslAnimInstance_HandleCardinalDirection90");
static_assert(offsetof(TslAnimInstance_HandleCardinalDirection90, InDirection) == 0x000000, "Member 'TslAnimInstance_HandleCardinalDirection90::InDirection' has a wrong offset!");
static_assert(offsetof(TslAnimInstance_HandleCardinalDirection90, ReturnValue) == 0x000004, "Member 'TslAnimInstance_HandleCardinalDirection90::ReturnValue' has a wrong offset!");

// Function TslGame.TslHUD.NotifyDropSlotOnOtherContainer
// 0x0030 (0x0030 - 0x0000)
struct TslHUD_NotifyDropSlotOnOtherContainer final
{
public:
	TScriptInterface<class ISlotContainerInterface> Container;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISlotContainerInterface> OtherContainer;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_NotifyDropSlotOnOtherContainer) == 0x000008, "Wrong alignment on TslHUD_NotifyDropSlotOnOtherContainer");
static_assert(sizeof(TslHUD_NotifyDropSlotOnOtherContainer) == 0x000030, "Wrong size on TslHUD_NotifyDropSlotOnOtherContainer");
static_assert(offsetof(TslHUD_NotifyDropSlotOnOtherContainer, Container) == 0x000000, "Member 'TslHUD_NotifyDropSlotOnOtherContainer::Container' has a wrong offset!");
static_assert(offsetof(TslHUD_NotifyDropSlotOnOtherContainer, Slot) == 0x000010, "Member 'TslHUD_NotifyDropSlotOnOtherContainer::Slot' has a wrong offset!");
static_assert(offsetof(TslHUD_NotifyDropSlotOnOtherContainer, OtherContainer) == 0x000020, "Member 'TslHUD_NotifyDropSlotOnOtherContainer::OtherContainer' has a wrong offset!");

// Function TslGame.TslHUD.SetHighlightProvider
// 0x0010 (0x0010 - 0x0000)
struct TslHUD_SetHighlightProvider final
{
public:
	class FString                                 Provider;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_SetHighlightProvider) == 0x000008, "Wrong alignment on TslHUD_SetHighlightProvider");
static_assert(sizeof(TslHUD_SetHighlightProvider) == 0x000010, "Wrong size on TslHUD_SetHighlightProvider");
static_assert(offsetof(TslHUD_SetHighlightProvider, Provider) == 0x000000, "Member 'TslHUD_SetHighlightProvider::Provider' has a wrong offset!");

// Function TslGame.TslHUD.SpawnActorInSceneCaptureWorld
// 0x0050 (0x0050 - 0x0000)
struct TslHUD_SpawnActorInSceneCaptureWorld final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* SpawnedActor)>   DelegateToCall;                                    // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_SpawnActorInSceneCaptureWorld) == 0x000010, "Wrong alignment on TslHUD_SpawnActorInSceneCaptureWorld");
static_assert(sizeof(TslHUD_SpawnActorInSceneCaptureWorld) == 0x000050, "Wrong size on TslHUD_SpawnActorInSceneCaptureWorld");
static_assert(offsetof(TslHUD_SpawnActorInSceneCaptureWorld, ActorClass) == 0x000000, "Member 'TslHUD_SpawnActorInSceneCaptureWorld::ActorClass' has a wrong offset!");
static_assert(offsetof(TslHUD_SpawnActorInSceneCaptureWorld, SpawnTransform) == 0x000010, "Member 'TslHUD_SpawnActorInSceneCaptureWorld::SpawnTransform' has a wrong offset!");
static_assert(offsetof(TslHUD_SpawnActorInSceneCaptureWorld, DelegateToCall) == 0x000040, "Member 'TslHUD_SpawnActorInSceneCaptureWorld::DelegateToCall' has a wrong offset!");

// Function TslGame.TslHUD.TestGameEvent_Die
// 0x0001 (0x0001 - 0x0000)
struct TslHUD_TestGameEvent_Die final
{
public:
	bool                                          bGroggy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_TestGameEvent_Die) == 0x000001, "Wrong alignment on TslHUD_TestGameEvent_Die");
static_assert(sizeof(TslHUD_TestGameEvent_Die) == 0x000001, "Wrong size on TslHUD_TestGameEvent_Die");
static_assert(offsetof(TslHUD_TestGameEvent_Die, bGroggy) == 0x000000, "Member 'TslHUD_TestGameEvent_Die::bGroggy' has a wrong offset!");

// Function TslGame.TslHUD.TestGameEvent_KillOtherPlayer
// 0x0001 (0x0001 - 0x0000)
struct TslHUD_TestGameEvent_KillOtherPlayer final
{
public:
	bool                                          bGroggy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_TestGameEvent_KillOtherPlayer) == 0x000001, "Wrong alignment on TslHUD_TestGameEvent_KillOtherPlayer");
static_assert(sizeof(TslHUD_TestGameEvent_KillOtherPlayer) == 0x000001, "Wrong size on TslHUD_TestGameEvent_KillOtherPlayer");
static_assert(offsetof(TslHUD_TestGameEvent_KillOtherPlayer, bGroggy) == 0x000000, "Member 'TslHUD_TestGameEvent_KillOtherPlayer::bGroggy' has a wrong offset!");

// Function TslGame.TslHUD.TestKillMessage
// 0x0028 (0x0028 - 0x0000)
struct TslHUD_TestKillMessage final
{
public:
	class FString                                 KillerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VictimName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillerIsOwner;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVictimIsOwner;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslHUD_TestKillMessage) == 0x000008, "Wrong alignment on TslHUD_TestKillMessage");
static_assert(sizeof(TslHUD_TestKillMessage) == 0x000028, "Wrong size on TslHUD_TestKillMessage");
static_assert(offsetof(TslHUD_TestKillMessage, KillerName) == 0x000000, "Member 'TslHUD_TestKillMessage::KillerName' has a wrong offset!");
static_assert(offsetof(TslHUD_TestKillMessage, VictimName) == 0x000010, "Member 'TslHUD_TestKillMessage::VictimName' has a wrong offset!");
static_assert(offsetof(TslHUD_TestKillMessage, bKillerIsOwner) == 0x000020, "Member 'TslHUD_TestKillMessage::bKillerIsOwner' has a wrong offset!");
static_assert(offsetof(TslHUD_TestKillMessage, bVictimIsOwner) == 0x000021, "Member 'TslHUD_TestKillMessage::bVictimIsOwner' has a wrong offset!");

// Function TslGame.TslHUD.TestSendImportantMessage
// 0x0020 (0x0020 - 0x0000)
struct TslHUD_TestSendImportantMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslHUD_TestSendImportantMessage) == 0x000008, "Wrong alignment on TslHUD_TestSendImportantMessage");
static_assert(sizeof(TslHUD_TestSendImportantMessage) == 0x000020, "Wrong size on TslHUD_TestSendImportantMessage");
static_assert(offsetof(TslHUD_TestSendImportantMessage, Message) == 0x000000, "Member 'TslHUD_TestSendImportantMessage::Message' has a wrong offset!");
static_assert(offsetof(TslHUD_TestSendImportantMessage, Duration) == 0x000018, "Member 'TslHUD_TestSendImportantMessage::Duration' has a wrong offset!");

// Function TslGame.TslHUD.TestSendSystemMessage
// 0x0020 (0x0020 - 0x0000)
struct TslHUD_TestSendSystemMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslHUD_TestSendSystemMessage) == 0x000008, "Wrong alignment on TslHUD_TestSendSystemMessage");
static_assert(sizeof(TslHUD_TestSendSystemMessage) == 0x000020, "Wrong size on TslHUD_TestSendSystemMessage");
static_assert(offsetof(TslHUD_TestSendSystemMessage, Message) == 0x000000, "Member 'TslHUD_TestSendSystemMessage::Message' has a wrong offset!");
static_assert(offsetof(TslHUD_TestSendSystemMessage, Duration) == 0x000018, "Member 'TslHUD_TestSendSystemMessage::Duration' has a wrong offset!");

// Function TslGame.TslHUD.GetPossessCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslHUD_GetPossessCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_GetPossessCharacter) == 0x000008, "Wrong alignment on TslHUD_GetPossessCharacter");
static_assert(sizeof(TslHUD_GetPossessCharacter) == 0x000008, "Wrong size on TslHUD_GetPossessCharacter");
static_assert(offsetof(TslHUD_GetPossessCharacter, ReturnValue) == 0x000000, "Member 'TslHUD_GetPossessCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslHUD.GetPossessPawn
// 0x0008 (0x0008 - 0x0000)
struct TslHUD_GetPossessPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_GetPossessPawn) == 0x000008, "Wrong alignment on TslHUD_GetPossessPawn");
static_assert(sizeof(TslHUD_GetPossessPawn) == 0x000008, "Wrong size on TslHUD_GetPossessPawn");
static_assert(offsetof(TslHUD_GetPossessPawn, ReturnValue) == 0x000000, "Member 'TslHUD_GetPossessPawn::ReturnValue' has a wrong offset!");

// Function TslGame.TslHUD.IsGameEnded
// 0x0001 (0x0001 - 0x0000)
struct TslHUD_IsGameEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHUD_IsGameEnded) == 0x000001, "Wrong alignment on TslHUD_IsGameEnded");
static_assert(sizeof(TslHUD_IsGameEnded) == 0x000001, "Wrong size on TslHUD_IsGameEnded");
static_assert(offsetof(TslHUD_IsGameEnded, ReturnValue) == 0x000000, "Member 'TslHUD_IsGameEnded::ReturnValue' has a wrong offset!");

// Function TslGame.LobbyHUD.SetWidgetForBinding
// 0x0010 (0x0010 - 0x0000)
struct LobbyHUD_SetWidgetForBinding final
{
public:
	int32                                         ViewIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoherentUIGTWidget*                    Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHUD_SetWidgetForBinding) == 0x000008, "Wrong alignment on LobbyHUD_SetWidgetForBinding");
static_assert(sizeof(LobbyHUD_SetWidgetForBinding) == 0x000010, "Wrong size on LobbyHUD_SetWidgetForBinding");
static_assert(offsetof(LobbyHUD_SetWidgetForBinding, ViewIndex) == 0x000000, "Member 'LobbyHUD_SetWidgetForBinding::ViewIndex' has a wrong offset!");
static_assert(offsetof(LobbyHUD_SetWidgetForBinding, Widget) == 0x000008, "Member 'LobbyHUD_SetWidgetForBinding::Widget' has a wrong offset!");

// Function TslGame.LobbyHUD.GetLobbyCharacter
// 0x0010 (0x0010 - 0x0000)
struct LobbyHUD_GetLobbyCharacter final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALobbyCharacter*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHUD_GetLobbyCharacter) == 0x000008, "Wrong alignment on LobbyHUD_GetLobbyCharacter");
static_assert(sizeof(LobbyHUD_GetLobbyCharacter) == 0x000010, "Wrong size on LobbyHUD_GetLobbyCharacter");
static_assert(offsetof(LobbyHUD_GetLobbyCharacter, SlotIndex) == 0x000000, "Member 'LobbyHUD_GetLobbyCharacter::SlotIndex' has a wrong offset!");
static_assert(offsetof(LobbyHUD_GetLobbyCharacter, ReturnValue) == 0x000008, "Member 'LobbyHUD_GetLobbyCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.LobbyHUD.GetLobbyCharacterNum
// 0x0004 (0x0004 - 0x0000)
struct LobbyHUD_GetLobbyCharacterNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHUD_GetLobbyCharacterNum) == 0x000004, "Wrong alignment on LobbyHUD_GetLobbyCharacterNum");
static_assert(sizeof(LobbyHUD_GetLobbyCharacterNum) == 0x000004, "Wrong size on LobbyHUD_GetLobbyCharacterNum");
static_assert(offsetof(LobbyHUD_GetLobbyCharacterNum, ReturnValue) == 0x000000, "Member 'LobbyHUD_GetLobbyCharacterNum::ReturnValue' has a wrong offset!");

// Function TslGame.LobbyHUD.GetStartUrl
// 0x0010 (0x0010 - 0x0000)
struct LobbyHUD_GetStartUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHUD_GetStartUrl) == 0x000008, "Wrong alignment on LobbyHUD_GetStartUrl");
static_assert(sizeof(LobbyHUD_GetStartUrl) == 0x000010, "Wrong size on LobbyHUD_GetStartUrl");
static_assert(offsetof(LobbyHUD_GetStartUrl, ReturnValue) == 0x000000, "Member 'LobbyHUD_GetStartUrl::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlB
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlB final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlB) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlB");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlB) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlB");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlB, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlB::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlE
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlE final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlE) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlE");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlE) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlE");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlE, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlE::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlF
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlF final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlF) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlF");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlF) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlF");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlF, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlF::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlL
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlL final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlL) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlL");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlL) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlL");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlL, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlL::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlQ
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlQ final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlQ) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlQ");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlQ) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlQ");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlQ, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlQ::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.SetAirControlR
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_SetAirControlR final
{
public:
	float                                         inFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_SetAirControlR) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_SetAirControlR");
static_assert(sizeof(TslMotorbikeVehicle_SetAirControlR) == 0x000004, "Wrong size on TslMotorbikeVehicle_SetAirControlR");
static_assert(offsetof(TslMotorbikeVehicle_SetAirControlR, inFloat) == 0x000000, "Member 'TslMotorbikeVehicle_SetAirControlR::inFloat' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.GetCOMSteerOffset
// 0x0004 (0x0004 - 0x0000)
struct TslMotorbikeVehicle_GetCOMSteerOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_GetCOMSteerOffset) == 0x000004, "Wrong alignment on TslMotorbikeVehicle_GetCOMSteerOffset");
static_assert(sizeof(TslMotorbikeVehicle_GetCOMSteerOffset) == 0x000004, "Wrong size on TslMotorbikeVehicle_GetCOMSteerOffset");
static_assert(offsetof(TslMotorbikeVehicle_GetCOMSteerOffset, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_GetCOMSteerOffset::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.HasContact
// 0x0001 (0x0001 - 0x0000)
struct TslMotorbikeVehicle_HasContact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_HasContact) == 0x000001, "Wrong alignment on TslMotorbikeVehicle_HasContact");
static_assert(sizeof(TslMotorbikeVehicle_HasContact) == 0x000001, "Wrong size on TslMotorbikeVehicle_HasContact");
static_assert(offsetof(TslMotorbikeVehicle_HasContact, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_HasContact::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.IsFlippingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TslMotorbikeVehicle_IsFlippingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_IsFlippingEnabled) == 0x000001, "Wrong alignment on TslMotorbikeVehicle_IsFlippingEnabled");
static_assert(sizeof(TslMotorbikeVehicle_IsFlippingEnabled) == 0x000001, "Wrong size on TslMotorbikeVehicle_IsFlippingEnabled");
static_assert(offsetof(TslMotorbikeVehicle_IsFlippingEnabled, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_IsFlippingEnabled::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.IsKickstandActive
// 0x0001 (0x0001 - 0x0000)
struct TslMotorbikeVehicle_IsKickstandActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_IsKickstandActive) == 0x000001, "Wrong alignment on TslMotorbikeVehicle_IsKickstandActive");
static_assert(sizeof(TslMotorbikeVehicle_IsKickstandActive) == 0x000001, "Wrong size on TslMotorbikeVehicle_IsKickstandActive");
static_assert(offsetof(TslMotorbikeVehicle_IsKickstandActive, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_IsKickstandActive::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.IsUsingActiveStabilize
// 0x0001 (0x0001 - 0x0000)
struct TslMotorbikeVehicle_IsUsingActiveStabilize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_IsUsingActiveStabilize) == 0x000001, "Wrong alignment on TslMotorbikeVehicle_IsUsingActiveStabilize");
static_assert(sizeof(TslMotorbikeVehicle_IsUsingActiveStabilize) == 0x000001, "Wrong size on TslMotorbikeVehicle_IsUsingActiveStabilize");
static_assert(offsetof(TslMotorbikeVehicle_IsUsingActiveStabilize, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_IsUsingActiveStabilize::ReturnValue' has a wrong offset!");

// Function TslGame.TslMotorbikeVehicle.VehicleHasDriver
// 0x0001 (0x0001 - 0x0000)
struct TslMotorbikeVehicle_VehicleHasDriver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslMotorbikeVehicle_VehicleHasDriver) == 0x000001, "Wrong alignment on TslMotorbikeVehicle_VehicleHasDriver");
static_assert(sizeof(TslMotorbikeVehicle_VehicleHasDriver) == 0x000001, "Wrong size on TslMotorbikeVehicle_VehicleHasDriver");
static_assert(offsetof(TslMotorbikeVehicle_VehicleHasDriver, ReturnValue) == 0x000000, "Member 'TslMotorbikeVehicle_VehicleHasDriver::ReturnValue' has a wrong offset!");

// Function TslGame.PerfBotPlayerController.ServerMoveToLocation
// 0x000C (0x000C - 0x0000)
struct PerfBotPlayerController_ServerMoveToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerfBotPlayerController_ServerMoveToLocation) == 0x000004, "Wrong alignment on PerfBotPlayerController_ServerMoveToLocation");
static_assert(sizeof(PerfBotPlayerController_ServerMoveToLocation) == 0x00000C, "Wrong size on PerfBotPlayerController_ServerMoveToLocation");
static_assert(offsetof(PerfBotPlayerController_ServerMoveToLocation, Location) == 0x000000, "Member 'PerfBotPlayerController_ServerMoveToLocation::Location' has a wrong offset!");

// Function TslGame.TslViewTargetTempComponent.AddTempComponent
// 0x0008 (0x0008 - 0x0000)
struct TslViewTargetTempComponent_AddTempComponent final
{
public:
	class USceneComponent*                        TempComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslViewTargetTempComponent_AddTempComponent) == 0x000008, "Wrong alignment on TslViewTargetTempComponent_AddTempComponent");
static_assert(sizeof(TslViewTargetTempComponent_AddTempComponent) == 0x000008, "Wrong size on TslViewTargetTempComponent_AddTempComponent");
static_assert(offsetof(TslViewTargetTempComponent_AddTempComponent, TempComponent) == 0x000000, "Member 'TslViewTargetTempComponent_AddTempComponent::TempComponent' has a wrong offset!");

// Function TslGame.TslViewTargetTempComponent.AddTempComponentWithDelegate
// 0x0018 (0x0018 - 0x0000)
struct TslViewTargetTempComponent_AddTempComponentWithDelegate final
{
public:
	class USceneComponent*                        TempComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USceneComponent* NewComponent)> DelegateToCall;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslViewTargetTempComponent_AddTempComponentWithDelegate) == 0x000008, "Wrong alignment on TslViewTargetTempComponent_AddTempComponentWithDelegate");
static_assert(sizeof(TslViewTargetTempComponent_AddTempComponentWithDelegate) == 0x000018, "Wrong size on TslViewTargetTempComponent_AddTempComponentWithDelegate");
static_assert(offsetof(TslViewTargetTempComponent_AddTempComponentWithDelegate, TempComponent) == 0x000000, "Member 'TslViewTargetTempComponent_AddTempComponentWithDelegate::TempComponent' has a wrong offset!");
static_assert(offsetof(TslViewTargetTempComponent_AddTempComponentWithDelegate, DelegateToCall) == 0x000008, "Member 'TslViewTargetTempComponent_AddTempComponentWithDelegate::DelegateToCall' has a wrong offset!");

// Function TslGame.TslStreamer.OnOriginShiftedInternal
// 0x0020 (0x0020 - 0x0000)
struct TslStreamer_OnOriginShiftedInternal final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             From;                                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntVector                             To;                                                // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStreamer_OnOriginShiftedInternal) == 0x000008, "Wrong alignment on TslStreamer_OnOriginShiftedInternal");
static_assert(sizeof(TslStreamer_OnOriginShiftedInternal) == 0x000020, "Wrong size on TslStreamer_OnOriginShiftedInternal");
static_assert(offsetof(TslStreamer_OnOriginShiftedInternal, InWorld) == 0x000000, "Member 'TslStreamer_OnOriginShiftedInternal::InWorld' has a wrong offset!");
static_assert(offsetof(TslStreamer_OnOriginShiftedInternal, From) == 0x000008, "Member 'TslStreamer_OnOriginShiftedInternal::From' has a wrong offset!");
static_assert(offsetof(TslStreamer_OnOriginShiftedInternal, To) == 0x000014, "Member 'TslStreamer_OnOriginShiftedInternal::To' has a wrong offset!");

// Function TslGame.CharacterBreathBuff.GetBreathComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBreathBuff_GetBreathComponent final
{
public:
	class UCharacterBreathComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathBuff_GetBreathComponent) == 0x000008, "Wrong alignment on CharacterBreathBuff_GetBreathComponent");
static_assert(sizeof(CharacterBreathBuff_GetBreathComponent) == 0x000008, "Wrong size on CharacterBreathBuff_GetBreathComponent");
static_assert(offsetof(CharacterBreathBuff_GetBreathComponent, ReturnValue) == 0x000000, "Member 'CharacterBreathBuff_GetBreathComponent::ReturnValue' has a wrong offset!");

// Function TslGame.CharacterBreathBuff.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterBreathBuff_GetCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBreathBuff_GetCharacter) == 0x000008, "Wrong alignment on CharacterBreathBuff_GetCharacter");
static_assert(sizeof(CharacterBreathBuff_GetCharacter) == 0x000008, "Wrong size on CharacterBreathBuff_GetCharacter");
static_assert(offsetof(CharacterBreathBuff_GetCharacter, ReturnValue) == 0x000000, "Member 'CharacterBreathBuff_GetCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslThrowableTrajectoryViewComponent.AttachToThrowable
// 0x0008 (0x0008 - 0x0000)
struct TslThrowableTrajectoryViewComponent_AttachToThrowable final
{
public:
	const class ATslWeapon_Throwable*             ThrowableIn;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslThrowableTrajectoryViewComponent_AttachToThrowable) == 0x000008, "Wrong alignment on TslThrowableTrajectoryViewComponent_AttachToThrowable");
static_assert(sizeof(TslThrowableTrajectoryViewComponent_AttachToThrowable) == 0x000008, "Wrong size on TslThrowableTrajectoryViewComponent_AttachToThrowable");
static_assert(offsetof(TslThrowableTrajectoryViewComponent_AttachToThrowable, ThrowableIn) == 0x000000, "Member 'TslThrowableTrajectoryViewComponent_AttachToThrowable::ThrowableIn' has a wrong offset!");

// Function TslGame.TslCharacterProxy.SetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct TslCharacterProxy_SetAccessorySlot final
{
public:
	class UTslAccessoryComponent*                 AccessoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccessorySlot                                Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslCharacterProxy_SetAccessorySlot) == 0x000008, "Wrong alignment on TslCharacterProxy_SetAccessorySlot");
static_assert(sizeof(TslCharacterProxy_SetAccessorySlot) == 0x000010, "Wrong size on TslCharacterProxy_SetAccessorySlot");
static_assert(offsetof(TslCharacterProxy_SetAccessorySlot, AccessoryComponent) == 0x000000, "Member 'TslCharacterProxy_SetAccessorySlot::AccessoryComponent' has a wrong offset!");
static_assert(offsetof(TslCharacterProxy_SetAccessorySlot, Slot) == 0x000008, "Member 'TslCharacterProxy_SetAccessorySlot::Slot' has a wrong offset!");

// Function TslGame.TslCharacterProxy.GetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct TslCharacterProxy_GetAccessorySlot final
{
public:
	EAccessorySlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslAccessoryComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCharacterProxy_GetAccessorySlot) == 0x000008, "Wrong alignment on TslCharacterProxy_GetAccessorySlot");
static_assert(sizeof(TslCharacterProxy_GetAccessorySlot) == 0x000010, "Wrong size on TslCharacterProxy_GetAccessorySlot");
static_assert(offsetof(TslCharacterProxy_GetAccessorySlot, Slot) == 0x000000, "Member 'TslCharacterProxy_GetAccessorySlot::Slot' has a wrong offset!");
static_assert(offsetof(TslCharacterProxy_GetAccessorySlot, ReturnValue) == 0x000008, "Member 'TslCharacterProxy_GetAccessorySlot::ReturnValue' has a wrong offset!");

// Function TslGame.TslUserWidget.ListenForInputAxis
// 0x0020 (0x0020 - 0x0000)
struct TslUserWidget_ListenForInputAxis final
{
public:
	struct FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsume;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Scale)>                  Callback;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslUserWidget_ListenForInputAxis) == 0x000004, "Wrong alignment on TslUserWidget_ListenForInputAxis");
static_assert(sizeof(TslUserWidget_ListenForInputAxis) == 0x000020, "Wrong size on TslUserWidget_ListenForInputAxis");
static_assert(offsetof(TslUserWidget_ListenForInputAxis, AxisName) == 0x000000, "Member 'TslUserWidget_ListenForInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(TslUserWidget_ListenForInputAxis, Scale) == 0x000008, "Member 'TslUserWidget_ListenForInputAxis::Scale' has a wrong offset!");
static_assert(offsetof(TslUserWidget_ListenForInputAxis, bConsume) == 0x00000C, "Member 'TslUserWidget_ListenForInputAxis::bConsume' has a wrong offset!");
static_assert(offsetof(TslUserWidget_ListenForInputAxis, Callback) == 0x000010, "Member 'TslUserWidget_ListenForInputAxis::Callback' has a wrong offset!");

// Function TslGame.TslUserWidget.GetCachedCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslUserWidget_GetCachedCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslUserWidget_GetCachedCharacter) == 0x000008, "Wrong alignment on TslUserWidget_GetCachedCharacter");
static_assert(sizeof(TslUserWidget_GetCachedCharacter) == 0x000008, "Wrong size on TslUserWidget_GetCachedCharacter");
static_assert(offsetof(TslUserWidget_GetCachedCharacter, ReturnValue) == 0x000000, "Member 'TslUserWidget_GetCachedCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslUserWidget.GetCachedGameState
// 0x0008 (0x0008 - 0x0000)
struct TslUserWidget_GetCachedGameState final
{
public:
	class ATslGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslUserWidget_GetCachedGameState) == 0x000008, "Wrong alignment on TslUserWidget_GetCachedGameState");
static_assert(sizeof(TslUserWidget_GetCachedGameState) == 0x000008, "Wrong size on TslUserWidget_GetCachedGameState");
static_assert(offsetof(TslUserWidget_GetCachedGameState, ReturnValue) == 0x000000, "Member 'TslUserWidget_GetCachedGameState::ReturnValue' has a wrong offset!");

// Function TslGame.TslUserWidget.GetCachedViewTargetTslCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslUserWidget_GetCachedViewTargetTslCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslUserWidget_GetCachedViewTargetTslCharacter) == 0x000008, "Wrong alignment on TslUserWidget_GetCachedViewTargetTslCharacter");
static_assert(sizeof(TslUserWidget_GetCachedViewTargetTslCharacter) == 0x000008, "Wrong size on TslUserWidget_GetCachedViewTargetTslCharacter");
static_assert(offsetof(TslUserWidget_GetCachedViewTargetTslCharacter, ReturnValue) == 0x000000, "Member 'TslUserWidget_GetCachedViewTargetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.UmgBaseWidget.HandleMainPrepass
// 0x0008 (0x0008 - 0x0000)
struct UmgBaseWidget_HandleMainPrepass final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgBaseWidget_HandleMainPrepass) == 0x000008, "Wrong alignment on UmgBaseWidget_HandleMainPrepass");
static_assert(sizeof(UmgBaseWidget_HandleMainPrepass) == 0x000008, "Wrong size on UmgBaseWidget_HandleMainPrepass");
static_assert(offsetof(UmgBaseWidget_HandleMainPrepass, Widget) == 0x000000, "Member 'UmgBaseWidget_HandleMainPrepass::Widget' has a wrong offset!");

// Function TslGame.UmgBaseWidget.IsMouseOn
// 0x0001 (0x0001 - 0x0000)
struct UmgBaseWidget_IsMouseOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgBaseWidget_IsMouseOn) == 0x000001, "Wrong alignment on UmgBaseWidget_IsMouseOn");
static_assert(sizeof(UmgBaseWidget_IsMouseOn) == 0x000001, "Wrong size on UmgBaseWidget_IsMouseOn");
static_assert(offsetof(UmgBaseWidget_IsMouseOn, ReturnValue) == 0x000000, "Member 'UmgBaseWidget_IsMouseOn::ReturnValue' has a wrong offset!");

// Function TslGame.BluezoneGpsBaseWidget.OnNotifyNextGasIn
// 0x0010 (0x0010 - 0x0000)
struct BluezoneGpsBaseWidget_OnNotifyNextGasIn final
{
public:
	struct FVector                                PoisonGasWarningPosition;                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PoisonGasWarningRadius;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BluezoneGpsBaseWidget_OnNotifyNextGasIn) == 0x000004, "Wrong alignment on BluezoneGpsBaseWidget_OnNotifyNextGasIn");
static_assert(sizeof(BluezoneGpsBaseWidget_OnNotifyNextGasIn) == 0x000010, "Wrong size on BluezoneGpsBaseWidget_OnNotifyNextGasIn");
static_assert(offsetof(BluezoneGpsBaseWidget_OnNotifyNextGasIn, PoisonGasWarningPosition) == 0x000000, "Member 'BluezoneGpsBaseWidget_OnNotifyNextGasIn::PoisonGasWarningPosition' has a wrong offset!");
static_assert(offsetof(BluezoneGpsBaseWidget_OnNotifyNextGasIn, PoisonGasWarningRadius) == 0x00000C, "Member 'BluezoneGpsBaseWidget_OnNotifyNextGasIn::PoisonGasWarningRadius' has a wrong offset!");

// Function TslGame.TslCheatManager.ChangeTeam
// 0x0004 (0x0004 - 0x0000)
struct TslCheatManager_ChangeTeam final
{
public:
	int32                                         NewTeamNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_ChangeTeam) == 0x000004, "Wrong alignment on TslCheatManager_ChangeTeam");
static_assert(sizeof(TslCheatManager_ChangeTeam) == 0x000004, "Wrong size on TslCheatManager_ChangeTeam");
static_assert(offsetof(TslCheatManager_ChangeTeam, NewTeamNumber) == 0x000000, "Member 'TslCheatManager_ChangeTeam::NewTeamNumber' has a wrong offset!");

// Function TslGame.TslCheatManager.Cheat
// 0x0010 (0x0010 - 0x0000)
struct TslCheatManager_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_Cheat) == 0x000008, "Wrong alignment on TslCheatManager_Cheat");
static_assert(sizeof(TslCheatManager_Cheat) == 0x000010, "Wrong size on TslCheatManager_Cheat");
static_assert(offsetof(TslCheatManager_Cheat, Msg) == 0x000000, "Member 'TslCheatManager_Cheat::Msg' has a wrong offset!");

// Function TslGame.TslCheatManager.CtrlShortCutOnOff
// 0x0001 (0x0001 - 0x0000)
struct TslCheatManager_CtrlShortCutOnOff final
{
public:
	bool                                          OnOff;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_CtrlShortCutOnOff) == 0x000001, "Wrong alignment on TslCheatManager_CtrlShortCutOnOff");
static_assert(sizeof(TslCheatManager_CtrlShortCutOnOff) == 0x000001, "Wrong size on TslCheatManager_CtrlShortCutOnOff");
static_assert(offsetof(TslCheatManager_CtrlShortCutOnOff, OnOff) == 0x000000, "Member 'TslCheatManager_CtrlShortCutOnOff::OnOff' has a wrong offset!");

// Function TslGame.TslCheatManager.DelayCrash
// 0x0004 (0x0004 - 0x0000)
struct TslCheatManager_DelayCrash final
{
public:
	float                                         DelaySeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_DelayCrash) == 0x000004, "Wrong alignment on TslCheatManager_DelayCrash");
static_assert(sizeof(TslCheatManager_DelayCrash) == 0x000004, "Wrong size on TslCheatManager_DelayCrash");
static_assert(offsetof(TslCheatManager_DelayCrash, DelaySeconds) == 0x000000, "Member 'TslCheatManager_DelayCrash::DelaySeconds' has a wrong offset!");

// Function TslGame.TslCheatManager.LookAt
// 0x000C (0x000C - 0x0000)
struct TslCheatManager_LookAt final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_LookAt) == 0x000004, "Wrong alignment on TslCheatManager_LookAt");
static_assert(sizeof(TslCheatManager_LookAt) == 0x00000C, "Wrong size on TslCheatManager_LookAt");
static_assert(offsetof(TslCheatManager_LookAt, Pitch) == 0x000000, "Member 'TslCheatManager_LookAt::Pitch' has a wrong offset!");
static_assert(offsetof(TslCheatManager_LookAt, Yaw) == 0x000004, "Member 'TslCheatManager_LookAt::Yaw' has a wrong offset!");
static_assert(offsetof(TslCheatManager_LookAt, Roll) == 0x000008, "Member 'TslCheatManager_LookAt::Roll' has a wrong offset!");

// Function TslGame.TslCheatManager.MoveVehicleOnClient
// 0x000C (0x000C - 0x0000)
struct TslCheatManager_MoveVehicleOnClient final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_MoveVehicleOnClient) == 0x000004, "Wrong alignment on TslCheatManager_MoveVehicleOnClient");
static_assert(sizeof(TslCheatManager_MoveVehicleOnClient) == 0x00000C, "Wrong size on TslCheatManager_MoveVehicleOnClient");
static_assert(offsetof(TslCheatManager_MoveVehicleOnClient, X) == 0x000000, "Member 'TslCheatManager_MoveVehicleOnClient::X' has a wrong offset!");
static_assert(offsetof(TslCheatManager_MoveVehicleOnClient, Y) == 0x000004, "Member 'TslCheatManager_MoveVehicleOnClient::Y' has a wrong offset!");
static_assert(offsetof(TslCheatManager_MoveVehicleOnClient, Z) == 0x000008, "Member 'TslCheatManager_MoveVehicleOnClient::Z' has a wrong offset!");

// Function TslGame.TslCheatManager.SetClientConnectionTimeout
// 0x0004 (0x0004 - 0x0000)
struct TslCheatManager_SetClientConnectionTimeout final
{
public:
	float                                         TimeoutSeconds;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_SetClientConnectionTimeout) == 0x000004, "Wrong alignment on TslCheatManager_SetClientConnectionTimeout");
static_assert(sizeof(TslCheatManager_SetClientConnectionTimeout) == 0x000004, "Wrong size on TslCheatManager_SetClientConnectionTimeout");
static_assert(offsetof(TslCheatManager_SetClientConnectionTimeout, TimeoutSeconds) == 0x000000, "Member 'TslCheatManager_SetClientConnectionTimeout::TimeoutSeconds' has a wrong offset!");

// Function TslGame.TslCheatManager.SetSpectatorYawAndPitch
// 0x000C (0x000C - 0x0000)
struct TslCheatManager_SetSpectatorYawAndPitch final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevertSmoothSpeed;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_SetSpectatorYawAndPitch) == 0x000004, "Wrong alignment on TslCheatManager_SetSpectatorYawAndPitch");
static_assert(sizeof(TslCheatManager_SetSpectatorYawAndPitch) == 0x00000C, "Wrong size on TslCheatManager_SetSpectatorYawAndPitch");
static_assert(offsetof(TslCheatManager_SetSpectatorYawAndPitch, Yaw) == 0x000000, "Member 'TslCheatManager_SetSpectatorYawAndPitch::Yaw' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetSpectatorYawAndPitch, Pitch) == 0x000004, "Member 'TslCheatManager_SetSpectatorYawAndPitch::Pitch' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetSpectatorYawAndPitch, RevertSmoothSpeed) == 0x000008, "Member 'TslCheatManager_SetSpectatorYawAndPitch::RevertSmoothSpeed' has a wrong offset!");

// Function TslGame.TslCheatManager.SetVehicleRepPosCorrection
// 0x0010 (0x0010 - 0x0000)
struct TslCheatManager_SetVehicleRepPosCorrection final
{
public:
	float                                         LinearDeltaThresholdSq;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearInterpAlpha;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearRecipFixTime;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodySpeedThresholdSq;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_SetVehicleRepPosCorrection) == 0x000004, "Wrong alignment on TslCheatManager_SetVehicleRepPosCorrection");
static_assert(sizeof(TslCheatManager_SetVehicleRepPosCorrection) == 0x000010, "Wrong size on TslCheatManager_SetVehicleRepPosCorrection");
static_assert(offsetof(TslCheatManager_SetVehicleRepPosCorrection, LinearDeltaThresholdSq) == 0x000000, "Member 'TslCheatManager_SetVehicleRepPosCorrection::LinearDeltaThresholdSq' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetVehicleRepPosCorrection, LinearInterpAlpha) == 0x000004, "Member 'TslCheatManager_SetVehicleRepPosCorrection::LinearInterpAlpha' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetVehicleRepPosCorrection, LinearRecipFixTime) == 0x000008, "Member 'TslCheatManager_SetVehicleRepPosCorrection::LinearRecipFixTime' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetVehicleRepPosCorrection, BodySpeedThresholdSq) == 0x00000C, "Member 'TslCheatManager_SetVehicleRepPosCorrection::BodySpeedThresholdSq' has a wrong offset!");

// Function TslGame.TslCheatManager.SetVehicleRepRotCorrection
// 0x000C (0x000C - 0x0000)
struct TslCheatManager_SetVehicleRepRotCorrection final
{
public:
	float                                         AngularDeltaThreshold;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularInterpAlpha;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularRecipFixTime;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslCheatManager_SetVehicleRepRotCorrection) == 0x000004, "Wrong alignment on TslCheatManager_SetVehicleRepRotCorrection");
static_assert(sizeof(TslCheatManager_SetVehicleRepRotCorrection) == 0x00000C, "Wrong size on TslCheatManager_SetVehicleRepRotCorrection");
static_assert(offsetof(TslCheatManager_SetVehicleRepRotCorrection, AngularDeltaThreshold) == 0x000000, "Member 'TslCheatManager_SetVehicleRepRotCorrection::AngularDeltaThreshold' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetVehicleRepRotCorrection, AngularInterpAlpha) == 0x000004, "Member 'TslCheatManager_SetVehicleRepRotCorrection::AngularInterpAlpha' has a wrong offset!");
static_assert(offsetof(TslCheatManager_SetVehicleRepRotCorrection, AngularRecipFixTime) == 0x000008, "Member 'TslCheatManager_SetVehicleRepRotCorrection::AngularRecipFixTime' has a wrong offset!");

// Function TslGame.KillCountBaseWidget.OnUpdateKillCount
// 0x0004 (0x0004 - 0x0000)
struct KillCountBaseWidget_OnUpdateKillCount final
{
public:
	int32                                         NewKillCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillCountBaseWidget_OnUpdateKillCount) == 0x000004, "Wrong alignment on KillCountBaseWidget_OnUpdateKillCount");
static_assert(sizeof(KillCountBaseWidget_OnUpdateKillCount) == 0x000004, "Wrong size on KillCountBaseWidget_OnUpdateKillCount");
static_assert(offsetof(KillCountBaseWidget_OnUpdateKillCount, NewKillCount) == 0x000000, "Member 'KillCountBaseWidget_OnUpdateKillCount::NewKillCount' has a wrong offset!");

// Function TslGame.KillCountBaseWidget.GetLastKillCount
// 0x0004 (0x0004 - 0x0000)
struct KillCountBaseWidget_GetLastKillCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillCountBaseWidget_GetLastKillCount) == 0x000004, "Wrong alignment on KillCountBaseWidget_GetLastKillCount");
static_assert(sizeof(KillCountBaseWidget_GetLastKillCount) == 0x000004, "Wrong size on KillCountBaseWidget_GetLastKillCount");
static_assert(offsetof(KillCountBaseWidget_GetLastKillCount, ReturnValue) == 0x000000, "Member 'KillCountBaseWidget_GetLastKillCount::ReturnValue' has a wrong offset!");

// Function TslGame.TslDestructibleComponent.ClientReceiveComponentDamage
// 0x0030 (0x0030 - 0x0000)
struct TslDestructibleComponent_ClientReceiveComponentDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslDestructibleComponent_ClientReceiveComponentDamage) == 0x000008, "Wrong alignment on TslDestructibleComponent_ClientReceiveComponentDamage");
static_assert(sizeof(TslDestructibleComponent_ClientReceiveComponentDamage) == 0x000030, "Wrong size on TslDestructibleComponent_ClientReceiveComponentDamage");
static_assert(offsetof(TslDestructibleComponent_ClientReceiveComponentDamage, DamageAmount) == 0x000000, "Member 'TslDestructibleComponent_ClientReceiveComponentDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TslDestructibleComponent_ClientReceiveComponentDamage, DamageEvent) == 0x000008, "Member 'TslDestructibleComponent_ClientReceiveComponentDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(TslDestructibleComponent_ClientReceiveComponentDamage, EventInstigator) == 0x000020, "Member 'TslDestructibleComponent_ClientReceiveComponentDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TslDestructibleComponent_ClientReceiveComponentDamage, DamageCauser) == 0x000028, "Member 'TslDestructibleComponent_ClientReceiveComponentDamage::DamageCauser' has a wrong offset!");

// Function TslGame.TslDoor.ClientTakeDamage
// 0x0018 (0x0018 - 0x0000)
struct TslDoor_ClientTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    HitLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Impulse;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslDoor_ClientTakeDamage) == 0x000004, "Wrong alignment on TslDoor_ClientTakeDamage");
static_assert(sizeof(TslDoor_ClientTakeDamage) == 0x000018, "Wrong size on TslDoor_ClientTakeDamage");
static_assert(offsetof(TslDoor_ClientTakeDamage, Damage) == 0x000000, "Member 'TslDoor_ClientTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TslDoor_ClientTakeDamage, HitLocation) == 0x000004, "Member 'TslDoor_ClientTakeDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(TslDoor_ClientTakeDamage, DamageRadius) == 0x000010, "Member 'TslDoor_ClientTakeDamage::DamageRadius' has a wrong offset!");
static_assert(offsetof(TslDoor_ClientTakeDamage, Impulse) == 0x000014, "Member 'TslDoor_ClientTakeDamage::Impulse' has a wrong offset!");

// Function TslGame.TslDoor.OnInteractBy
// 0x0008 (0x0008 - 0x0000)
struct TslDoor_OnInteractBy final
{
public:
	class ATslCharacter*                          OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslDoor_OnInteractBy) == 0x000008, "Wrong alignment on TslDoor_OnInteractBy");
static_assert(sizeof(TslDoor_OnInteractBy) == 0x000008, "Wrong size on TslDoor_OnInteractBy");
static_assert(offsetof(TslDoor_OnInteractBy, OtherCharacter) == 0x000000, "Member 'TslDoor_OnInteractBy::OtherCharacter' has a wrong offset!");

// Function TslGame.TslVehicleReactionInterface.OnImpactedByVehicle
// 0x0098 (0x0098 - 0x0000)
struct TslVehicleReactionInterface_OnImpactedByVehicle final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleReactionInterface_OnImpactedByVehicle) == 0x000008, "Wrong alignment on TslVehicleReactionInterface_OnImpactedByVehicle");
static_assert(sizeof(TslVehicleReactionInterface_OnImpactedByVehicle) == 0x000098, "Wrong size on TslVehicleReactionInterface_OnImpactedByVehicle");
static_assert(offsetof(TslVehicleReactionInterface_OnImpactedByVehicle, Hit) == 0x000000, "Member 'TslVehicleReactionInterface_OnImpactedByVehicle::Hit' has a wrong offset!");
static_assert(offsetof(TslVehicleReactionInterface_OnImpactedByVehicle, Velocity) == 0x000088, "Member 'TslVehicleReactionInterface_OnImpactedByVehicle::Velocity' has a wrong offset!");

// Function TslGame.TslExplosionEffect.OnParticleCollide
// 0x0048 (0x0048 - 0x0000)
struct TslExplosionEffect_OnParticleCollide final
{
public:
	struct FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FName                                   BoneName;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslExplosionEffect_OnParticleCollide) == 0x000004, "Wrong alignment on TslExplosionEffect_OnParticleCollide");
static_assert(sizeof(TslExplosionEffect_OnParticleCollide) == 0x000048, "Wrong size on TslExplosionEffect_OnParticleCollide");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, EventName) == 0x000000, "Member 'TslExplosionEffect_OnParticleCollide::EventName' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, EmitterTime) == 0x000008, "Member 'TslExplosionEffect_OnParticleCollide::EmitterTime' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, ParticleTime) == 0x00000C, "Member 'TslExplosionEffect_OnParticleCollide::ParticleTime' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, Location) == 0x000010, "Member 'TslExplosionEffect_OnParticleCollide::Location' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, Velocity) == 0x00001C, "Member 'TslExplosionEffect_OnParticleCollide::Velocity' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, Direction) == 0x000028, "Member 'TslExplosionEffect_OnParticleCollide::Direction' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, Normal) == 0x000034, "Member 'TslExplosionEffect_OnParticleCollide::Normal' has a wrong offset!");
static_assert(offsetof(TslExplosionEffect_OnParticleCollide, BoneName) == 0x000040, "Member 'TslExplosionEffect_OnParticleCollide::BoneName' has a wrong offset!");

// Function TslGame.TslExplosionReactionInterface.OnExplode
// 0x0030 (0x0030 - 0x0000)
struct TslExplosionReactionInterface_OnExplode final
{
public:
	float                                         DamageAmout;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     ComponentHits;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslExplosionReactionInterface_OnExplode) == 0x000008, "Wrong alignment on TslExplosionReactionInterface_OnExplode");
static_assert(sizeof(TslExplosionReactionInterface_OnExplode) == 0x000030, "Wrong size on TslExplosionReactionInterface_OnExplode");
static_assert(offsetof(TslExplosionReactionInterface_OnExplode, DamageAmout) == 0x000000, "Member 'TslExplosionReactionInterface_OnExplode::DamageAmout' has a wrong offset!");
static_assert(offsetof(TslExplosionReactionInterface_OnExplode, Origin) == 0x000004, "Member 'TslExplosionReactionInterface_OnExplode::Origin' has a wrong offset!");
static_assert(offsetof(TslExplosionReactionInterface_OnExplode, ComponentHits) == 0x000010, "Member 'TslExplosionReactionInterface_OnExplode::ComponentHits' has a wrong offset!");
static_assert(offsetof(TslExplosionReactionInterface_OnExplode, EventInstigator) == 0x000020, "Member 'TslExplosionReactionInterface_OnExplode::EventInstigator' has a wrong offset!");
static_assert(offsetof(TslExplosionReactionInterface_OnExplode, DamageCauser) == 0x000028, "Member 'TslExplosionReactionInterface_OnExplode::DamageCauser' has a wrong offset!");

// Function TslGame.TslFence.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct TslFence_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFence_GetSplineComponent) == 0x000008, "Wrong alignment on TslFence_GetSplineComponent");
static_assert(sizeof(TslFence_GetSplineComponent) == 0x000008, "Wrong size on TslFence_GetSplineComponent");
static_assert(offsetof(TslFence_GetSplineComponent, ReturnValue) == 0x000000, "Member 'TslFence_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslReactionComponent.Client_ReactByPointDamage
// 0x001C (0x001C - 0x0000)
struct TslReactionComponent_Client_ReactByPointDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impact;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslReactionComponent_Client_ReactByPointDamage) == 0x000004, "Wrong alignment on TslReactionComponent_Client_ReactByPointDamage");
static_assert(sizeof(TslReactionComponent_Client_ReactByPointDamage) == 0x00001C, "Wrong size on TslReactionComponent_Client_ReactByPointDamage");
static_assert(offsetof(TslReactionComponent_Client_ReactByPointDamage, DamageAmount) == 0x000000, "Member 'TslReactionComponent_Client_ReactByPointDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByPointDamage, Impact) == 0x000004, "Member 'TslReactionComponent_Client_ReactByPointDamage::Impact' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByPointDamage, ImpulseDir) == 0x000010, "Member 'TslReactionComponent_Client_ReactByPointDamage::ImpulseDir' has a wrong offset!");

// Function TslGame.TslReactionComponent.Client_ReactByRadialDamage
// 0x002C (0x002C - 0x0000)
struct TslReactionComponent_Client_ReactByRadialDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Impact;                                            // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslReactionComponent_Client_ReactByRadialDamage) == 0x000004, "Wrong alignment on TslReactionComponent_Client_ReactByRadialDamage");
static_assert(sizeof(TslReactionComponent_Client_ReactByRadialDamage) == 0x00002C, "Wrong size on TslReactionComponent_Client_ReactByRadialDamage");
static_assert(offsetof(TslReactionComponent_Client_ReactByRadialDamage, DamageAmount) == 0x000000, "Member 'TslReactionComponent_Client_ReactByRadialDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByRadialDamage, Origin) == 0x000004, "Member 'TslReactionComponent_Client_ReactByRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByRadialDamage, Impact) == 0x000010, "Member 'TslReactionComponent_Client_ReactByRadialDamage::Impact' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByRadialDamage, ImpulseDir) == 0x00001C, "Member 'TslReactionComponent_Client_ReactByRadialDamage::ImpulseDir' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByRadialDamage, OuterRadius) == 0x000028, "Member 'TslReactionComponent_Client_ReactByRadialDamage::OuterRadius' has a wrong offset!");

// Function TslGame.TslReactionComponent.Client_ReactByVehicle
// 0x0024 (0x0024 - 0x0000)
struct TslReactionComponent_Client_ReactByVehicle final
{
public:
	struct FVector                                Impact;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslReactionComponent_Client_ReactByVehicle) == 0x000004, "Wrong alignment on TslReactionComponent_Client_ReactByVehicle");
static_assert(sizeof(TslReactionComponent_Client_ReactByVehicle) == 0x000024, "Wrong size on TslReactionComponent_Client_ReactByVehicle");
static_assert(offsetof(TslReactionComponent_Client_ReactByVehicle, Impact) == 0x000000, "Member 'TslReactionComponent_Client_ReactByVehicle::Impact' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByVehicle, ImpulseDir) == 0x00000C, "Member 'TslReactionComponent_Client_ReactByVehicle::ImpulseDir' has a wrong offset!");
static_assert(offsetof(TslReactionComponent_Client_ReactByVehicle, Velocity) == 0x000018, "Member 'TslReactionComponent_Client_ReactByVehicle::Velocity' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.OnDeath
// 0x0030 (0x0030 - 0x0000)
struct TslVehicleEffectComponent_OnDeath final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleEffectComponent_OnDeath) == 0x000008, "Wrong alignment on TslVehicleEffectComponent_OnDeath");
static_assert(sizeof(TslVehicleEffectComponent_OnDeath) == 0x000030, "Wrong size on TslVehicleEffectComponent_OnDeath");
static_assert(offsetof(TslVehicleEffectComponent_OnDeath, KillingDamage) == 0x000000, "Member 'TslVehicleEffectComponent_OnDeath::KillingDamage' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnDeath, DamageEvent) == 0x000008, "Member 'TslVehicleEffectComponent_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnDeath, PlayerInstigator) == 0x000020, "Member 'TslVehicleEffectComponent_OnDeath::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnDeath, DamageCauser) == 0x000028, "Member 'TslVehicleEffectComponent_OnDeath::DamageCauser' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.OnDestroyedImpactEffect
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleEffectComponent_OnDestroyedImpactEffect final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleEffectComponent_OnDestroyedImpactEffect) == 0x000008, "Wrong alignment on TslVehicleEffectComponent_OnDestroyedImpactEffect");
static_assert(sizeof(TslVehicleEffectComponent_OnDestroyedImpactEffect) == 0x000008, "Wrong size on TslVehicleEffectComponent_OnDestroyedImpactEffect");
static_assert(offsetof(TslVehicleEffectComponent_OnDestroyedImpactEffect, DestroyedActor) == 0x000000, "Member 'TslVehicleEffectComponent_OnDestroyedImpactEffect::DestroyedActor' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.OnHealthChange
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleEffectComponent_OnHealthChange final
{
public:
	float                                         CurrentHealth;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastHealth;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthMax;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDying;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleEffectComponent_OnHealthChange) == 0x000004, "Wrong alignment on TslVehicleEffectComponent_OnHealthChange");
static_assert(sizeof(TslVehicleEffectComponent_OnHealthChange) == 0x000010, "Wrong size on TslVehicleEffectComponent_OnHealthChange");
static_assert(offsetof(TslVehicleEffectComponent_OnHealthChange, CurrentHealth) == 0x000000, "Member 'TslVehicleEffectComponent_OnHealthChange::CurrentHealth' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHealthChange, LastHealth) == 0x000004, "Member 'TslVehicleEffectComponent_OnHealthChange::LastHealth' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHealthChange, HealthMax) == 0x000008, "Member 'TslVehicleEffectComponent_OnHealthChange::HealthMax' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHealthChange, bIsDying) == 0x00000C, "Member 'TslVehicleEffectComponent_OnHealthChange::bIsDying' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct TslVehicleEffectComponent_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleEffectComponent_OnHit) == 0x000008, "Wrong alignment on TslVehicleEffectComponent_OnHit");
static_assert(sizeof(TslVehicleEffectComponent_OnHit) == 0x0000A8, "Wrong size on TslVehicleEffectComponent_OnHit");
static_assert(offsetof(TslVehicleEffectComponent_OnHit, SelfActor) == 0x000000, "Member 'TslVehicleEffectComponent_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHit, OtherActor) == 0x000008, "Member 'TslVehicleEffectComponent_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHit, NormalImpulse) == 0x000010, "Member 'TslVehicleEffectComponent_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_OnHit, Hit) == 0x000020, "Member 'TslVehicleEffectComponent_OnHit::Hit' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.SetEngineSoundRTPC
// 0x0018 (0x0018 - 0x0000)
struct TslVehicleEffectComponent_SetEngineSoundRTPC final
{
public:
	class FString                                 RTPC;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleEffectComponent_SetEngineSoundRTPC) == 0x000008, "Wrong alignment on TslVehicleEffectComponent_SetEngineSoundRTPC");
static_assert(sizeof(TslVehicleEffectComponent_SetEngineSoundRTPC) == 0x000018, "Wrong size on TslVehicleEffectComponent_SetEngineSoundRTPC");
static_assert(offsetof(TslVehicleEffectComponent_SetEngineSoundRTPC, RTPC) == 0x000000, "Member 'TslVehicleEffectComponent_SetEngineSoundRTPC::RTPC' has a wrong offset!");
static_assert(offsetof(TslVehicleEffectComponent_SetEngineSoundRTPC, Value) == 0x000010, "Member 'TslVehicleEffectComponent_SetEngineSoundRTPC::Value' has a wrong offset!");

// Function TslGame.TslVehicleEffectComponent.GetEngineSoundComponent
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleEffectComponent_GetEngineSoundComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleEffectComponent_GetEngineSoundComponent) == 0x000008, "Wrong alignment on TslVehicleEffectComponent_GetEngineSoundComponent");
static_assert(sizeof(TslVehicleEffectComponent_GetEngineSoundComponent) == 0x000008, "Wrong size on TslVehicleEffectComponent_GetEngineSoundComponent");
static_assert(offsetof(TslVehicleEffectComponent_GetEngineSoundComponent, ReturnValue) == 0x000000, "Member 'TslVehicleEffectComponent_GetEngineSoundComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslWebPopupInterface.ShowWebPopup
// 0x0038 (0x0038 - 0x0000)
struct TslWebPopupInterface_ShowWebPopup final
{
public:
	struct FWebPopupParam                         Param;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWebPopupInterface_ShowWebPopup) == 0x000008, "Wrong alignment on TslWebPopupInterface_ShowWebPopup");
static_assert(sizeof(TslWebPopupInterface_ShowWebPopup) == 0x000038, "Wrong size on TslWebPopupInterface_ShowWebPopup");
static_assert(offsetof(TslWebPopupInterface_ShowWebPopup, Param) == 0x000000, "Member 'TslWebPopupInterface_ShowWebPopup::Param' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.Down
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_Down) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_Down");
static_assert(sizeof(TslFocusableWidgetInterface_Down) == 0x000001, "Wrong size on TslFocusableWidgetInterface_Down");
static_assert(offsetof(TslFocusableWidgetInterface_Down, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_Down::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputA
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputA) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputA");
static_assert(sizeof(TslFocusableWidgetInterface_InputA) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputA");
static_assert(offsetof(TslFocusableWidgetInterface_InputA, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputA::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputB
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputB) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputB");
static_assert(sizeof(TslFocusableWidgetInterface_InputB) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputB");
static_assert(offsetof(TslFocusableWidgetInterface_InputB, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputB::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputLB
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputLB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputLB) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputLB");
static_assert(sizeof(TslFocusableWidgetInterface_InputLB) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputLB");
static_assert(offsetof(TslFocusableWidgetInterface_InputLB, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputLB::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputLT
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputLT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputLT) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputLT");
static_assert(sizeof(TslFocusableWidgetInterface_InputLT) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputLT");
static_assert(offsetof(TslFocusableWidgetInterface_InputLT, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputLT::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputRB
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputRB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputRB) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputRB");
static_assert(sizeof(TslFocusableWidgetInterface_InputRB) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputRB");
static_assert(offsetof(TslFocusableWidgetInterface_InputRB, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputRB::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputRT
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputRT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputRT) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputRT");
static_assert(sizeof(TslFocusableWidgetInterface_InputRT) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputRT");
static_assert(offsetof(TslFocusableWidgetInterface_InputRT, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputRT::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputX
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputX) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputX");
static_assert(sizeof(TslFocusableWidgetInterface_InputX) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputX");
static_assert(offsetof(TslFocusableWidgetInterface_InputX, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputX::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.InputY
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_InputY final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_InputY) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_InputY");
static_assert(sizeof(TslFocusableWidgetInterface_InputY) == 0x000001, "Wrong size on TslFocusableWidgetInterface_InputY");
static_assert(offsetof(TslFocusableWidgetInterface_InputY, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_InputY::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.Left
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_Left final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_Left) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_Left");
static_assert(sizeof(TslFocusableWidgetInterface_Left) == 0x000001, "Wrong size on TslFocusableWidgetInterface_Left");
static_assert(offsetof(TslFocusableWidgetInterface_Left, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_Left::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.Right
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_Right final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_Right) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_Right");
static_assert(sizeof(TslFocusableWidgetInterface_Right) == 0x000001, "Wrong size on TslFocusableWidgetInterface_Right");
static_assert(offsetof(TslFocusableWidgetInterface_Right, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_Right::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.SetFocus
// 0x0002 (0x0002 - 0x0000)
struct TslFocusableWidgetInterface_SetFocus final
{
public:
	bool                                          NewFocus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_SetFocus) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_SetFocus");
static_assert(sizeof(TslFocusableWidgetInterface_SetFocus) == 0x000002, "Wrong size on TslFocusableWidgetInterface_SetFocus");
static_assert(offsetof(TslFocusableWidgetInterface_SetFocus, NewFocus) == 0x000000, "Member 'TslFocusableWidgetInterface_SetFocus::NewFocus' has a wrong offset!");
static_assert(offsetof(TslFocusableWidgetInterface_SetFocus, ReturnValue) == 0x000001, "Member 'TslFocusableWidgetInterface_SetFocus::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.Up
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_Up) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_Up");
static_assert(sizeof(TslFocusableWidgetInterface_Up) == 0x000001, "Wrong size on TslFocusableWidgetInterface_Up");
static_assert(offsetof(TslFocusableWidgetInterface_Up, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_Up::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.GetDownWidget
// 0x0008 (0x0008 - 0x0000)
struct TslFocusableWidgetInterface_GetDownWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_GetDownWidget) == 0x000008, "Wrong alignment on TslFocusableWidgetInterface_GetDownWidget");
static_assert(sizeof(TslFocusableWidgetInterface_GetDownWidget) == 0x000008, "Wrong size on TslFocusableWidgetInterface_GetDownWidget");
static_assert(offsetof(TslFocusableWidgetInterface_GetDownWidget, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_GetDownWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.GetFocusingChildWidget
// 0x0008 (0x0008 - 0x0000)
struct TslFocusableWidgetInterface_GetFocusingChildWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_GetFocusingChildWidget) == 0x000008, "Wrong alignment on TslFocusableWidgetInterface_GetFocusingChildWidget");
static_assert(sizeof(TslFocusableWidgetInterface_GetFocusingChildWidget) == 0x000008, "Wrong size on TslFocusableWidgetInterface_GetFocusingChildWidget");
static_assert(offsetof(TslFocusableWidgetInterface_GetFocusingChildWidget, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_GetFocusingChildWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.GetLeftWidget
// 0x0008 (0x0008 - 0x0000)
struct TslFocusableWidgetInterface_GetLeftWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_GetLeftWidget) == 0x000008, "Wrong alignment on TslFocusableWidgetInterface_GetLeftWidget");
static_assert(sizeof(TslFocusableWidgetInterface_GetLeftWidget) == 0x000008, "Wrong size on TslFocusableWidgetInterface_GetLeftWidget");
static_assert(offsetof(TslFocusableWidgetInterface_GetLeftWidget, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_GetLeftWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.GetRightWidget
// 0x0008 (0x0008 - 0x0000)
struct TslFocusableWidgetInterface_GetRightWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_GetRightWidget) == 0x000008, "Wrong alignment on TslFocusableWidgetInterface_GetRightWidget");
static_assert(sizeof(TslFocusableWidgetInterface_GetRightWidget) == 0x000008, "Wrong size on TslFocusableWidgetInterface_GetRightWidget");
static_assert(offsetof(TslFocusableWidgetInterface_GetRightWidget, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_GetRightWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.GetUpWidget
// 0x0008 (0x0008 - 0x0000)
struct TslFocusableWidgetInterface_GetUpWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_GetUpWidget) == 0x000008, "Wrong alignment on TslFocusableWidgetInterface_GetUpWidget");
static_assert(sizeof(TslFocusableWidgetInterface_GetUpWidget) == 0x000008, "Wrong size on TslFocusableWidgetInterface_GetUpWidget");
static_assert(offsetof(TslFocusableWidgetInterface_GetUpWidget, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_GetUpWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.IsFocus
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_IsFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_IsFocus) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_IsFocus");
static_assert(sizeof(TslFocusableWidgetInterface_IsFocus) == 0x000001, "Wrong size on TslFocusableWidgetInterface_IsFocus");
static_assert(offsetof(TslFocusableWidgetInterface_IsFocus, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_IsFocus::ReturnValue' has a wrong offset!");

// Function TslGame.TslFocusableWidgetInterface.IsFocusable
// 0x0001 (0x0001 - 0x0000)
struct TslFocusableWidgetInterface_IsFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslFocusableWidgetInterface_IsFocusable) == 0x000001, "Wrong alignment on TslFocusableWidgetInterface_IsFocusable");
static_assert(sizeof(TslFocusableWidgetInterface_IsFocusable) == 0x000001, "Wrong size on TslFocusableWidgetInterface_IsFocusable");
static_assert(offsetof(TslFocusableWidgetInterface_IsFocusable, ReturnValue) == 0x000000, "Member 'TslFocusableWidgetInterface_IsFocusable::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.OnHitAtClient
// 0x00A8 (0x00A8 - 0x0000)
struct TslVehicleSyncComponent_OnHitAtClient final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_OnHitAtClient) == 0x000008, "Wrong alignment on TslVehicleSyncComponent_OnHitAtClient");
static_assert(sizeof(TslVehicleSyncComponent_OnHitAtClient) == 0x0000A8, "Wrong size on TslVehicleSyncComponent_OnHitAtClient");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtClient, SelfActor) == 0x000000, "Member 'TslVehicleSyncComponent_OnHitAtClient::SelfActor' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtClient, OtherActor) == 0x000008, "Member 'TslVehicleSyncComponent_OnHitAtClient::OtherActor' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtClient, NormalImpulse) == 0x000010, "Member 'TslVehicleSyncComponent_OnHitAtClient::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtClient, Hit) == 0x000020, "Member 'TslVehicleSyncComponent_OnHitAtClient::Hit' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.OnHitAtServer
// 0x00A8 (0x00A8 - 0x0000)
struct TslVehicleSyncComponent_OnHitAtServer final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_OnHitAtServer) == 0x000008, "Wrong alignment on TslVehicleSyncComponent_OnHitAtServer");
static_assert(sizeof(TslVehicleSyncComponent_OnHitAtServer) == 0x0000A8, "Wrong size on TslVehicleSyncComponent_OnHitAtServer");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtServer, SelfActor) == 0x000000, "Member 'TslVehicleSyncComponent_OnHitAtServer::SelfActor' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtServer, OtherActor) == 0x000008, "Member 'TslVehicleSyncComponent_OnHitAtServer::OtherActor' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtServer, NormalImpulse) == 0x000010, "Member 'TslVehicleSyncComponent_OnHitAtServer::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_OnHitAtServer, Hit) == 0x000020, "Member 'TslVehicleSyncComponent_OnHitAtServer::Hit' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.SendClientHitToServerReliably
// 0x00C8 (0x00C8 - 0x0000)
struct TslVehicleSyncComponent_SendClientHitToServerReliably final
{
public:
	int32                                         InCorrectionId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLocation;                                    // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLinearVelocity;                              // 0x0010(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ClientRotator;                                     // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientAngularVelocity;                             // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 NormalImpulse;                                     // 0x0034(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0040(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_SendClientHitToServerReliably) == 0x000008, "Wrong alignment on TslVehicleSyncComponent_SendClientHitToServerReliably");
static_assert(sizeof(TslVehicleSyncComponent_SendClientHitToServerReliably) == 0x0000C8, "Wrong size on TslVehicleSyncComponent_SendClientHitToServerReliably");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, InCorrectionId) == 0x000000, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::InCorrectionId' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, ClientLocation) == 0x000004, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::ClientLocation' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, ClientLinearVelocity) == 0x000010, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::ClientLinearVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, ClientRotator) == 0x00001C, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::ClientRotator' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, ClientAngularVelocity) == 0x000028, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::ClientAngularVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, NormalImpulse) == 0x000034, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerReliably, Hit) == 0x000040, "Member 'TslVehicleSyncComponent_SendClientHitToServerReliably::Hit' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.SendClientHitToServerUnreliably
// 0x00C8 (0x00C8 - 0x0000)
struct TslVehicleSyncComponent_SendClientHitToServerUnreliably final
{
public:
	int32                                         InCorrectionId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLocation;                                    // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLinearVelocity;                              // 0x0010(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ClientRotator;                                     // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientAngularVelocity;                             // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 NormalImpulse;                                     // 0x0034(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0040(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_SendClientHitToServerUnreliably) == 0x000008, "Wrong alignment on TslVehicleSyncComponent_SendClientHitToServerUnreliably");
static_assert(sizeof(TslVehicleSyncComponent_SendClientHitToServerUnreliably) == 0x0000C8, "Wrong size on TslVehicleSyncComponent_SendClientHitToServerUnreliably");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, InCorrectionId) == 0x000000, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::InCorrectionId' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, ClientLocation) == 0x000004, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::ClientLocation' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, ClientLinearVelocity) == 0x000010, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::ClientLinearVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, ClientRotator) == 0x00001C, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::ClientRotator' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, ClientAngularVelocity) == 0x000028, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::ClientAngularVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, NormalImpulse) == 0x000034, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientHitToServerUnreliably, Hit) == 0x000040, "Member 'TslVehicleSyncComponent_SendClientHitToServerUnreliably::Hit' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.SendClientMoveToServerReliably
// 0x0034 (0x0034 - 0x0000)
struct TslVehicleSyncComponent_SendClientMoveToServerReliably final
{
public:
	int32                                         InCorrectionId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLocation;                                    // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLinearVelocity;                              // 0x0010(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ClientRotator;                                     // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientAngularVelocity;                             // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_SendClientMoveToServerReliably) == 0x000004, "Wrong alignment on TslVehicleSyncComponent_SendClientMoveToServerReliably");
static_assert(sizeof(TslVehicleSyncComponent_SendClientMoveToServerReliably) == 0x000034, "Wrong size on TslVehicleSyncComponent_SendClientMoveToServerReliably");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerReliably, InCorrectionId) == 0x000000, "Member 'TslVehicleSyncComponent_SendClientMoveToServerReliably::InCorrectionId' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerReliably, ClientLocation) == 0x000004, "Member 'TslVehicleSyncComponent_SendClientMoveToServerReliably::ClientLocation' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerReliably, ClientLinearVelocity) == 0x000010, "Member 'TslVehicleSyncComponent_SendClientMoveToServerReliably::ClientLinearVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerReliably, ClientRotator) == 0x00001C, "Member 'TslVehicleSyncComponent_SendClientMoveToServerReliably::ClientRotator' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerReliably, ClientAngularVelocity) == 0x000028, "Member 'TslVehicleSyncComponent_SendClientMoveToServerReliably::ClientAngularVelocity' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.SendClientMoveToServerUnreliably
// 0x0034 (0x0034 - 0x0000)
struct TslVehicleSyncComponent_SendClientMoveToServerUnreliably final
{
public:
	int32                                         InCorrectionId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLocation;                                    // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLinearVelocity;                              // 0x0010(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ClientRotator;                                     // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientAngularVelocity;                             // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably) == 0x000004, "Wrong alignment on TslVehicleSyncComponent_SendClientMoveToServerUnreliably");
static_assert(sizeof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably) == 0x000034, "Wrong size on TslVehicleSyncComponent_SendClientMoveToServerUnreliably");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably, InCorrectionId) == 0x000000, "Member 'TslVehicleSyncComponent_SendClientMoveToServerUnreliably::InCorrectionId' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably, ClientLocation) == 0x000004, "Member 'TslVehicleSyncComponent_SendClientMoveToServerUnreliably::ClientLocation' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably, ClientLinearVelocity) == 0x000010, "Member 'TslVehicleSyncComponent_SendClientMoveToServerUnreliably::ClientLinearVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably, ClientRotator) == 0x00001C, "Member 'TslVehicleSyncComponent_SendClientMoveToServerUnreliably::ClientRotator' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendClientMoveToServerUnreliably, ClientAngularVelocity) == 0x000028, "Member 'TslVehicleSyncComponent_SendClientMoveToServerUnreliably::ClientAngularVelocity' has a wrong offset!");

// Function TslGame.TslVehicleSyncComponent.SendServerMoveToClient
// 0x0038 (0x0038 - 0x0000)
struct TslVehicleSyncComponent_SendServerMoveToClient final
{
public:
	int32                                         InCorrectionId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ServerLocation;                                    // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ServerLinearVelocity;                              // 0x0010(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ServerRotator;                                     // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ServerAngularVelocity;                             // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsSnap;                                           // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleSyncComponent_SendServerMoveToClient) == 0x000004, "Wrong alignment on TslVehicleSyncComponent_SendServerMoveToClient");
static_assert(sizeof(TslVehicleSyncComponent_SendServerMoveToClient) == 0x000038, "Wrong size on TslVehicleSyncComponent_SendServerMoveToClient");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, InCorrectionId) == 0x000000, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::InCorrectionId' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, ServerLocation) == 0x000004, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::ServerLocation' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, ServerLinearVelocity) == 0x000010, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::ServerLinearVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, ServerRotator) == 0x00001C, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::ServerRotator' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, ServerAngularVelocity) == 0x000028, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::ServerAngularVelocity' has a wrong offset!");
static_assert(offsetof(TslVehicleSyncComponent_SendServerMoveToClient, bIsSnap) == 0x000034, "Member 'TslVehicleSyncComponent_SendServerMoveToClient::bIsSnap' has a wrong offset!");

// Function TslGame.TslSettings.GetTslSettings
// 0x0008 (0x0008 - 0x0000)
struct TslSettings_GetTslSettings final
{
public:
	class UTslSettings*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_GetTslSettings) == 0x000008, "Wrong alignment on TslSettings_GetTslSettings");
static_assert(sizeof(TslSettings_GetTslSettings) == 0x000008, "Wrong size on TslSettings_GetTslSettings");
static_assert(offsetof(TslSettings_GetTslSettings, ReturnValue) == 0x000000, "Member 'TslSettings_GetTslSettings::ReturnValue' has a wrong offset!");

// Function TslGame.TslSettings.GetCharacterStudioRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct TslSettings_GetCharacterStudioRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_GetCharacterStudioRenderTarget) == 0x000008, "Wrong alignment on TslSettings_GetCharacterStudioRenderTarget");
static_assert(sizeof(TslSettings_GetCharacterStudioRenderTarget) == 0x000008, "Wrong size on TslSettings_GetCharacterStudioRenderTarget");
static_assert(offsetof(TslSettings_GetCharacterStudioRenderTarget, ReturnValue) == 0x000000, "Member 'TslSettings_GetCharacterStudioRenderTarget::ReturnValue' has a wrong offset!");

// Function TslGame.TslSettings.SetCharacterStudioRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct TslSettings_SetCharacterStudioRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 rt;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_SetCharacterStudioRenderTarget) == 0x000008, "Wrong alignment on TslSettings_SetCharacterStudioRenderTarget");
static_assert(sizeof(TslSettings_SetCharacterStudioRenderTarget) == 0x000008, "Wrong size on TslSettings_SetCharacterStudioRenderTarget");
static_assert(offsetof(TslSettings_SetCharacterStudioRenderTarget, rt) == 0x000000, "Member 'TslSettings_SetCharacterStudioRenderTarget::rt' has a wrong offset!");

// Function TslGame.TslSettings.IsESports
// 0x0001 (0x0001 - 0x0000)
struct TslSettings_IsESports final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_IsESports) == 0x000001, "Wrong alignment on TslSettings_IsESports");
static_assert(sizeof(TslSettings_IsESports) == 0x000001, "Wrong size on TslSettings_IsESports");
static_assert(offsetof(TslSettings_IsESports, ReturnValue) == 0x000000, "Member 'TslSettings_IsESports::ReturnValue' has a wrong offset!");

// Function TslGame.TslSettings.IsForChineseLicensing
// 0x0001 (0x0001 - 0x0000)
struct TslSettings_IsForChineseLicensing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_IsForChineseLicensing) == 0x000001, "Wrong alignment on TslSettings_IsForChineseLicensing");
static_assert(sizeof(TslSettings_IsForChineseLicensing) == 0x000001, "Wrong size on TslSettings_IsForChineseLicensing");
static_assert(offsetof(TslSettings_IsForChineseLicensing, ReturnValue) == 0x000000, "Member 'TslSettings_IsForChineseLicensing::ReturnValue' has a wrong offset!");

// Function TslGame.TslSettings.IsForKoreanRating
// 0x0001 (0x0001 - 0x0000)
struct TslSettings_IsForKoreanRating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSettings_IsForKoreanRating) == 0x000001, "Wrong alignment on TslSettings_IsForKoreanRating");
static_assert(sizeof(TslSettings_IsForKoreanRating) == 0x000001, "Wrong size on TslSettings_IsForKoreanRating");
static_assert(offsetof(TslSettings_IsForKoreanRating, ReturnValue) == 0x000000, "Member 'TslSettings_IsForKoreanRating::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.AddVehicleFuel
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_AddVehicleFuel final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_AddVehicleFuel) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_AddVehicleFuel");
static_assert(sizeof(TslVehicleCommonComponent_AddVehicleFuel) == 0x000004, "Wrong size on TslVehicleCommonComponent_AddVehicleFuel");
static_assert(offsetof(TslVehicleCommonComponent_AddVehicleFuel, Delta) == 0x000000, "Member 'TslVehicleCommonComponent_AddVehicleFuel::Delta' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.OnRep_Fuel
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_OnRep_Fuel final
{
public:
	float                                         LastFuel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_OnRep_Fuel) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_OnRep_Fuel");
static_assert(sizeof(TslVehicleCommonComponent_OnRep_Fuel) == 0x000004, "Wrong size on TslVehicleCommonComponent_OnRep_Fuel");
static_assert(offsetof(TslVehicleCommonComponent_OnRep_Fuel, LastFuel) == 0x000000, "Member 'TslVehicleCommonComponent_OnRep_Fuel::LastFuel' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.OnRep_Health
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_OnRep_Health final
{
public:
	float                                         LastHealth;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_OnRep_Health) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_OnRep_Health");
static_assert(sizeof(TslVehicleCommonComponent_OnRep_Health) == 0x000004, "Wrong size on TslVehicleCommonComponent_OnRep_Health");
static_assert(offsetof(TslVehicleCommonComponent_OnRep_Health, LastHealth) == 0x000000, "Member 'TslVehicleCommonComponent_OnRep_Health::LastHealth' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.SetVehicleFuel
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_SetVehicleFuel final
{
public:
	float                                         NewFuel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_SetVehicleFuel) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_SetVehicleFuel");
static_assert(sizeof(TslVehicleCommonComponent_SetVehicleFuel) == 0x000004, "Wrong size on TslVehicleCommonComponent_SetVehicleFuel");
static_assert(offsetof(TslVehicleCommonComponent_SetVehicleFuel, NewFuel) == 0x000000, "Member 'TslVehicleCommonComponent_SetVehicleFuel::NewFuel' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.SetVehicleFuelPercent
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_SetVehicleFuelPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_SetVehicleFuelPercent) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_SetVehicleFuelPercent");
static_assert(sizeof(TslVehicleCommonComponent_SetVehicleFuelPercent) == 0x000004, "Wrong size on TslVehicleCommonComponent_SetVehicleFuelPercent");
static_assert(offsetof(TslVehicleCommonComponent_SetVehicleFuelPercent, Percent) == 0x000000, "Member 'TslVehicleCommonComponent_SetVehicleFuelPercent::Percent' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.SetVehicleHealth
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_SetVehicleHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_SetVehicleHealth) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_SetVehicleHealth");
static_assert(sizeof(TslVehicleCommonComponent_SetVehicleHealth) == 0x000004, "Wrong size on TslVehicleCommonComponent_SetVehicleHealth");
static_assert(offsetof(TslVehicleCommonComponent_SetVehicleHealth, NewHealth) == 0x000000, "Member 'TslVehicleCommonComponent_SetVehicleHealth::NewHealth' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.CanIgnoreCharacterDamage
// 0x0002 (0x0002 - 0x0000)
struct TslVehicleCommonComponent_CanIgnoreCharacterDamage final
{
public:
	EDamageTypeCategory                           DamageTypeCategory;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_CanIgnoreCharacterDamage) == 0x000001, "Wrong alignment on TslVehicleCommonComponent_CanIgnoreCharacterDamage");
static_assert(sizeof(TslVehicleCommonComponent_CanIgnoreCharacterDamage) == 0x000002, "Wrong size on TslVehicleCommonComponent_CanIgnoreCharacterDamage");
static_assert(offsetof(TslVehicleCommonComponent_CanIgnoreCharacterDamage, DamageTypeCategory) == 0x000000, "Member 'TslVehicleCommonComponent_CanIgnoreCharacterDamage::DamageTypeCategory' has a wrong offset!");
static_assert(offsetof(TslVehicleCommonComponent_CanIgnoreCharacterDamage, ReturnValue) == 0x000001, "Member 'TslVehicleCommonComponent_CanIgnoreCharacterDamage::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleBaseFuel
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleBaseFuel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleBaseFuel) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleBaseFuel");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleBaseFuel) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleBaseFuel");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleBaseFuel, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleBaseFuel::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleBaseHealth
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleBaseHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleBaseHealth) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleBaseHealth");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleBaseHealth) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleBaseHealth");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleBaseHealth, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleBaseHealth::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleFuel
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleFuel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleFuel) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleFuel");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleFuel) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleFuel");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleFuel, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleFuel::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleFuelPercent
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleFuelPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleFuelPercent) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleFuelPercent");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleFuelPercent) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleFuelPercent");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleFuelPercent, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleFuelPercent::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleHealth
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleHealth) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleHealth");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleHealth) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleHealth");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleHealth, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleHealth::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleHealthPercent) == 0x000004, "Wrong alignment on TslVehicleCommonComponent_GetVehicleHealthPercent");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleHealthPercent) == 0x000004, "Wrong size on TslVehicleCommonComponent_GetVehicleHealthPercent");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleHealthPercent, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleHealthPercent::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.GetVehicleUI
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleCommonComponent_GetVehicleUI final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_GetVehicleUI) == 0x000008, "Wrong alignment on TslVehicleCommonComponent_GetVehicleUI");
static_assert(sizeof(TslVehicleCommonComponent_GetVehicleUI) == 0x000008, "Wrong size on TslVehicleCommonComponent_GetVehicleUI");
static_assert(offsetof(TslVehicleCommonComponent_GetVehicleUI, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_GetVehicleUI::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct TslVehicleCommonComponent_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_IsBroken) == 0x000001, "Wrong alignment on TslVehicleCommonComponent_IsBroken");
static_assert(sizeof(TslVehicleCommonComponent_IsBroken) == 0x000001, "Wrong size on TslVehicleCommonComponent_IsBroken");
static_assert(offsetof(TslVehicleCommonComponent_IsBroken, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_IsBroken::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleCommonComponent.IsDying
// 0x0001 (0x0001 - 0x0000)
struct TslVehicleCommonComponent_IsDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleCommonComponent_IsDying) == 0x000001, "Wrong alignment on TslVehicleCommonComponent_IsDying");
static_assert(sizeof(TslVehicleCommonComponent_IsDying) == 0x000001, "Wrong size on TslVehicleCommonComponent_IsDying");
static_assert(offsetof(TslVehicleCommonComponent_IsDying, ReturnValue) == 0x000000, "Member 'TslVehicleCommonComponent_IsDying::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetNumTotalReplays
// 0x0004 (0x0004 - 0x0000)
struct TslGameInstance_GetNumTotalReplays final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetNumTotalReplays) == 0x000004, "Wrong alignment on TslGameInstance_GetNumTotalReplays");
static_assert(sizeof(TslGameInstance_GetNumTotalReplays) == 0x000004, "Wrong size on TslGameInstance_GetNumTotalReplays");
static_assert(offsetof(TslGameInstance_GetNumTotalReplays, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetNumTotalReplays::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetReplayCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct TslGameInstance_GetReplayCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetReplayCurrentTime) == 0x000004, "Wrong alignment on TslGameInstance_GetReplayCurrentTime");
static_assert(sizeof(TslGameInstance_GetReplayCurrentTime) == 0x000004, "Wrong size on TslGameInstance_GetReplayCurrentTime");
static_assert(offsetof(TslGameInstance_GetReplayCurrentTime, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetReplayCurrentTime::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetReplayListByRegionOrLocal
// 0x0018 (0x0018 - 0x0000)
struct TslGameInstance_GetReplayListByRegionOrLocal final
{
public:
	class FString                                 RegionOrLocal;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetReplayListByRegionOrLocal) == 0x000008, "Wrong alignment on TslGameInstance_GetReplayListByRegionOrLocal");
static_assert(sizeof(TslGameInstance_GetReplayListByRegionOrLocal) == 0x000018, "Wrong size on TslGameInstance_GetReplayListByRegionOrLocal");
static_assert(offsetof(TslGameInstance_GetReplayListByRegionOrLocal, RegionOrLocal) == 0x000000, "Member 'TslGameInstance_GetReplayListByRegionOrLocal::RegionOrLocal' has a wrong offset!");
static_assert(offsetof(TslGameInstance_GetReplayListByRegionOrLocal, PageIndex) == 0x000010, "Member 'TslGameInstance_GetReplayListByRegionOrLocal::PageIndex' has a wrong offset!");
static_assert(offsetof(TslGameInstance_GetReplayListByRegionOrLocal, PageSize) == 0x000014, "Member 'TslGameInstance_GetReplayListByRegionOrLocal::PageSize' has a wrong offset!");

// Function TslGame.TslGameInstance.GetReplayListLocal
// 0x0008 (0x0008 - 0x0000)
struct TslGameInstance_GetReplayListLocal final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetReplayListLocal) == 0x000004, "Wrong alignment on TslGameInstance_GetReplayListLocal");
static_assert(sizeof(TslGameInstance_GetReplayListLocal) == 0x000008, "Wrong size on TslGameInstance_GetReplayListLocal");
static_assert(offsetof(TslGameInstance_GetReplayListLocal, PageIndex) == 0x000000, "Member 'TslGameInstance_GetReplayListLocal::PageIndex' has a wrong offset!");
static_assert(offsetof(TslGameInstance_GetReplayListLocal, PageSize) == 0x000004, "Member 'TslGameInstance_GetReplayListLocal::PageSize' has a wrong offset!");

// Function TslGame.TslGameInstance.GetReplayTotalTime
// 0x0004 (0x0004 - 0x0000)
struct TslGameInstance_GetReplayTotalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetReplayTotalTime) == 0x000004, "Wrong alignment on TslGameInstance_GetReplayTotalTime");
static_assert(sizeof(TslGameInstance_GetReplayTotalTime) == 0x000004, "Wrong size on TslGameInstance_GetReplayTotalTime");
static_assert(offsetof(TslGameInstance_GetReplayTotalTime, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetReplayTotalTime::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.IsLive
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_IsLive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_IsLive) == 0x000001, "Wrong alignment on TslGameInstance_IsLive");
static_assert(sizeof(TslGameInstance_IsLive) == 0x000001, "Wrong size on TslGameInstance_IsLive");
static_assert(offsetof(TslGameInstance_IsLive, ReturnValue) == 0x000000, "Member 'TslGameInstance_IsLive::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_IsPaused) == 0x000001, "Wrong alignment on TslGameInstance_IsPaused");
static_assert(sizeof(TslGameInstance_IsPaused) == 0x000001, "Wrong size on TslGameInstance_IsPaused");
static_assert(offsetof(TslGameInstance_IsPaused, ReturnValue) == 0x000000, "Member 'TslGameInstance_IsPaused::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.IsRecording
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_IsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_IsRecording) == 0x000001, "Wrong alignment on TslGameInstance_IsRecording");
static_assert(sizeof(TslGameInstance_IsRecording) == 0x000001, "Wrong size on TslGameInstance_IsRecording");
static_assert(offsetof(TslGameInstance_IsRecording, ReturnValue) == 0x000000, "Member 'TslGameInstance_IsRecording::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.IsReplaying
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_IsReplaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_IsReplaying) == 0x000001, "Wrong alignment on TslGameInstance_IsReplaying");
static_assert(sizeof(TslGameInstance_IsReplaying) == 0x000001, "Wrong size on TslGameInstance_IsReplaying");
static_assert(offsetof(TslGameInstance_IsReplaying, ReturnValue) == 0x000000, "Member 'TslGameInstance_IsReplaying::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.Pause
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_Pause) == 0x000001, "Wrong alignment on TslGameInstance_Pause");
static_assert(sizeof(TslGameInstance_Pause) == 0x000001, "Wrong size on TslGameInstance_Pause");
static_assert(offsetof(TslGameInstance_Pause, ReturnValue) == 0x000000, "Member 'TslGameInstance_Pause::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.PlayReplayBP
// 0x0010 (0x0010 - 0x0000)
struct TslGameInstance_PlayReplayBP final
{
public:
	class FString                                 SessionOrFriendlyName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_PlayReplayBP) == 0x000008, "Wrong alignment on TslGameInstance_PlayReplayBP");
static_assert(sizeof(TslGameInstance_PlayReplayBP) == 0x000010, "Wrong size on TslGameInstance_PlayReplayBP");
static_assert(offsetof(TslGameInstance_PlayReplayBP, SessionOrFriendlyName) == 0x000000, "Member 'TslGameInstance_PlayReplayBP::SessionOrFriendlyName' has a wrong offset!");

// Function TslGame.TslGameInstance.PlayReplayBPByRegionOrLocal
// 0x0020 (0x0020 - 0x0000)
struct TslGameInstance_PlayReplayBPByRegionOrLocal final
{
public:
	class FString                                 RegionOrLocal;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionOrFriendlyName;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_PlayReplayBPByRegionOrLocal) == 0x000008, "Wrong alignment on TslGameInstance_PlayReplayBPByRegionOrLocal");
static_assert(sizeof(TslGameInstance_PlayReplayBPByRegionOrLocal) == 0x000020, "Wrong size on TslGameInstance_PlayReplayBPByRegionOrLocal");
static_assert(offsetof(TslGameInstance_PlayReplayBPByRegionOrLocal, RegionOrLocal) == 0x000000, "Member 'TslGameInstance_PlayReplayBPByRegionOrLocal::RegionOrLocal' has a wrong offset!");
static_assert(offsetof(TslGameInstance_PlayReplayBPByRegionOrLocal, SessionOrFriendlyName) == 0x000010, "Member 'TslGameInstance_PlayReplayBPByRegionOrLocal::SessionOrFriendlyName' has a wrong offset!");

// Function TslGame.TslGameInstance.ReplayJump
// 0x0004 (0x0004 - 0x0000)
struct TslGameInstance_ReplayJump final
{
public:
	float                                         TimelinePercentage;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_ReplayJump) == 0x000004, "Wrong alignment on TslGameInstance_ReplayJump");
static_assert(sizeof(TslGameInstance_ReplayJump) == 0x000004, "Wrong size on TslGameInstance_ReplayJump");
static_assert(offsetof(TslGameInstance_ReplayJump, TimelinePercentage) == 0x000000, "Member 'TslGameInstance_ReplayJump::TimelinePercentage' has a wrong offset!");

// Function TslGame.TslGameInstance.SetReplayTimeSpeed
// 0x0004 (0x0004 - 0x0000)
struct TslGameInstance_SetReplayTimeSpeed final
{
public:
	float                                         TimeSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_SetReplayTimeSpeed) == 0x000004, "Wrong alignment on TslGameInstance_SetReplayTimeSpeed");
static_assert(sizeof(TslGameInstance_SetReplayTimeSpeed) == 0x000004, "Wrong size on TslGameInstance_SetReplayTimeSpeed");
static_assert(offsetof(TslGameInstance_SetReplayTimeSpeed, TimeSpeed) == 0x000000, "Member 'TslGameInstance_SetReplayTimeSpeed::TimeSpeed' has a wrong offset!");

// Function TslGame.TslGameInstance.UnPause
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_UnPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_UnPause) == 0x000001, "Wrong alignment on TslGameInstance_UnPause");
static_assert(sizeof(TslGameInstance_UnPause) == 0x000001, "Wrong size on TslGameInstance_UnPause");
static_assert(offsetof(TslGameInstance_UnPause, ReturnValue) == 0x000000, "Member 'TslGameInstance_UnPause::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetCurrentGameState
// 0x0008 (0x0008 - 0x0000)
struct TslGameInstance_GetCurrentGameState final
{
public:
	struct FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetCurrentGameState) == 0x000004, "Wrong alignment on TslGameInstance_GetCurrentGameState");
static_assert(sizeof(TslGameInstance_GetCurrentGameState) == 0x000008, "Wrong size on TslGameInstance_GetCurrentGameState");
static_assert(offsetof(TslGameInstance_GetCurrentGameState, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetCurrentGameState::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetGameEventObserver
// 0x0008 (0x0008 - 0x0000)
struct TslGameInstance_GetGameEventObserver final
{
public:
	class UGameEventObserver*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetGameEventObserver) == 0x000008, "Wrong alignment on TslGameInstance_GetGameEventObserver");
static_assert(sizeof(TslGameInstance_GetGameEventObserver) == 0x000008, "Wrong size on TslGameInstance_GetGameEventObserver");
static_assert(offsetof(TslGameInstance_GetGameEventObserver, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetGameEventObserver::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetStartParameter
// 0x0080 (0x0080 - 0x0000)
struct TslGameInstance_GetStartParameter final
{
public:
	struct FTslStartParameter                     ReturnValue;                                       // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetStartParameter) == 0x000008, "Wrong alignment on TslGameInstance_GetStartParameter");
static_assert(sizeof(TslGameInstance_GetStartParameter) == 0x000080, "Wrong size on TslGameInstance_GetStartParameter");
static_assert(offsetof(TslGameInstance_GetStartParameter, ReturnValue) == 0x000000, "Member 'TslGameInstance_GetStartParameter::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.GetStartParameterStringValue
// 0x0030 (0x0030 - 0x0000)
struct TslGameInstance_GetStartParameterStringValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NotFoundValue;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_GetStartParameterStringValue) == 0x000008, "Wrong alignment on TslGameInstance_GetStartParameterStringValue");
static_assert(sizeof(TslGameInstance_GetStartParameterStringValue) == 0x000030, "Wrong size on TslGameInstance_GetStartParameterStringValue");
static_assert(offsetof(TslGameInstance_GetStartParameterStringValue, Key) == 0x000000, "Member 'TslGameInstance_GetStartParameterStringValue::Key' has a wrong offset!");
static_assert(offsetof(TslGameInstance_GetStartParameterStringValue, NotFoundValue) == 0x000010, "Member 'TslGameInstance_GetStartParameterStringValue::NotFoundValue' has a wrong offset!");
static_assert(offsetof(TslGameInstance_GetStartParameterStringValue, ReturnValue) == 0x000020, "Member 'TslGameInstance_GetStartParameterStringValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameInstance.UseLobbyWidget
// 0x0001 (0x0001 - 0x0000)
struct TslGameInstance_UseLobbyWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameInstance_UseLobbyWidget) == 0x000001, "Wrong alignment on TslGameInstance_UseLobbyWidget");
static_assert(sizeof(TslGameInstance_UseLobbyWidget) == 0x000001, "Wrong size on TslGameInstance_UseLobbyWidget");
static_assert(offsetof(TslGameInstance_UseLobbyWidget, ReturnValue) == 0x000000, "Member 'TslGameInstance_UseLobbyWidget::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.BroadcastGameModeEvent
// 0x0018 (0x0018 - 0x0000)
struct TslGameMode_BroadcastGameModeEvent final
{
public:
	struct FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameter;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_BroadcastGameModeEvent) == 0x000008, "Wrong alignment on TslGameMode_BroadcastGameModeEvent");
static_assert(sizeof(TslGameMode_BroadcastGameModeEvent) == 0x000018, "Wrong size on TslGameMode_BroadcastGameModeEvent");
static_assert(offsetof(TslGameMode_BroadcastGameModeEvent, EventName) == 0x000000, "Member 'TslGameMode_BroadcastGameModeEvent::EventName' has a wrong offset!");
static_assert(offsetof(TslGameMode_BroadcastGameModeEvent, Parameter) == 0x000008, "Member 'TslGameMode_BroadcastGameModeEvent::Parameter' has a wrong offset!");

// Function TslGame.TslGameMode.FindCharacterByPlayerState
// 0x0010 (0x0010 - 0x0000)
struct TslGameMode_FindCharacterByPlayerState final
{
public:
	const class APlayerState*                     State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_FindCharacterByPlayerState) == 0x000008, "Wrong alignment on TslGameMode_FindCharacterByPlayerState");
static_assert(sizeof(TslGameMode_FindCharacterByPlayerState) == 0x000010, "Wrong size on TslGameMode_FindCharacterByPlayerState");
static_assert(offsetof(TslGameMode_FindCharacterByPlayerState, State) == 0x000000, "Member 'TslGameMode_FindCharacterByPlayerState::State' has a wrong offset!");
static_assert(offsetof(TslGameMode_FindCharacterByPlayerState, ReturnValue) == 0x000008, "Member 'TslGameMode_FindCharacterByPlayerState::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.GetAllPawns
// 0x0010 (0x0010 - 0x0000)
struct TslGameMode_GetAllPawns final
{
public:
	TArray<class APawn*>                          OutPawns;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_GetAllPawns) == 0x000008, "Wrong alignment on TslGameMode_GetAllPawns");
static_assert(sizeof(TslGameMode_GetAllPawns) == 0x000010, "Wrong size on TslGameMode_GetAllPawns");
static_assert(offsetof(TslGameMode_GetAllPawns, OutPawns) == 0x000000, "Member 'TslGameMode_GetAllPawns::OutPawns' has a wrong offset!");

// Function TslGame.TslGameMode.GetItemSpawnProcessor
// 0x0008 (0x0008 - 0x0000)
struct TslGameMode_GetItemSpawnProcessor final
{
public:
	class UItemSpawnProcessor*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_GetItemSpawnProcessor) == 0x000008, "Wrong alignment on TslGameMode_GetItemSpawnProcessor");
static_assert(sizeof(TslGameMode_GetItemSpawnProcessor) == 0x000008, "Wrong size on TslGameMode_GetItemSpawnProcessor");
static_assert(offsetof(TslGameMode_GetItemSpawnProcessor, ReturnValue) == 0x000000, "Member 'TslGameMode_GetItemSpawnProcessor::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.GetThingSpawnProcessor
// 0x0008 (0x0008 - 0x0000)
struct TslGameMode_GetThingSpawnProcessor final
{
public:
	class UThingSpawnProcessor*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_GetThingSpawnProcessor) == 0x000008, "Wrong alignment on TslGameMode_GetThingSpawnProcessor");
static_assert(sizeof(TslGameMode_GetThingSpawnProcessor) == 0x000008, "Wrong size on TslGameMode_GetThingSpawnProcessor");
static_assert(offsetof(TslGameMode_GetThingSpawnProcessor, ReturnValue) == 0x000000, "Member 'TslGameMode_GetThingSpawnProcessor::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.NotifyNextGasInToAll
// 0x0010 (0x0010 - 0x0000)
struct TslGameMode_NotifyNextGasInToAll final
{
public:
	struct FVector                                PoisonGasWarningPosition;                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PoisonGasWarningRadius;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_NotifyNextGasInToAll) == 0x000004, "Wrong alignment on TslGameMode_NotifyNextGasInToAll");
static_assert(sizeof(TslGameMode_NotifyNextGasInToAll) == 0x000010, "Wrong size on TslGameMode_NotifyNextGasInToAll");
static_assert(offsetof(TslGameMode_NotifyNextGasInToAll, PoisonGasWarningPosition) == 0x000000, "Member 'TslGameMode_NotifyNextGasInToAll::PoisonGasWarningPosition' has a wrong offset!");
static_assert(offsetof(TslGameMode_NotifyNextGasInToAll, PoisonGasWarningRadius) == 0x00000C, "Member 'TslGameMode_NotifyNextGasInToAll::PoisonGasWarningRadius' has a wrong offset!");

// Function TslGame.TslGameMode.SendSystemMessageToAll
// 0x0028 (0x0028 - 0x0000)
struct TslGameMode_SendSystemMessageToAll final
{
public:
	ESystemMessageType                            MessageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         MessageDuration;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameMode_SendSystemMessageToAll) == 0x000008, "Wrong alignment on TslGameMode_SendSystemMessageToAll");
static_assert(sizeof(TslGameMode_SendSystemMessageToAll) == 0x000028, "Wrong size on TslGameMode_SendSystemMessageToAll");
static_assert(offsetof(TslGameMode_SendSystemMessageToAll, MessageType) == 0x000000, "Member 'TslGameMode_SendSystemMessageToAll::MessageType' has a wrong offset!");
static_assert(offsetof(TslGameMode_SendSystemMessageToAll, Message) == 0x000008, "Member 'TslGameMode_SendSystemMessageToAll::Message' has a wrong offset!");
static_assert(offsetof(TslGameMode_SendSystemMessageToAll, MessageDuration) == 0x000020, "Member 'TslGameMode_SendSystemMessageToAll::MessageDuration' has a wrong offset!");

// Function TslGame.TslGameMode.CanDealDamage
// 0x0018 (0x0018 - 0x0000)
struct TslGameMode_CanDealDamage final
{
public:
	const class ATslPlayerState*                  DamageInstigator;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATslPlayerState*                  DamagedPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslGameMode_CanDealDamage) == 0x000008, "Wrong alignment on TslGameMode_CanDealDamage");
static_assert(sizeof(TslGameMode_CanDealDamage) == 0x000018, "Wrong size on TslGameMode_CanDealDamage");
static_assert(offsetof(TslGameMode_CanDealDamage, DamageInstigator) == 0x000000, "Member 'TslGameMode_CanDealDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(TslGameMode_CanDealDamage, DamagedPlayer) == 0x000008, "Member 'TslGameMode_CanDealDamage::DamagedPlayer' has a wrong offset!");
static_assert(offsetof(TslGameMode_CanDealDamage, ReturnValue) == 0x000010, "Member 'TslGameMode_CanDealDamage::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.GetLobbyLink
// 0x0008 (0x0008 - 0x0000)
struct TslGameMode_GetLobbyLink final
{
public:
	class ULobbyLink*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_GetLobbyLink) == 0x000008, "Wrong alignment on TslGameMode_GetLobbyLink");
static_assert(sizeof(TslGameMode_GetLobbyLink) == 0x000008, "Wrong size on TslGameMode_GetLobbyLink");
static_assert(offsetof(TslGameMode_GetLobbyLink, ReturnValue) == 0x000000, "Member 'TslGameMode_GetLobbyLink::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.GetVivoxManager
// 0x0008 (0x0008 - 0x0000)
struct TslGameMode_GetVivoxManager final
{
public:
	class UVivoxManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_GetVivoxManager) == 0x000008, "Wrong alignment on TslGameMode_GetVivoxManager");
static_assert(sizeof(TslGameMode_GetVivoxManager) == 0x000008, "Wrong size on TslGameMode_GetVivoxManager");
static_assert(offsetof(TslGameMode_GetVivoxManager, ReturnValue) == 0x000000, "Member 'TslGameMode_GetVivoxManager::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct TslGameMode_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_IsPlayInEditor) == 0x000001, "Wrong alignment on TslGameMode_IsPlayInEditor");
static_assert(sizeof(TslGameMode_IsPlayInEditor) == 0x000001, "Wrong size on TslGameMode_IsPlayInEditor");
static_assert(offsetof(TslGameMode_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'TslGameMode_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameMode.IsPreventFinishMatch
// 0x0001 (0x0001 - 0x0000)
struct TslGameMode_IsPreventFinishMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameMode_IsPreventFinishMatch) == 0x000001, "Wrong alignment on TslGameMode_IsPreventFinishMatch");
static_assert(sizeof(TslGameMode_IsPreventFinishMatch) == 0x000001, "Wrong size on TslGameMode_IsPreventFinishMatch");
static_assert(offsetof(TslGameMode_IsPreventFinishMatch, ReturnValue) == 0x000000, "Member 'TslGameMode_IsPreventFinishMatch::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameState.OnRep_GasRelease
// 0x0001 (0x0001 - 0x0000)
struct TslGameState_OnRep_GasRelease final
{
public:
	bool                                          bLastIsGasRelease;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameState_OnRep_GasRelease) == 0x000001, "Wrong alignment on TslGameState_OnRep_GasRelease");
static_assert(sizeof(TslGameState_OnRep_GasRelease) == 0x000001, "Wrong size on TslGameState_OnRep_GasRelease");
static_assert(offsetof(TslGameState_OnRep_GasRelease, bLastIsGasRelease) == 0x000000, "Member 'TslGameState_OnRep_GasRelease::bLastIsGasRelease' has a wrong offset!");

// Function TslGame.TslGameState.OnStartGasRelease
// 0x0001 (0x0001 - 0x0000)
struct TslGameState_OnStartGasRelease final
{
public:
	bool                                          InbIsGasRelease;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameState_OnStartGasRelease) == 0x000001, "Wrong alignment on TslGameState_OnStartGasRelease");
static_assert(sizeof(TslGameState_OnStartGasRelease) == 0x000001, "Wrong size on TslGameState_OnStartGasRelease");
static_assert(offsetof(TslGameState_OnStartGasRelease, InbIsGasRelease) == 0x000000, "Member 'TslGameState_OnStartGasRelease::InbIsGasRelease' has a wrong offset!");

// Function TslGame.TslGameState.UpdateWorldTimeSecondsDelta
// 0x0004 (0x0004 - 0x0000)
struct TslGameState_UpdateWorldTimeSecondsDelta final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameState_UpdateWorldTimeSecondsDelta) == 0x000004, "Wrong alignment on TslGameState_UpdateWorldTimeSecondsDelta");
static_assert(sizeof(TslGameState_UpdateWorldTimeSecondsDelta) == 0x000004, "Wrong size on TslGameState_UpdateWorldTimeSecondsDelta");
static_assert(offsetof(TslGameState_UpdateWorldTimeSecondsDelta, DeltaSeconds) == 0x000000, "Member 'TslGameState_UpdateWorldTimeSecondsDelta::DeltaSeconds' has a wrong offset!");

// Function TslGame.TslGameState.GetLevelAttribute
// 0x0008 (0x0008 - 0x0000)
struct TslGameState_GetLevelAttribute final
{
public:
	class ALevelAttribute*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameState_GetLevelAttribute) == 0x000008, "Wrong alignment on TslGameState_GetLevelAttribute");
static_assert(sizeof(TslGameState_GetLevelAttribute) == 0x000008, "Wrong size on TslGameState_GetLevelAttribute");
static_assert(offsetof(TslGameState_GetLevelAttribute, ReturnValue) == 0x000000, "Member 'TslGameState_GetLevelAttribute::ReturnValue' has a wrong offset!");

// Function TslGame.TslGameState.IsMatchInProgressBP
// 0x0001 (0x0001 - 0x0000)
struct TslGameState_IsMatchInProgressBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGameState_IsMatchInProgressBP) == 0x000001, "Wrong alignment on TslGameState_IsMatchInProgressBP");
static_assert(sizeof(TslGameState_IsMatchInProgressBP) == 0x000001, "Wrong size on TslGameState_IsMatchInProgressBP");
static_assert(offsetof(TslGameState_IsMatchInProgressBP, ReturnValue) == 0x000000, "Member 'TslGameState_IsMatchInProgressBP::ReturnValue' has a wrong offset!");

// Function TslGame.TslGlassWindowComponent.ClientNotifyHit
// 0x001C (0x001C - 0x0000)
struct TslGlassWindowComponent_ClientNotifyHit final
{
public:
	bool                                          bBlockingHit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    Location;                                          // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0010(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGlassWindowComponent_ClientNotifyHit) == 0x000004, "Wrong alignment on TslGlassWindowComponent_ClientNotifyHit");
static_assert(sizeof(TslGlassWindowComponent_ClientNotifyHit) == 0x00001C, "Wrong size on TslGlassWindowComponent_ClientNotifyHit");
static_assert(offsetof(TslGlassWindowComponent_ClientNotifyHit, bBlockingHit) == 0x000000, "Member 'TslGlassWindowComponent_ClientNotifyHit::bBlockingHit' has a wrong offset!");
static_assert(offsetof(TslGlassWindowComponent_ClientNotifyHit, Location) == 0x000004, "Member 'TslGlassWindowComponent_ClientNotifyHit::Location' has a wrong offset!");
static_assert(offsetof(TslGlassWindowComponent_ClientNotifyHit, ImpactNormal) == 0x000010, "Member 'TslGlassWindowComponent_ClientNotifyHit::ImpactNormal' has a wrong offset!");

// Function TslGame.TslGlassWindowComponent.OnRep_Destroyed
// 0x0001 (0x0001 - 0x0000)
struct TslGlassWindowComponent_OnRep_Destroyed final
{
public:
	bool                                          bLastDestroyed;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGlassWindowComponent_OnRep_Destroyed) == 0x000001, "Wrong alignment on TslGlassWindowComponent_OnRep_Destroyed");
static_assert(sizeof(TslGlassWindowComponent_OnRep_Destroyed) == 0x000001, "Wrong size on TslGlassWindowComponent_OnRep_Destroyed");
static_assert(offsetof(TslGlassWindowComponent_OnRep_Destroyed, bLastDestroyed) == 0x000000, "Member 'TslGlassWindowComponent_OnRep_Destroyed::bLastDestroyed' has a wrong offset!");

// Function TslGame.TslGlassWindowComponent.OnRep_ReplicatedOnClient
// 0x0001 (0x0001 - 0x0000)
struct TslGlassWindowComponent_OnRep_ReplicatedOnClient final
{
public:
	bool                                          bLastReplicatedOnClient;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslGlassWindowComponent_OnRep_ReplicatedOnClient) == 0x000001, "Wrong alignment on TslGlassWindowComponent_OnRep_ReplicatedOnClient");
static_assert(sizeof(TslGlassWindowComponent_OnRep_ReplicatedOnClient) == 0x000001, "Wrong size on TslGlassWindowComponent_OnRep_ReplicatedOnClient");
static_assert(offsetof(TslGlassWindowComponent_OnRep_ReplicatedOnClient, bLastReplicatedOnClient) == 0x000000, "Member 'TslGlassWindowComponent_OnRep_ReplicatedOnClient::bLastReplicatedOnClient' has a wrong offset!");

// Function TslGame.TslHealthGaugeData.GetGaugeColor
// 0x0014 (0x0014 - 0x0000)
struct TslHealthGaugeData_GetGaugeColor final
{
public:
	float                                         HealthPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslHealthGaugeData_GetGaugeColor) == 0x000004, "Wrong alignment on TslHealthGaugeData_GetGaugeColor");
static_assert(sizeof(TslHealthGaugeData_GetGaugeColor) == 0x000014, "Wrong size on TslHealthGaugeData_GetGaugeColor");
static_assert(offsetof(TslHealthGaugeData_GetGaugeColor, HealthPercent) == 0x000000, "Member 'TslHealthGaugeData_GetGaugeColor::HealthPercent' has a wrong offset!");
static_assert(offsetof(TslHealthGaugeData_GetGaugeColor, ReturnValue) == 0x000004, "Member 'TslHealthGaugeData_GetGaugeColor::ReturnValue' has a wrong offset!");

// Function TslGame.TslInstancedReactionComponent.Client_ReactByPointDamage
// 0x0020 (0x0020 - 0x0000)
struct TslInstancedReactionComponent_Client_ReactByPointDamage final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impact;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslInstancedReactionComponent_Client_ReactByPointDamage) == 0x000004, "Wrong alignment on TslInstancedReactionComponent_Client_ReactByPointDamage");
static_assert(sizeof(TslInstancedReactionComponent_Client_ReactByPointDamage) == 0x000020, "Wrong size on TslInstancedReactionComponent_Client_ReactByPointDamage");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByPointDamage, InstanceIndex) == 0x000000, "Member 'TslInstancedReactionComponent_Client_ReactByPointDamage::InstanceIndex' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByPointDamage, DamageAmount) == 0x000004, "Member 'TslInstancedReactionComponent_Client_ReactByPointDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByPointDamage, Impact) == 0x000008, "Member 'TslInstancedReactionComponent_Client_ReactByPointDamage::Impact' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByPointDamage, ImpulseDir) == 0x000014, "Member 'TslInstancedReactionComponent_Client_ReactByPointDamage::ImpulseDir' has a wrong offset!");

// Function TslGame.TslInstancedReactionComponent.Client_ReactByRadialDamage
// 0x0030 (0x0030 - 0x0000)
struct TslInstancedReactionComponent_Client_ReactByRadialDamage final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Impact;                                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslInstancedReactionComponent_Client_ReactByRadialDamage) == 0x000004, "Wrong alignment on TslInstancedReactionComponent_Client_ReactByRadialDamage");
static_assert(sizeof(TslInstancedReactionComponent_Client_ReactByRadialDamage) == 0x000030, "Wrong size on TslInstancedReactionComponent_Client_ReactByRadialDamage");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, InstanceIndex) == 0x000000, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::InstanceIndex' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, DamageAmount) == 0x000004, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, Origin) == 0x000008, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, Impact) == 0x000014, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::Impact' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, ImpulseDir) == 0x000020, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::ImpulseDir' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByRadialDamage, OuterRadius) == 0x00002C, "Member 'TslInstancedReactionComponent_Client_ReactByRadialDamage::OuterRadius' has a wrong offset!");

// Function TslGame.TslInstancedReactionComponent.Client_ReactByVehicle
// 0x0028 (0x0028 - 0x0000)
struct TslInstancedReactionComponent_Client_ReactByVehicle final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impact;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslInstancedReactionComponent_Client_ReactByVehicle) == 0x000004, "Wrong alignment on TslInstancedReactionComponent_Client_ReactByVehicle");
static_assert(sizeof(TslInstancedReactionComponent_Client_ReactByVehicle) == 0x000028, "Wrong size on TslInstancedReactionComponent_Client_ReactByVehicle");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByVehicle, InstanceIndex) == 0x000000, "Member 'TslInstancedReactionComponent_Client_ReactByVehicle::InstanceIndex' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByVehicle, Impact) == 0x000004, "Member 'TslInstancedReactionComponent_Client_ReactByVehicle::Impact' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByVehicle, ImpulseDir) == 0x000010, "Member 'TslInstancedReactionComponent_Client_ReactByVehicle::ImpulseDir' has a wrong offset!");
static_assert(offsetof(TslInstancedReactionComponent_Client_ReactByVehicle, Velocity) == 0x00001C, "Member 'TslInstancedReactionComponent_Client_ReactByVehicle::Velocity' has a wrong offset!");

// Function TslGame.TslLevelScriptActor.RequestReplayALevelWeatherEvent
// 0x0010 (0x0010 - 0x0000)
struct TslLevelScriptActor_RequestReplayALevelWeatherEvent final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslLevelScriptActor_RequestReplayALevelWeatherEvent) == 0x000008, "Wrong alignment on TslLevelScriptActor_RequestReplayALevelWeatherEvent");
static_assert(sizeof(TslLevelScriptActor_RequestReplayALevelWeatherEvent) == 0x000010, "Wrong size on TslLevelScriptActor_RequestReplayALevelWeatherEvent");
static_assert(offsetof(TslLevelScriptActor_RequestReplayALevelWeatherEvent, EventID) == 0x000000, "Member 'TslLevelScriptActor_RequestReplayALevelWeatherEvent::EventID' has a wrong offset!");

// Function TslGame.TslModularBuilding.AddAttachmentToTable
// 0x0018 (0x0018 - 0x0000)
struct TslModularBuilding_AddAttachmentToTable final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Attachment;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_AddAttachmentToTable) == 0x000008, "Wrong alignment on TslModularBuilding_AddAttachmentToTable");
static_assert(sizeof(TslModularBuilding_AddAttachmentToTable) == 0x000018, "Wrong size on TslModularBuilding_AddAttachmentToTable");
static_assert(offsetof(TslModularBuilding_AddAttachmentToTable, Keyword) == 0x000000, "Member 'TslModularBuilding_AddAttachmentToTable::Keyword' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_AddAttachmentToTable, Attachment) == 0x000010, "Member 'TslModularBuilding_AddAttachmentToTable::Attachment' has a wrong offset!");

// Function TslGame.TslModularBuilding.AddBuildingModuleToTable
// 0x0018 (0x0018 - 0x0000)
struct TslModularBuilding_AddBuildingModuleToTable final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Building;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_AddBuildingModuleToTable) == 0x000008, "Wrong alignment on TslModularBuilding_AddBuildingModuleToTable");
static_assert(sizeof(TslModularBuilding_AddBuildingModuleToTable) == 0x000018, "Wrong size on TslModularBuilding_AddBuildingModuleToTable");
static_assert(offsetof(TslModularBuilding_AddBuildingModuleToTable, Keyword) == 0x000000, "Member 'TslModularBuilding_AddBuildingModuleToTable::Keyword' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_AddBuildingModuleToTable, Building) == 0x000010, "Member 'TslModularBuilding_AddBuildingModuleToTable::Building' has a wrong offset!");

// Function TslGame.TslModularBuilding.GetAttachmentsFromTable
// 0x0020 (0x0020 - 0x0000)
struct TslModularBuilding_GetAttachmentsFromTable final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_GetAttachmentsFromTable) == 0x000008, "Wrong alignment on TslModularBuilding_GetAttachmentsFromTable");
static_assert(sizeof(TslModularBuilding_GetAttachmentsFromTable) == 0x000020, "Wrong size on TslModularBuilding_GetAttachmentsFromTable");
static_assert(offsetof(TslModularBuilding_GetAttachmentsFromTable, Keyword) == 0x000000, "Member 'TslModularBuilding_GetAttachmentsFromTable::Keyword' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_GetAttachmentsFromTable, ReturnValue) == 0x000010, "Member 'TslModularBuilding_GetAttachmentsFromTable::ReturnValue' has a wrong offset!");

// Function TslGame.TslModularBuilding.GetBuildingModuleFromTable
// 0x0020 (0x0020 - 0x0000)
struct TslModularBuilding_GetBuildingModuleFromTable final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_GetBuildingModuleFromTable) == 0x000008, "Wrong alignment on TslModularBuilding_GetBuildingModuleFromTable");
static_assert(sizeof(TslModularBuilding_GetBuildingModuleFromTable) == 0x000020, "Wrong size on TslModularBuilding_GetBuildingModuleFromTable");
static_assert(offsetof(TslModularBuilding_GetBuildingModuleFromTable, Keyword) == 0x000000, "Member 'TslModularBuilding_GetBuildingModuleFromTable::Keyword' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_GetBuildingModuleFromTable, ReturnValue) == 0x000010, "Member 'TslModularBuilding_GetBuildingModuleFromTable::ReturnValue' has a wrong offset!");

// Function TslGame.TslModularBuilding.GetMeshOnSapartedFloor
// 0x0028 (0x0028 - 0x0000)
struct TslModularBuilding_GetMeshOnSapartedFloor final
{
public:
	int32                                         SepartedFloor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keyword;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_GetMeshOnSapartedFloor) == 0x000008, "Wrong alignment on TslModularBuilding_GetMeshOnSapartedFloor");
static_assert(sizeof(TslModularBuilding_GetMeshOnSapartedFloor) == 0x000028, "Wrong size on TslModularBuilding_GetMeshOnSapartedFloor");
static_assert(offsetof(TslModularBuilding_GetMeshOnSapartedFloor, SepartedFloor) == 0x000000, "Member 'TslModularBuilding_GetMeshOnSapartedFloor::SepartedFloor' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_GetMeshOnSapartedFloor, Keyword) == 0x000008, "Member 'TslModularBuilding_GetMeshOnSapartedFloor::Keyword' has a wrong offset!");
static_assert(offsetof(TslModularBuilding_GetMeshOnSapartedFloor, ReturnValue) == 0x000018, "Member 'TslModularBuilding_GetMeshOnSapartedFloor::ReturnValue' has a wrong offset!");

// Function TslGame.TslModularBuilding.PassSeparatedFloors
// 0x0010 (0x0010 - 0x0000)
struct TslModularBuilding_PassSeparatedFloors final
{
public:
	TArray<class UChildActorComponent*>           Floors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslModularBuilding_PassSeparatedFloors) == 0x000008, "Wrong alignment on TslModularBuilding_PassSeparatedFloors");
static_assert(sizeof(TslModularBuilding_PassSeparatedFloors) == 0x000010, "Wrong size on TslModularBuilding_PassSeparatedFloors");
static_assert(offsetof(TslModularBuilding_PassSeparatedFloors, Floors) == 0x000000, "Member 'TslModularBuilding_PassSeparatedFloors::Floors' has a wrong offset!");

// Function TslGame.TslPlayerState.BroadcastDeath
// 0x0048 (0x0048 - 0x0000)
struct TslPlayerState_BroadcastDeath final
{
public:
	class ATslPlayerState*                        KillerPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        GroggyPlayerInstigator;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      KillerDamageType;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageReason                                 DamageReason;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DamageCauserName;                                  // 0x0020(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AlivePlayerNum;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AliveTeamNum;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbIsStealKilled;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPlayerState_BroadcastDeath) == 0x000008, "Wrong alignment on TslPlayerState_BroadcastDeath");
static_assert(sizeof(TslPlayerState_BroadcastDeath) == 0x000048, "Wrong size on TslPlayerState_BroadcastDeath");
static_assert(offsetof(TslPlayerState_BroadcastDeath, KillerPlayerState) == 0x000000, "Member 'TslPlayerState_BroadcastDeath::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, GroggyPlayerInstigator) == 0x000008, "Member 'TslPlayerState_BroadcastDeath::GroggyPlayerInstigator' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, KillerDamageType) == 0x000010, "Member 'TslPlayerState_BroadcastDeath::KillerDamageType' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, DamageReason) == 0x000018, "Member 'TslPlayerState_BroadcastDeath::DamageReason' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, DamageCauserName) == 0x000020, "Member 'TslPlayerState_BroadcastDeath::DamageCauserName' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, AlivePlayerNum) == 0x000038, "Member 'TslPlayerState_BroadcastDeath::AlivePlayerNum' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, AliveTeamNum) == 0x00003C, "Member 'TslPlayerState_BroadcastDeath::AliveTeamNum' has a wrong offset!");
static_assert(offsetof(TslPlayerState_BroadcastDeath, InbIsStealKilled) == 0x000040, "Member 'TslPlayerState_BroadcastDeath::InbIsStealKilled' has a wrong offset!");

// Function TslGame.TslPlayerState.InformAboutKill
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerState_InformAboutKill final
{
public:
	const class UDamageType*                      KillerDamageType;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        KilledPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_InformAboutKill) == 0x000008, "Wrong alignment on TslPlayerState_InformAboutKill");
static_assert(sizeof(TslPlayerState_InformAboutKill) == 0x000010, "Wrong size on TslPlayerState_InformAboutKill");
static_assert(offsetof(TslPlayerState_InformAboutKill, KillerDamageType) == 0x000000, "Member 'TslPlayerState_InformAboutKill::KillerDamageType' has a wrong offset!");
static_assert(offsetof(TslPlayerState_InformAboutKill, KilledPlayerState) == 0x000008, "Member 'TslPlayerState_InformAboutKill::KilledPlayerState' has a wrong offset!");

// Function TslGame.TslPlayerState.OnRep_PlayerStatistics
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerState_OnRep_PlayerStatistics final
{
public:
	struct FTslPlayerStatistics                   OldPlayerStatistics;                               // 0x0000(0x0004)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_OnRep_PlayerStatistics) == 0x000004, "Wrong alignment on TslPlayerState_OnRep_PlayerStatistics");
static_assert(sizeof(TslPlayerState_OnRep_PlayerStatistics) == 0x000004, "Wrong size on TslPlayerState_OnRep_PlayerStatistics");
static_assert(offsetof(TslPlayerState_OnRep_PlayerStatistics, OldPlayerStatistics) == 0x000000, "Member 'TslPlayerState_OnRep_PlayerStatistics::OldPlayerStatistics' has a wrong offset!");

// Function TslGame.TslPlayerState.GetKills
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerState_GetKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetKills) == 0x000004, "Wrong alignment on TslPlayerState_GetKills");
static_assert(sizeof(TslPlayerState_GetKills) == 0x000004, "Wrong size on TslPlayerState_GetKills");
static_assert(offsetof(TslPlayerState_GetKills, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetKills::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.GetObserverAuthorityType
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerState_GetObserverAuthorityType final
{
public:
	EObserverAuthorityType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetObserverAuthorityType) == 0x000001, "Wrong alignment on TslPlayerState_GetObserverAuthorityType");
static_assert(sizeof(TslPlayerState_GetObserverAuthorityType) == 0x000001, "Wrong size on TslPlayerState_GetObserverAuthorityType");
static_assert(offsetof(TslPlayerState_GetObserverAuthorityType, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetObserverAuthorityType::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.GetPing
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerState_GetPing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetPing) == 0x000004, "Wrong alignment on TslPlayerState_GetPing");
static_assert(sizeof(TslPlayerState_GetPing) == 0x000004, "Wrong size on TslPlayerState_GetPing");
static_assert(offsetof(TslPlayerState_GetPing, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetPing::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.GetPlayerScores
// 0x000C (0x000C - 0x0000)
struct TslPlayerState_GetPlayerScores final
{
public:
	struct FTslPlayerScores                       ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetPlayerScores) == 0x000004, "Wrong alignment on TslPlayerState_GetPlayerScores");
static_assert(sizeof(TslPlayerState_GetPlayerScores) == 0x00000C, "Wrong size on TslPlayerState_GetPlayerScores");
static_assert(offsetof(TslPlayerState_GetPlayerScores, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetPlayerScores::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.GetShortPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TslPlayerState_GetShortPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetShortPlayerName) == 0x000008, "Wrong alignment on TslPlayerState_GetShortPlayerName");
static_assert(sizeof(TslPlayerState_GetShortPlayerName) == 0x000010, "Wrong size on TslPlayerState_GetShortPlayerName");
static_assert(offsetof(TslPlayerState_GetShortPlayerName, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetShortPlayerName::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.GetTeamNum
// 0x0004 (0x0004 - 0x0000)
struct TslPlayerState_GetTeamNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_GetTeamNum) == 0x000004, "Wrong alignment on TslPlayerState_GetTeamNum");
static_assert(sizeof(TslPlayerState_GetTeamNum) == 0x000004, "Wrong size on TslPlayerState_GetTeamNum");
static_assert(offsetof(TslPlayerState_GetTeamNum, ReturnValue) == 0x000000, "Member 'TslPlayerState_GetTeamNum::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.IsObserver
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerState_IsObserver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_IsObserver) == 0x000001, "Wrong alignment on TslPlayerState_IsObserver");
static_assert(sizeof(TslPlayerState_IsObserver) == 0x000001, "Wrong size on TslPlayerState_IsObserver");
static_assert(offsetof(TslPlayerState_IsObserver, ReturnValue) == 0x000000, "Member 'TslPlayerState_IsObserver::ReturnValue' has a wrong offset!");

// Function TslGame.TslPlayerState.IsQuitter
// 0x0001 (0x0001 - 0x0000)
struct TslPlayerState_IsQuitter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPlayerState_IsQuitter) == 0x000001, "Wrong alignment on TslPlayerState_IsQuitter");
static_assert(sizeof(TslPlayerState_IsQuitter) == 0x000001, "Wrong size on TslPlayerState_IsQuitter");
static_assert(offsetof(TslPlayerState_IsQuitter, ReturnValue) == 0x000000, "Member 'TslPlayerState_IsQuitter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPostProcessEffect.SetEffectParameter
// 0x0018 (0x0018 - 0x0000)
struct TslPostProcessEffect_SetEffectParameter final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPostProcessEffect_SetEffectParameter) == 0x000008, "Wrong alignment on TslPostProcessEffect_SetEffectParameter");
static_assert(sizeof(TslPostProcessEffect_SetEffectParameter) == 0x000018, "Wrong size on TslPostProcessEffect_SetEffectParameter");
static_assert(offsetof(TslPostProcessEffect_SetEffectParameter, ParameterName) == 0x000000, "Member 'TslPostProcessEffect_SetEffectParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetEffectParameter, Value) == 0x000010, "Member 'TslPostProcessEffect_SetEffectParameter::Value' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetEffectParameter, ReturnValue) == 0x000014, "Member 'TslPostProcessEffect_SetEffectParameter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPostProcessEffect.SetMaterialBlendWeight
// 0x000C (0x000C - 0x0000)
struct TslPostProcessEffect_SetMaterialBlendWeight final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPostProcessEffect_SetMaterialBlendWeight) == 0x000004, "Wrong alignment on TslPostProcessEffect_SetMaterialBlendWeight");
static_assert(sizeof(TslPostProcessEffect_SetMaterialBlendWeight) == 0x00000C, "Wrong size on TslPostProcessEffect_SetMaterialBlendWeight");
static_assert(offsetof(TslPostProcessEffect_SetMaterialBlendWeight, idx) == 0x000000, "Member 'TslPostProcessEffect_SetMaterialBlendWeight::idx' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialBlendWeight, Value) == 0x000004, "Member 'TslPostProcessEffect_SetMaterialBlendWeight::Value' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialBlendWeight, ReturnValue) == 0x000008, "Member 'TslPostProcessEffect_SetMaterialBlendWeight::ReturnValue' has a wrong offset!");

// Function TslGame.TslPostProcessEffect.SetMaterialParameter
// 0x0018 (0x0018 - 0x0000)
struct TslPostProcessEffect_SetMaterialParameter final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPostProcessEffect_SetMaterialParameter) == 0x000004, "Wrong alignment on TslPostProcessEffect_SetMaterialParameter");
static_assert(sizeof(TslPostProcessEffect_SetMaterialParameter) == 0x000018, "Wrong size on TslPostProcessEffect_SetMaterialParameter");
static_assert(offsetof(TslPostProcessEffect_SetMaterialParameter, idx) == 0x000000, "Member 'TslPostProcessEffect_SetMaterialParameter::idx' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialParameter, ParameterName) == 0x000008, "Member 'TslPostProcessEffect_SetMaterialParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialParameter, Value) == 0x000010, "Member 'TslPostProcessEffect_SetMaterialParameter::Value' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialParameter, ReturnValue) == 0x000014, "Member 'TslPostProcessEffect_SetMaterialParameter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPostProcessEffect.SetMaterialVectorParameter
// 0x0028 (0x0028 - 0x0000)
struct TslPostProcessEffect_SetMaterialVectorParameter final
{
public:
	int32                                         idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslPostProcessEffect_SetMaterialVectorParameter) == 0x000004, "Wrong alignment on TslPostProcessEffect_SetMaterialVectorParameter");
static_assert(sizeof(TslPostProcessEffect_SetMaterialVectorParameter) == 0x000028, "Wrong size on TslPostProcessEffect_SetMaterialVectorParameter");
static_assert(offsetof(TslPostProcessEffect_SetMaterialVectorParameter, idx) == 0x000000, "Member 'TslPostProcessEffect_SetMaterialVectorParameter::idx' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialVectorParameter, ParameterName) == 0x000008, "Member 'TslPostProcessEffect_SetMaterialVectorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialVectorParameter, Value) == 0x000010, "Member 'TslPostProcessEffect_SetMaterialVectorParameter::Value' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_SetMaterialVectorParameter, ReturnValue) == 0x000020, "Member 'TslPostProcessEffect_SetMaterialVectorParameter::ReturnValue' has a wrong offset!");

// Function TslGame.TslPostProcessEffect.GetEffectParameter
// 0x0018 (0x0018 - 0x0000)
struct TslPostProcessEffect_GetEffectParameter final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslPostProcessEffect_GetEffectParameter) == 0x000008, "Wrong alignment on TslPostProcessEffect_GetEffectParameter");
static_assert(sizeof(TslPostProcessEffect_GetEffectParameter) == 0x000018, "Wrong size on TslPostProcessEffect_GetEffectParameter");
static_assert(offsetof(TslPostProcessEffect_GetEffectParameter, ParameterName) == 0x000000, "Member 'TslPostProcessEffect_GetEffectParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_GetEffectParameter, DefaultValue) == 0x000010, "Member 'TslPostProcessEffect_GetEffectParameter::DefaultValue' has a wrong offset!");
static_assert(offsetof(TslPostProcessEffect_GetEffectParameter, ReturnValue) == 0x000014, "Member 'TslPostProcessEffect_GetEffectParameter::ReturnValue' has a wrong offset!");

// Function TslGame.TslReactionDoorComponent.ClientTakeDamage
// 0x0018 (0x0018 - 0x0000)
struct TslReactionDoorComponent_ClientTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    HitLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Impulse;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslReactionDoorComponent_ClientTakeDamage) == 0x000004, "Wrong alignment on TslReactionDoorComponent_ClientTakeDamage");
static_assert(sizeof(TslReactionDoorComponent_ClientTakeDamage) == 0x000018, "Wrong size on TslReactionDoorComponent_ClientTakeDamage");
static_assert(offsetof(TslReactionDoorComponent_ClientTakeDamage, Damage) == 0x000000, "Member 'TslReactionDoorComponent_ClientTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TslReactionDoorComponent_ClientTakeDamage, HitLocation) == 0x000004, "Member 'TslReactionDoorComponent_ClientTakeDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(TslReactionDoorComponent_ClientTakeDamage, DamageRadius) == 0x000010, "Member 'TslReactionDoorComponent_ClientTakeDamage::DamageRadius' has a wrong offset!");
static_assert(offsetof(TslReactionDoorComponent_ClientTakeDamage, Impulse) == 0x000014, "Member 'TslReactionDoorComponent_ClientTakeDamage::Impulse' has a wrong offset!");

// Function TslGame.TslSceneCaptureWorld.InitWorld
// 0x0018 (0x0018 - 0x0000)
struct TslSceneCaptureWorld_InitWorld final
{
public:
	class UGameInstance*                          GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SceneCapturePackageName;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSceneCaptureWorld_InitWorld) == 0x000008, "Wrong alignment on TslSceneCaptureWorld_InitWorld");
static_assert(sizeof(TslSceneCaptureWorld_InitWorld) == 0x000018, "Wrong size on TslSceneCaptureWorld_InitWorld");
static_assert(offsetof(TslSceneCaptureWorld_InitWorld, GameInstance) == 0x000000, "Member 'TslSceneCaptureWorld_InitWorld::GameInstance' has a wrong offset!");
static_assert(offsetof(TslSceneCaptureWorld_InitWorld, SceneCapturePackageName) == 0x000008, "Member 'TslSceneCaptureWorld_InitWorld::SceneCapturePackageName' has a wrong offset!");

// Function TslGame.TslServerParticle.OnParticleFinish
// 0x0008 (0x0008 - 0x0000)
struct TslServerParticle_OnParticleFinish final
{
public:
	class UParticleSystemComponent*               PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslServerParticle_OnParticleFinish) == 0x000008, "Wrong alignment on TslServerParticle_OnParticleFinish");
static_assert(sizeof(TslServerParticle_OnParticleFinish) == 0x000008, "Wrong size on TslServerParticle_OnParticleFinish");
static_assert(offsetof(TslServerParticle_OnParticleFinish, PSystem) == 0x000000, "Member 'TslServerParticle_OnParticleFinish::PSystem' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnSaveCharacter
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_OnSaveCharacter final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnSaveCharacter) == 0x000001, "Wrong alignment on TslSpectatorPawn_OnSaveCharacter");
static_assert(sizeof(TslSpectatorPawn_OnSaveCharacter) == 0x000001, "Wrong size on TslSpectatorPawn_OnSaveCharacter");
static_assert(offsetof(TslSpectatorPawn_OnSaveCharacter, idx) == 0x000000, "Member 'TslSpectatorPawn_OnSaveCharacter::idx' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnSaveLocation
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_OnSaveLocation final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnSaveLocation) == 0x000001, "Wrong alignment on TslSpectatorPawn_OnSaveLocation");
static_assert(sizeof(TslSpectatorPawn_OnSaveLocation) == 0x000001, "Wrong size on TslSpectatorPawn_OnSaveLocation");
static_assert(offsetof(TslSpectatorPawn_OnSaveLocation, idx) == 0x000000, "Member 'TslSpectatorPawn_OnSaveLocation::idx' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnSetCharacter
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_OnSetCharacter final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnSetCharacter) == 0x000001, "Wrong alignment on TslSpectatorPawn_OnSetCharacter");
static_assert(sizeof(TslSpectatorPawn_OnSetCharacter) == 0x000001, "Wrong size on TslSpectatorPawn_OnSetCharacter");
static_assert(offsetof(TslSpectatorPawn_OnSetCharacter, idx) == 0x000000, "Member 'TslSpectatorPawn_OnSetCharacter::idx' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnSetCharacterSpec
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_OnSetCharacterSpec final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnSetCharacterSpec) == 0x000001, "Wrong alignment on TslSpectatorPawn_OnSetCharacterSpec");
static_assert(sizeof(TslSpectatorPawn_OnSetCharacterSpec) == 0x000001, "Wrong size on TslSpectatorPawn_OnSetCharacterSpec");
static_assert(offsetof(TslSpectatorPawn_OnSetCharacterSpec, idx) == 0x000000, "Member 'TslSpectatorPawn_OnSetCharacterSpec::idx' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnSetLocation
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_OnSetLocation final
{
public:
	uint8                                         idx;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnSetLocation) == 0x000001, "Wrong alignment on TslSpectatorPawn_OnSetLocation");
static_assert(sizeof(TslSpectatorPawn_OnSetLocation) == 0x000001, "Wrong size on TslSpectatorPawn_OnSetLocation");
static_assert(offsetof(TslSpectatorPawn_OnSetLocation, idx) == 0x000000, "Member 'TslSpectatorPawn_OnSetLocation::idx' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnThirdPersonActivated
// 0x0010 (0x0010 - 0x0000)
struct TslSpectatorPawn_OnThirdPersonActivated final
{
public:
	class UActorComponent*                        InThirdPersonCamera;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslSpectatorPawn_OnThirdPersonActivated) == 0x000008, "Wrong alignment on TslSpectatorPawn_OnThirdPersonActivated");
static_assert(sizeof(TslSpectatorPawn_OnThirdPersonActivated) == 0x000010, "Wrong size on TslSpectatorPawn_OnThirdPersonActivated");
static_assert(offsetof(TslSpectatorPawn_OnThirdPersonActivated, InThirdPersonCamera) == 0x000000, "Member 'TslSpectatorPawn_OnThirdPersonActivated::InThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(TslSpectatorPawn_OnThirdPersonActivated, bReset) == 0x000008, "Member 'TslSpectatorPawn_OnThirdPersonActivated::bReset' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.OnViewTargetUpdate
// 0x0008 (0x0008 - 0x0000)
struct TslSpectatorPawn_OnViewTargetUpdate final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_OnViewTargetUpdate) == 0x000008, "Wrong alignment on TslSpectatorPawn_OnViewTargetUpdate");
static_assert(sizeof(TslSpectatorPawn_OnViewTargetUpdate) == 0x000008, "Wrong size on TslSpectatorPawn_OnViewTargetUpdate");
static_assert(offsetof(TslSpectatorPawn_OnViewTargetUpdate, NewViewTarget) == 0x000000, "Member 'TslSpectatorPawn_OnViewTargetUpdate::NewViewTarget' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.SetFreeCamBattleLocation
// 0x0018 (0x0018 - 0x0000)
struct TslSpectatorPawn_SetFreeCamBattleLocation final
{
public:
	struct FVector                                HitterLoc;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AttackedLoc;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_SetFreeCamBattleLocation) == 0x000004, "Wrong alignment on TslSpectatorPawn_SetFreeCamBattleLocation");
static_assert(sizeof(TslSpectatorPawn_SetFreeCamBattleLocation) == 0x000018, "Wrong size on TslSpectatorPawn_SetFreeCamBattleLocation");
static_assert(offsetof(TslSpectatorPawn_SetFreeCamBattleLocation, HitterLoc) == 0x000000, "Member 'TslSpectatorPawn_SetFreeCamBattleLocation::HitterLoc' has a wrong offset!");
static_assert(offsetof(TslSpectatorPawn_SetFreeCamBattleLocation, AttackedLoc) == 0x00000C, "Member 'TslSpectatorPawn_SetFreeCamBattleLocation::AttackedLoc' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.SetObserverCameraMode
// 0x0018 (0x0018 - 0x0000)
struct TslSpectatorPawn_SetObserverCameraMode final
{
public:
	EObserverCameraMode                           NewCameraMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NewViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlend;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslSpectatorPawn_SetObserverCameraMode) == 0x000008, "Wrong alignment on TslSpectatorPawn_SetObserverCameraMode");
static_assert(sizeof(TslSpectatorPawn_SetObserverCameraMode) == 0x000018, "Wrong size on TslSpectatorPawn_SetObserverCameraMode");
static_assert(offsetof(TslSpectatorPawn_SetObserverCameraMode, NewCameraMode) == 0x000000, "Member 'TslSpectatorPawn_SetObserverCameraMode::NewCameraMode' has a wrong offset!");
static_assert(offsetof(TslSpectatorPawn_SetObserverCameraMode, NewViewTarget) == 0x000008, "Member 'TslSpectatorPawn_SetObserverCameraMode::NewViewTarget' has a wrong offset!");
static_assert(offsetof(TslSpectatorPawn_SetObserverCameraMode, IsBlend) == 0x000010, "Member 'TslSpectatorPawn_SetObserverCameraMode::IsBlend' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.SetPlayerCamera
// 0x0008 (0x0008 - 0x0000)
struct TslSpectatorPawn_SetPlayerCamera final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_SetPlayerCamera) == 0x000008, "Wrong alignment on TslSpectatorPawn_SetPlayerCamera");
static_assert(sizeof(TslSpectatorPawn_SetPlayerCamera) == 0x000008, "Wrong size on TslSpectatorPawn_SetPlayerCamera");
static_assert(offsetof(TslSpectatorPawn_SetPlayerCamera, NewViewTarget) == 0x000000, "Member 'TslSpectatorPawn_SetPlayerCamera::NewViewTarget' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.SetShowPlayerInfoDistance
// 0x0004 (0x0004 - 0x0000)
struct TslSpectatorPawn_SetShowPlayerInfoDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_SetShowPlayerInfoDistance) == 0x000004, "Wrong alignment on TslSpectatorPawn_SetShowPlayerInfoDistance");
static_assert(sizeof(TslSpectatorPawn_SetShowPlayerInfoDistance) == 0x000004, "Wrong size on TslSpectatorPawn_SetShowPlayerInfoDistance");
static_assert(offsetof(TslSpectatorPawn_SetShowPlayerInfoDistance, Distance) == 0x000000, "Member 'TslSpectatorPawn_SetShowPlayerInfoDistance::Distance' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetCameraMode
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_GetCameraMode final
{
public:
	EObserverCameraMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetCameraMode) == 0x000001, "Wrong alignment on TslSpectatorPawn_GetCameraMode");
static_assert(sizeof(TslSpectatorPawn_GetCameraMode) == 0x000001, "Wrong size on TslSpectatorPawn_GetCameraMode");
static_assert(offsetof(TslSpectatorPawn_GetCameraMode, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetCameraMode::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetLastSpectatedCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslSpectatorPawn_GetLastSpectatedCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetLastSpectatedCharacter) == 0x000008, "Wrong alignment on TslSpectatorPawn_GetLastSpectatedCharacter");
static_assert(sizeof(TslSpectatorPawn_GetLastSpectatedCharacter) == 0x000008, "Wrong size on TslSpectatorPawn_GetLastSpectatedCharacter");
static_assert(offsetof(TslSpectatorPawn_GetLastSpectatedCharacter, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetLastSpectatedCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetObserverTagShow
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_GetObserverTagShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetObserverTagShow) == 0x000001, "Wrong alignment on TslSpectatorPawn_GetObserverTagShow");
static_assert(sizeof(TslSpectatorPawn_GetObserverTagShow) == 0x000001, "Wrong size on TslSpectatorPawn_GetObserverTagShow");
static_assert(offsetof(TslSpectatorPawn_GetObserverTagShow, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetObserverTagShow::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetShowPlayerInfoDistance
// 0x0004 (0x0004 - 0x0000)
struct TslSpectatorPawn_GetShowPlayerInfoDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetShowPlayerInfoDistance) == 0x000004, "Wrong alignment on TslSpectatorPawn_GetShowPlayerInfoDistance");
static_assert(sizeof(TslSpectatorPawn_GetShowPlayerInfoDistance) == 0x000004, "Wrong size on TslSpectatorPawn_GetShowPlayerInfoDistance");
static_assert(offsetof(TslSpectatorPawn_GetShowPlayerInfoDistance, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetShowPlayerInfoDistance::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetSpectableCarePackageItem
// 0x0008 (0x0008 - 0x0000)
struct TslSpectatorPawn_GetSpectableCarePackageItem final
{
public:
	class ACarePackageItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetSpectableCarePackageItem) == 0x000008, "Wrong alignment on TslSpectatorPawn_GetSpectableCarePackageItem");
static_assert(sizeof(TslSpectatorPawn_GetSpectableCarePackageItem) == 0x000008, "Wrong size on TslSpectatorPawn_GetSpectableCarePackageItem");
static_assert(offsetof(TslSpectatorPawn_GetSpectableCarePackageItem, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetSpectableCarePackageItem::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.GetSpectatableCharacter
// 0x0008 (0x0008 - 0x0000)
struct TslSpectatorPawn_GetSpectatableCharacter final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_GetSpectatableCharacter) == 0x000008, "Wrong alignment on TslSpectatorPawn_GetSpectatableCharacter");
static_assert(sizeof(TslSpectatorPawn_GetSpectatableCharacter) == 0x000008, "Wrong size on TslSpectatorPawn_GetSpectatableCharacter");
static_assert(offsetof(TslSpectatorPawn_GetSpectatableCharacter, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_GetSpectatableCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslSpectatorPawn.IsObserverTagWeaponShow
// 0x0001 (0x0001 - 0x0000)
struct TslSpectatorPawn_IsObserverTagWeaponShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslSpectatorPawn_IsObserverTagWeaponShow) == 0x000001, "Wrong alignment on TslSpectatorPawn_IsObserverTagWeaponShow");
static_assert(sizeof(TslSpectatorPawn_IsObserverTagWeaponShow) == 0x000001, "Wrong size on TslSpectatorPawn_IsObserverTagWeaponShow");
static_assert(offsetof(TslSpectatorPawn_IsObserverTagWeaponShow, ReturnValue) == 0x000000, "Member 'TslSpectatorPawn_IsObserverTagWeaponShow::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ApplyDamage
// 0x0030 (0x0030 - 0x0000)
struct TslStatics_ApplyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x0028(0x0004)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ApplyDamage) == 0x000008, "Wrong alignment on TslStatics_ApplyDamage");
static_assert(sizeof(TslStatics_ApplyDamage) == 0x000030, "Wrong size on TslStatics_ApplyDamage");
static_assert(offsetof(TslStatics_ApplyDamage, DamagedActor) == 0x000000, "Member 'TslStatics_ApplyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyDamage, BaseDamage) == 0x000008, "Member 'TslStatics_ApplyDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyDamage, EventInstigator) == 0x000010, "Member 'TslStatics_ApplyDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyDamage, DamageCauser) == 0x000018, "Member 'TslStatics_ApplyDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyDamage, DamageTypeClass) == 0x000020, "Member 'TslStatics_ApplyDamage::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyDamage, AttackId) == 0x000028, "Member 'TslStatics_ApplyDamage::AttackId' has a wrong offset!");

// Function TslGame.TslStatics.ApplyRadialDamage
// 0x0058 (0x0058 - 0x0000)
struct TslStatics_ApplyRadialDamage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x0038(0x0004)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsTargetDestructible;                             // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoFullDamage;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplode;                                          // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0053(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ApplyRadialDamage) == 0x000008, "Wrong alignment on TslStatics_ApplyRadialDamage");
static_assert(sizeof(TslStatics_ApplyRadialDamage) == 0x000058, "Wrong size on TslStatics_ApplyRadialDamage");
static_assert(offsetof(TslStatics_ApplyRadialDamage, WorldContextObject) == 0x000000, "Member 'TslStatics_ApplyRadialDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, BaseDamage) == 0x000008, "Member 'TslStatics_ApplyRadialDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, Origin) == 0x00000C, "Member 'TslStatics_ApplyRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, DamageRadius) == 0x000018, "Member 'TslStatics_ApplyRadialDamage::DamageRadius' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, DamageTypeClass) == 0x000020, "Member 'TslStatics_ApplyRadialDamage::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, IgnoreActors) == 0x000028, "Member 'TslStatics_ApplyRadialDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, AttackId) == 0x000038, "Member 'TslStatics_ApplyRadialDamage::AttackId' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, bIsTargetDestructible) == 0x00003C, "Member 'TslStatics_ApplyRadialDamage::bIsTargetDestructible' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, DamageCauser) == 0x000040, "Member 'TslStatics_ApplyRadialDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, InstigatedByController) == 0x000048, "Member 'TslStatics_ApplyRadialDamage::InstigatedByController' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, bDoFullDamage) == 0x000050, "Member 'TslStatics_ApplyRadialDamage::bDoFullDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, DamagePreventionChannel) == 0x000051, "Member 'TslStatics_ApplyRadialDamage::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, bExplode) == 0x000052, "Member 'TslStatics_ApplyRadialDamage::bExplode' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamage, ReturnValue) == 0x000053, "Member 'TslStatics_ApplyRadialDamage::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ApplyRadialDamageWithCurve
// 0x0060 (0x0060 - 0x0000)
struct TslStatics_ApplyRadialDamageWithCurve final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCurveFloat*                      DamageCurve;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x0040(0x0004)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsTargetDestructible;                             // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplode;                                          // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ApplyRadialDamageWithCurve) == 0x000008, "Wrong alignment on TslStatics_ApplyRadialDamageWithCurve");
static_assert(sizeof(TslStatics_ApplyRadialDamageWithCurve) == 0x000060, "Wrong size on TslStatics_ApplyRadialDamageWithCurve");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, WorldContextObject) == 0x000000, "Member 'TslStatics_ApplyRadialDamageWithCurve::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, BaseDamage) == 0x000008, "Member 'TslStatics_ApplyRadialDamageWithCurve::BaseDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, Origin) == 0x00000C, "Member 'TslStatics_ApplyRadialDamageWithCurve::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, DamageRadius) == 0x000018, "Member 'TslStatics_ApplyRadialDamageWithCurve::DamageRadius' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, DamageCurve) == 0x000020, "Member 'TslStatics_ApplyRadialDamageWithCurve::DamageCurve' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, DamageTypeClass) == 0x000028, "Member 'TslStatics_ApplyRadialDamageWithCurve::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, IgnoreActors) == 0x000030, "Member 'TslStatics_ApplyRadialDamageWithCurve::IgnoreActors' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, AttackId) == 0x000040, "Member 'TslStatics_ApplyRadialDamageWithCurve::AttackId' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, bIsTargetDestructible) == 0x000044, "Member 'TslStatics_ApplyRadialDamageWithCurve::bIsTargetDestructible' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, DamageCauser) == 0x000048, "Member 'TslStatics_ApplyRadialDamageWithCurve::DamageCauser' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, InstigatedByController) == 0x000050, "Member 'TslStatics_ApplyRadialDamageWithCurve::InstigatedByController' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, DamagePreventionChannel) == 0x000058, "Member 'TslStatics_ApplyRadialDamageWithCurve::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, bExplode) == 0x000059, "Member 'TslStatics_ApplyRadialDamageWithCurve::bExplode' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithCurve, ReturnValue) == 0x00005A, "Member 'TslStatics_ApplyRadialDamageWithCurve::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ApplyRadialDamageWithFalloff
// 0x0060 (0x0060 - 0x0000)
struct TslStatics_ApplyRadialDamageWithFalloff final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DamageInnerRadius;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x0040(0x0004)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsTargetDestructible;                             // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplode;                                          // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ApplyRadialDamageWithFalloff) == 0x000008, "Wrong alignment on TslStatics_ApplyRadialDamageWithFalloff");
static_assert(sizeof(TslStatics_ApplyRadialDamageWithFalloff) == 0x000060, "Wrong size on TslStatics_ApplyRadialDamageWithFalloff");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, WorldContextObject) == 0x000000, "Member 'TslStatics_ApplyRadialDamageWithFalloff::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, BaseDamage) == 0x000008, "Member 'TslStatics_ApplyRadialDamageWithFalloff::BaseDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, MinimumDamage) == 0x00000C, "Member 'TslStatics_ApplyRadialDamageWithFalloff::MinimumDamage' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, Origin) == 0x000010, "Member 'TslStatics_ApplyRadialDamageWithFalloff::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamageInnerRadius) == 0x00001C, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamageOuterRadius) == 0x000020, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamageFalloff) == 0x000024, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamageFalloff' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamageTypeClass) == 0x000028, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, IgnoreActors) == 0x000030, "Member 'TslStatics_ApplyRadialDamageWithFalloff::IgnoreActors' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, AttackId) == 0x000040, "Member 'TslStatics_ApplyRadialDamageWithFalloff::AttackId' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, bIsTargetDestructible) == 0x000044, "Member 'TslStatics_ApplyRadialDamageWithFalloff::bIsTargetDestructible' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamageCauser) == 0x000048, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamageCauser' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, InstigatedByController) == 0x000050, "Member 'TslStatics_ApplyRadialDamageWithFalloff::InstigatedByController' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, DamagePreventionChannel) == 0x000058, "Member 'TslStatics_ApplyRadialDamageWithFalloff::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, bExplode) == 0x000059, "Member 'TslStatics_ApplyRadialDamageWithFalloff::bExplode' has a wrong offset!");
static_assert(offsetof(TslStatics_ApplyRadialDamageWithFalloff, ReturnValue) == 0x00005A, "Member 'TslStatics_ApplyRadialDamageWithFalloff::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ConeVolumeLineTraceMulti
// 0x0038 (0x0038 - 0x0000)
struct TslStatics_ConeVolumeLineTraceMulti final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutHitPoints;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SamplingNum;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfConeAngle;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayLength;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ConeVolumeLineTraceMulti) == 0x000008, "Wrong alignment on TslStatics_ConeVolumeLineTraceMulti");
static_assert(sizeof(TslStatics_ConeVolumeLineTraceMulti) == 0x000038, "Wrong size on TslStatics_ConeVolumeLineTraceMulti");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, WorldContextObject) == 0x000000, "Member 'TslStatics_ConeVolumeLineTraceMulti::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, OutHitPoints) == 0x000008, "Member 'TslStatics_ConeVolumeLineTraceMulti::OutHitPoints' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, Origin) == 0x000018, "Member 'TslStatics_ConeVolumeLineTraceMulti::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, SamplingNum) == 0x000024, "Member 'TslStatics_ConeVolumeLineTraceMulti::SamplingNum' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, HalfConeAngle) == 0x000028, "Member 'TslStatics_ConeVolumeLineTraceMulti::HalfConeAngle' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, RayLength) == 0x00002C, "Member 'TslStatics_ConeVolumeLineTraceMulti::RayLength' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceMulti, ReturnValue) == 0x000030, "Member 'TslStatics_ConeVolumeLineTraceMulti::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ConeVolumeLineTraceSingle
// 0x0030 (0x0030 - 0x0000)
struct TslStatics_ConeVolumeLineTraceSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitPoint;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HalfConeAngle;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayLength;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ConeVolumeLineTraceSingle) == 0x000008, "Wrong alignment on TslStatics_ConeVolumeLineTraceSingle");
static_assert(sizeof(TslStatics_ConeVolumeLineTraceSingle) == 0x000030, "Wrong size on TslStatics_ConeVolumeLineTraceSingle");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, WorldContextObject) == 0x000000, "Member 'TslStatics_ConeVolumeLineTraceSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, OutHitPoint) == 0x000008, "Member 'TslStatics_ConeVolumeLineTraceSingle::OutHitPoint' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, Origin) == 0x000014, "Member 'TslStatics_ConeVolumeLineTraceSingle::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, HalfConeAngle) == 0x000020, "Member 'TslStatics_ConeVolumeLineTraceSingle::HalfConeAngle' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, RayLength) == 0x000024, "Member 'TslStatics_ConeVolumeLineTraceSingle::RayLength' has a wrong offset!");
static_assert(offsetof(TslStatics_ConeVolumeLineTraceSingle, ReturnValue) == 0x000028, "Member 'TslStatics_ConeVolumeLineTraceSingle::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetBluezonePosition
// 0x0018 (0x0018 - 0x0000)
struct TslStatics_GetBluezonePosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetBluezonePosition) == 0x000008, "Wrong alignment on TslStatics_GetBluezonePosition");
static_assert(sizeof(TslStatics_GetBluezonePosition) == 0x000018, "Wrong size on TslStatics_GetBluezonePosition");
static_assert(offsetof(TslStatics_GetBluezonePosition, WorldContextObject) == 0x000000, "Member 'TslStatics_GetBluezonePosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetBluezonePosition, ReturnValue) == 0x000008, "Member 'TslStatics_GetBluezonePosition::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetBluezoneRadius
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetBluezoneRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetBluezoneRadius) == 0x000008, "Wrong alignment on TslStatics_GetBluezoneRadius");
static_assert(sizeof(TslStatics_GetBluezoneRadius) == 0x000010, "Wrong size on TslStatics_GetBluezoneRadius");
static_assert(offsetof(TslStatics_GetBluezoneRadius, WorldContextObject) == 0x000000, "Member 'TslStatics_GetBluezoneRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetBluezoneRadius, ReturnValue) == 0x000008, "Member 'TslStatics_GetBluezoneRadius::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetConsoleValue
// 0x0030 (0x0030 - 0x0000)
struct TslStatics_GetConsoleValue final
{
public:
	class FString                                 ConsloeName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValueFloat;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValueInt;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutValueString;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetConsoleValue) == 0x000008, "Wrong alignment on TslStatics_GetConsoleValue");
static_assert(sizeof(TslStatics_GetConsoleValue) == 0x000030, "Wrong size on TslStatics_GetConsoleValue");
static_assert(offsetof(TslStatics_GetConsoleValue, ConsloeName) == 0x000000, "Member 'TslStatics_GetConsoleValue::ConsloeName' has a wrong offset!");
static_assert(offsetof(TslStatics_GetConsoleValue, OutValueFloat) == 0x000010, "Member 'TslStatics_GetConsoleValue::OutValueFloat' has a wrong offset!");
static_assert(offsetof(TslStatics_GetConsoleValue, OutValueInt) == 0x000014, "Member 'TslStatics_GetConsoleValue::OutValueInt' has a wrong offset!");
static_assert(offsetof(TslStatics_GetConsoleValue, OutValueString) == 0x000018, "Member 'TslStatics_GetConsoleValue::OutValueString' has a wrong offset!");
static_assert(offsetof(TslStatics_GetConsoleValue, ReturnValue) == 0x000028, "Member 'TslStatics_GetConsoleValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetFullGameVersion
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetFullGameVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetFullGameVersion) == 0x000008, "Wrong alignment on TslStatics_GetFullGameVersion");
static_assert(sizeof(TslStatics_GetFullGameVersion) == 0x000010, "Wrong size on TslStatics_GetFullGameVersion");
static_assert(offsetof(TslStatics_GetFullGameVersion, ReturnValue) == 0x000000, "Member 'TslStatics_GetFullGameVersion::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetGameVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetGameVersion) == 0x000008, "Wrong alignment on TslStatics_GetGameVersion");
static_assert(sizeof(TslStatics_GetGameVersion) == 0x000010, "Wrong size on TslStatics_GetGameVersion");
static_assert(offsetof(TslStatics_GetGameVersion, ReturnValue) == 0x000000, "Member 'TslStatics_GetGameVersion::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetNextPlayzonePosition
// 0x0018 (0x0018 - 0x0000)
struct TslStatics_GetNextPlayzonePosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetNextPlayzonePosition) == 0x000008, "Wrong alignment on TslStatics_GetNextPlayzonePosition");
static_assert(sizeof(TslStatics_GetNextPlayzonePosition) == 0x000018, "Wrong size on TslStatics_GetNextPlayzonePosition");
static_assert(offsetof(TslStatics_GetNextPlayzonePosition, WorldContextObject) == 0x000000, "Member 'TslStatics_GetNextPlayzonePosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetNextPlayzonePosition, ReturnValue) == 0x000008, "Member 'TslStatics_GetNextPlayzonePosition::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetNextPlayzoneRadius
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetNextPlayzoneRadius final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetNextPlayzoneRadius) == 0x000008, "Wrong alignment on TslStatics_GetNextPlayzoneRadius");
static_assert(sizeof(TslStatics_GetNextPlayzoneRadius) == 0x000010, "Wrong size on TslStatics_GetNextPlayzoneRadius");
static_assert(offsetof(TslStatics_GetNextPlayzoneRadius, WorldContextObject) == 0x000000, "Member 'TslStatics_GetNextPlayzoneRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetNextPlayzoneRadius, ReturnValue) == 0x000008, "Member 'TslStatics_GetNextPlayzoneRadius::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetServerLocation
// 0x0018 (0x0018 - 0x0000)
struct TslStatics_GetServerLocation final
{
public:
	const class UObject*                          ActorOrComponent;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_GetServerLocation) == 0x000008, "Wrong alignment on TslStatics_GetServerLocation");
static_assert(sizeof(TslStatics_GetServerLocation) == 0x000018, "Wrong size on TslStatics_GetServerLocation");
static_assert(offsetof(TslStatics_GetServerLocation, ActorOrComponent) == 0x000000, "Member 'TslStatics_GetServerLocation::ActorOrComponent' has a wrong offset!");
static_assert(offsetof(TslStatics_GetServerLocation, ReturnValue) == 0x000008, "Member 'TslStatics_GetServerLocation::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetSimplePhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetSimplePhysicalMaterial final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetSimplePhysicalMaterial) == 0x000008, "Wrong alignment on TslStatics_GetSimplePhysicalMaterial");
static_assert(sizeof(TslStatics_GetSimplePhysicalMaterial) == 0x000010, "Wrong size on TslStatics_GetSimplePhysicalMaterial");
static_assert(offsetof(TslStatics_GetSimplePhysicalMaterial, PrimitiveComponent) == 0x000000, "Member 'TslStatics_GetSimplePhysicalMaterial::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(TslStatics_GetSimplePhysicalMaterial, ReturnValue) == 0x000008, "Member 'TslStatics_GetSimplePhysicalMaterial::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetTslCharacter
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetTslCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetTslCharacter) == 0x000008, "Wrong alignment on TslStatics_GetTslCharacter");
static_assert(sizeof(TslStatics_GetTslCharacter) == 0x000010, "Wrong size on TslStatics_GetTslCharacter");
static_assert(offsetof(TslStatics_GetTslCharacter, WorldContextObject) == 0x000000, "Member 'TslStatics_GetTslCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetTslCharacter, ReturnValue) == 0x000008, "Member 'TslStatics_GetTslCharacter::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetTslGameState
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetTslGameState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslGameState*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetTslGameState) == 0x000008, "Wrong alignment on TslStatics_GetTslGameState");
static_assert(sizeof(TslStatics_GetTslGameState) == 0x000010, "Wrong size on TslStatics_GetTslGameState");
static_assert(offsetof(TslStatics_GetTslGameState, WorldContextObject) == 0x000000, "Member 'TslStatics_GetTslGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_GetTslGameState, ReturnValue) == 0x000008, "Member 'TslStatics_GetTslGameState::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetTslPlatformName
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetTslPlatformName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetTslPlatformName) == 0x000008, "Wrong alignment on TslStatics_GetTslPlatformName");
static_assert(sizeof(TslStatics_GetTslPlatformName) == 0x000010, "Wrong size on TslStatics_GetTslPlatformName");
static_assert(offsetof(TslStatics_GetTslPlatformName, ReturnValue) == 0x000000, "Member 'TslStatics_GetTslPlatformName::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetTslPlayerController
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetTslPlayerController final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATslPlayerController*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetTslPlayerController) == 0x000008, "Wrong alignment on TslStatics_GetTslPlayerController");
static_assert(sizeof(TslStatics_GetTslPlayerController) == 0x000010, "Wrong size on TslStatics_GetTslPlayerController");
static_assert(offsetof(TslStatics_GetTslPlayerController, Pawn) == 0x000000, "Member 'TslStatics_GetTslPlayerController::Pawn' has a wrong offset!");
static_assert(offsetof(TslStatics_GetTslPlayerController, ReturnValue) == 0x000008, "Member 'TslStatics_GetTslPlayerController::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetVehicleCommonComponent
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetVehicleCommonComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTslVehicleCommonComponent*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetVehicleCommonComponent) == 0x000008, "Wrong alignment on TslStatics_GetVehicleCommonComponent");
static_assert(sizeof(TslStatics_GetVehicleCommonComponent) == 0x000010, "Wrong size on TslStatics_GetVehicleCommonComponent");
static_assert(offsetof(TslStatics_GetVehicleCommonComponent, Actor) == 0x000000, "Member 'TslStatics_GetVehicleCommonComponent::Actor' has a wrong offset!");
static_assert(offsetof(TslStatics_GetVehicleCommonComponent, ReturnValue) == 0x000008, "Member 'TslStatics_GetVehicleCommonComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetVehicleSeatComponent
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_GetVehicleSeatComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTslVehicleSeatComponent*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetVehicleSeatComponent) == 0x000008, "Wrong alignment on TslStatics_GetVehicleSeatComponent");
static_assert(sizeof(TslStatics_GetVehicleSeatComponent) == 0x000010, "Wrong size on TslStatics_GetVehicleSeatComponent");
static_assert(offsetof(TslStatics_GetVehicleSeatComponent, Actor) == 0x000000, "Member 'TslStatics_GetVehicleSeatComponent::Actor' has a wrong offset!");
static_assert(offsetof(TslStatics_GetVehicleSeatComponent, ReturnValue) == 0x000008, "Member 'TslStatics_GetVehicleSeatComponent::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.GetWaterSurfaceHeight
// 0x0018 (0x0018 - 0x0000)
struct TslStatics_GetWaterSurfaceHeight final
{
public:
	const class APhysicsVolume*                   PhysicsVolume;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_GetWaterSurfaceHeight) == 0x000008, "Wrong alignment on TslStatics_GetWaterSurfaceHeight");
static_assert(sizeof(TslStatics_GetWaterSurfaceHeight) == 0x000018, "Wrong size on TslStatics_GetWaterSurfaceHeight");
static_assert(offsetof(TslStatics_GetWaterSurfaceHeight, PhysicsVolume) == 0x000000, "Member 'TslStatics_GetWaterSurfaceHeight::PhysicsVolume' has a wrong offset!");
static_assert(offsetof(TslStatics_GetWaterSurfaceHeight, CurLocation) == 0x000008, "Member 'TslStatics_GetWaterSurfaceHeight::CurLocation' has a wrong offset!");
static_assert(offsetof(TslStatics_GetWaterSurfaceHeight, ReturnValue) == 0x000014, "Member 'TslStatics_GetWaterSurfaceHeight::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsClientActor
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_IsClientActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_IsClientActor) == 0x000008, "Wrong alignment on TslStatics_IsClientActor");
static_assert(sizeof(TslStatics_IsClientActor) == 0x000010, "Wrong size on TslStatics_IsClientActor");
static_assert(offsetof(TslStatics_IsClientActor, Actor) == 0x000000, "Member 'TslStatics_IsClientActor::Actor' has a wrong offset!");
static_assert(offsetof(TslStatics_IsClientActor, ReturnValue) == 0x000008, "Member 'TslStatics_IsClientActor::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsEditor) == 0x000001, "Wrong alignment on TslStatics_IsEditor");
static_assert(sizeof(TslStatics_IsEditor) == 0x000001, "Wrong size on TslStatics_IsEditor");
static_assert(offsetof(TslStatics_IsEditor, ReturnValue) == 0x000000, "Member 'TslStatics_IsEditor::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsESports
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsESports final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsESports) == 0x000001, "Wrong alignment on TslStatics_IsESports");
static_assert(sizeof(TslStatics_IsESports) == 0x000001, "Wrong size on TslStatics_IsESports");
static_assert(offsetof(TslStatics_IsESports, ReturnValue) == 0x000000, "Member 'TslStatics_IsESports::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsForChineseLicensing
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsForChineseLicensing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsForChineseLicensing) == 0x000001, "Wrong alignment on TslStatics_IsForChineseLicensing");
static_assert(sizeof(TslStatics_IsForChineseLicensing) == 0x000001, "Wrong size on TslStatics_IsForChineseLicensing");
static_assert(offsetof(TslStatics_IsForChineseLicensing, ReturnValue) == 0x000000, "Member 'TslStatics_IsForChineseLicensing::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsForKoreanRating
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsForKoreanRating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsForKoreanRating) == 0x000001, "Wrong alignment on TslStatics_IsForKoreanRating");
static_assert(sizeof(TslStatics_IsForKoreanRating) == 0x000001, "Wrong size on TslStatics_IsForKoreanRating");
static_assert(offsetof(TslStatics_IsForKoreanRating, ReturnValue) == 0x000000, "Member 'TslStatics_IsForKoreanRating::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsGamepadConnected
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsGamepadConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsGamepadConnected) == 0x000001, "Wrong alignment on TslStatics_IsGamepadConnected");
static_assert(sizeof(TslStatics_IsGamepadConnected) == 0x000001, "Wrong size on TslStatics_IsGamepadConnected");
static_assert(offsetof(TslStatics_IsGamepadConnected, ReturnValue) == 0x000000, "Member 'TslStatics_IsGamepadConnected::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsLastInputGamepad
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_IsLastInputGamepad final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_IsLastInputGamepad) == 0x000008, "Wrong alignment on TslStatics_IsLastInputGamepad");
static_assert(sizeof(TslStatics_IsLastInputGamepad) == 0x000010, "Wrong size on TslStatics_IsLastInputGamepad");
static_assert(offsetof(TslStatics_IsLastInputGamepad, WorldContextObject) == 0x000000, "Member 'TslStatics_IsLastInputGamepad::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_IsLastInputGamepad, ReturnValue) == 0x000008, "Member 'TslStatics_IsLastInputGamepad::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsMapFullyLoaded
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_IsMapFullyLoaded final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_IsMapFullyLoaded) == 0x000008, "Wrong alignment on TslStatics_IsMapFullyLoaded");
static_assert(sizeof(TslStatics_IsMapFullyLoaded) == 0x000010, "Wrong size on TslStatics_IsMapFullyLoaded");
static_assert(offsetof(TslStatics_IsMapFullyLoaded, World) == 0x000000, "Member 'TslStatics_IsMapFullyLoaded::World' has a wrong offset!");
static_assert(offsetof(TslStatics_IsMapFullyLoaded, ReturnValue) == 0x000008, "Member 'TslStatics_IsMapFullyLoaded::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsServerActor
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_IsServerActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_IsServerActor) == 0x000008, "Wrong alignment on TslStatics_IsServerActor");
static_assert(sizeof(TslStatics_IsServerActor) == 0x000010, "Wrong size on TslStatics_IsServerActor");
static_assert(offsetof(TslStatics_IsServerActor, Actor) == 0x000000, "Member 'TslStatics_IsServerActor::Actor' has a wrong offset!");
static_assert(offsetof(TslStatics_IsServerActor, ReturnValue) == 0x000008, "Member 'TslStatics_IsServerActor::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.IsShipping
// 0x0001 (0x0001 - 0x0000)
struct TslStatics_IsShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_IsShipping) == 0x000001, "Wrong alignment on TslStatics_IsShipping");
static_assert(sizeof(TslStatics_IsShipping) == 0x000001, "Wrong size on TslStatics_IsShipping");
static_assert(offsetof(TslStatics_IsShipping, ReturnValue) == 0x000000, "Member 'TslStatics_IsShipping::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.LineSphereIntersection
// 0x0044 (0x0044 - 0x0000)
struct TslStatics_LineSphereIntersection final
{
public:
	struct FVector                                Intersection1;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Intersection2;                                     // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Origion;                                           // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_LineSphereIntersection) == 0x000004, "Wrong alignment on TslStatics_LineSphereIntersection");
static_assert(sizeof(TslStatics_LineSphereIntersection) == 0x000044, "Wrong size on TslStatics_LineSphereIntersection");
static_assert(offsetof(TslStatics_LineSphereIntersection, Intersection1) == 0x000000, "Member 'TslStatics_LineSphereIntersection::Intersection1' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, Intersection2) == 0x00000C, "Member 'TslStatics_LineSphereIntersection::Intersection2' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, Center) == 0x000018, "Member 'TslStatics_LineSphereIntersection::Center' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, Origion) == 0x000024, "Member 'TslStatics_LineSphereIntersection::Origion' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, Direction) == 0x000030, "Member 'TslStatics_LineSphereIntersection::Direction' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, Radius) == 0x00003C, "Member 'TslStatics_LineSphereIntersection::Radius' has a wrong offset!");
static_assert(offsetof(TslStatics_LineSphereIntersection, ReturnValue) == 0x000040, "Member 'TslStatics_LineSphereIntersection::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.LocalPositionToServer
// 0x0020 (0x0020 - 0x0000)
struct TslStatics_LocalPositionToServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Local;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_LocalPositionToServer) == 0x000008, "Wrong alignment on TslStatics_LocalPositionToServer");
static_assert(sizeof(TslStatics_LocalPositionToServer) == 0x000020, "Wrong size on TslStatics_LocalPositionToServer");
static_assert(offsetof(TslStatics_LocalPositionToServer, WorldContextObject) == 0x000000, "Member 'TslStatics_LocalPositionToServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_LocalPositionToServer, Local) == 0x000008, "Member 'TslStatics_LocalPositionToServer::Local' has a wrong offset!");
static_assert(offsetof(TslStatics_LocalPositionToServer, ReturnValue) == 0x000014, "Member 'TslStatics_LocalPositionToServer::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.PhysicalSurfaceToName
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_PhysicalSurfaceToName final
{
public:
	EPhysicalSurface                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_PhysicalSurfaceToName) == 0x000004, "Wrong alignment on TslStatics_PhysicalSurfaceToName");
static_assert(sizeof(TslStatics_PhysicalSurfaceToName) == 0x000010, "Wrong size on TslStatics_PhysicalSurfaceToName");
static_assert(offsetof(TslStatics_PhysicalSurfaceToName, Type) == 0x000000, "Member 'TslStatics_PhysicalSurfaceToName::Type' has a wrong offset!");
static_assert(offsetof(TslStatics_PhysicalSurfaceToName, ReturnValue) == 0x000008, "Member 'TslStatics_PhysicalSurfaceToName::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.PhysicalSurfaceToString
// 0x0018 (0x0018 - 0x0000)
struct TslStatics_PhysicalSurfaceToString final
{
public:
	EPhysicalSurface                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_PhysicalSurfaceToString) == 0x000008, "Wrong alignment on TslStatics_PhysicalSurfaceToString");
static_assert(sizeof(TslStatics_PhysicalSurfaceToString) == 0x000018, "Wrong size on TslStatics_PhysicalSurfaceToString");
static_assert(offsetof(TslStatics_PhysicalSurfaceToString, Type) == 0x000000, "Member 'TslStatics_PhysicalSurfaceToString::Type' has a wrong offset!");
static_assert(offsetof(TslStatics_PhysicalSurfaceToString, ReturnValue) == 0x000008, "Member 'TslStatics_PhysicalSurfaceToString::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.PredictProjectilePathBox
// 0x0118 (0x0118 - 0x0000)
struct TslStatics_PredictProjectilePathBox final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0008(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathPositions;                                  // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                OutLastTraceDestination;                           // 0x00A0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x00AC(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x00B8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTracePath;                                        // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectileBox;                                     // 0x00C8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x00D8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x00F0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x0108(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0114(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_PredictProjectilePathBox) == 0x000008, "Wrong alignment on TslStatics_PredictProjectilePathBox");
static_assert(sizeof(TslStatics_PredictProjectilePathBox) == 0x000118, "Wrong size on TslStatics_PredictProjectilePathBox");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, WorldContextObject) == 0x000000, "Member 'TslStatics_PredictProjectilePathBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, OutHit) == 0x000008, "Member 'TslStatics_PredictProjectilePathBox::OutHit' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, OutPathPositions) == 0x000090, "Member 'TslStatics_PredictProjectilePathBox::OutPathPositions' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, OutLastTraceDestination) == 0x0000A0, "Member 'TslStatics_PredictProjectilePathBox::OutLastTraceDestination' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, StartPos) == 0x0000AC, "Member 'TslStatics_PredictProjectilePathBox::StartPos' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, LaunchVelocity) == 0x0000B8, "Member 'TslStatics_PredictProjectilePathBox::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, bTracePath) == 0x0000C4, "Member 'TslStatics_PredictProjectilePathBox::bTracePath' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, ProjectileBox) == 0x0000C8, "Member 'TslStatics_PredictProjectilePathBox::ProjectileBox' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, ObjectTypes) == 0x0000D8, "Member 'TslStatics_PredictProjectilePathBox::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, bTraceComplex) == 0x0000E8, "Member 'TslStatics_PredictProjectilePathBox::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, ActorsToIgnore) == 0x0000F0, "Member 'TslStatics_PredictProjectilePathBox::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, DrawDebugType) == 0x000100, "Member 'TslStatics_PredictProjectilePathBox::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, DrawDebugTime) == 0x000104, "Member 'TslStatics_PredictProjectilePathBox::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, SimFrequency) == 0x000108, "Member 'TslStatics_PredictProjectilePathBox::SimFrequency' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, MaxSimTime) == 0x00010C, "Member 'TslStatics_PredictProjectilePathBox::MaxSimTime' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, OverrideGravityZ) == 0x000110, "Member 'TslStatics_PredictProjectilePathBox::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathBox, ReturnValue) == 0x000114, "Member 'TslStatics_PredictProjectilePathBox::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.PredictProjectilePathCapsule
// 0x0118 (0x0118 - 0x0000)
struct TslStatics_PredictProjectilePathCapsule final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0008(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathPositions;                                  // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                OutLastTraceDestination;                           // 0x00A0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x00AC(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x00B8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTracePath;                                        // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectileBox;                                     // 0x00C8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x00D8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x00F0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x0108(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0114(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_PredictProjectilePathCapsule) == 0x000008, "Wrong alignment on TslStatics_PredictProjectilePathCapsule");
static_assert(sizeof(TslStatics_PredictProjectilePathCapsule) == 0x000118, "Wrong size on TslStatics_PredictProjectilePathCapsule");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, WorldContextObject) == 0x000000, "Member 'TslStatics_PredictProjectilePathCapsule::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, OutHit) == 0x000008, "Member 'TslStatics_PredictProjectilePathCapsule::OutHit' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, OutPathPositions) == 0x000090, "Member 'TslStatics_PredictProjectilePathCapsule::OutPathPositions' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, OutLastTraceDestination) == 0x0000A0, "Member 'TslStatics_PredictProjectilePathCapsule::OutLastTraceDestination' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, StartPos) == 0x0000AC, "Member 'TslStatics_PredictProjectilePathCapsule::StartPos' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, LaunchVelocity) == 0x0000B8, "Member 'TslStatics_PredictProjectilePathCapsule::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, bTracePath) == 0x0000C4, "Member 'TslStatics_PredictProjectilePathCapsule::bTracePath' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, ProjectileBox) == 0x0000C8, "Member 'TslStatics_PredictProjectilePathCapsule::ProjectileBox' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, ObjectTypes) == 0x0000D8, "Member 'TslStatics_PredictProjectilePathCapsule::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, bTraceComplex) == 0x0000E8, "Member 'TslStatics_PredictProjectilePathCapsule::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, ActorsToIgnore) == 0x0000F0, "Member 'TslStatics_PredictProjectilePathCapsule::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, DrawDebugType) == 0x000100, "Member 'TslStatics_PredictProjectilePathCapsule::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, DrawDebugTime) == 0x000104, "Member 'TslStatics_PredictProjectilePathCapsule::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, SimFrequency) == 0x000108, "Member 'TslStatics_PredictProjectilePathCapsule::SimFrequency' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, MaxSimTime) == 0x00010C, "Member 'TslStatics_PredictProjectilePathCapsule::MaxSimTime' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, OverrideGravityZ) == 0x000110, "Member 'TslStatics_PredictProjectilePathCapsule::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(TslStatics_PredictProjectilePathCapsule, ReturnValue) == 0x000114, "Member 'TslStatics_PredictProjectilePathCapsule::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ProjectPointsToHighFloor
// 0x0030 (0x0030 - 0x0000)
struct TslStatics_ProjectPointsToHighFloor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOutHit;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AroundLength;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayLength;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_ProjectPointsToHighFloor) == 0x000008, "Wrong alignment on TslStatics_ProjectPointsToHighFloor");
static_assert(sizeof(TslStatics_ProjectPointsToHighFloor) == 0x000030, "Wrong size on TslStatics_ProjectPointsToHighFloor");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, WorldContextObject) == 0x000000, "Member 'TslStatics_ProjectPointsToHighFloor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, Origin) == 0x000008, "Member 'TslStatics_ProjectPointsToHighFloor::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, bOutHit) == 0x000014, "Member 'TslStatics_ProjectPointsToHighFloor::bOutHit' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, AroundLength) == 0x000018, "Member 'TslStatics_ProjectPointsToHighFloor::AroundLength' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, RayLength) == 0x00001C, "Member 'TslStatics_ProjectPointsToHighFloor::RayLength' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointsToHighFloor, ReturnValue) == 0x000020, "Member 'TslStatics_ProjectPointsToHighFloor::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ProjectPointToFloor
// 0x0028 (0x0028 - 0x0000)
struct TslStatics_ProjectPointToFloor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOutHit;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_ProjectPointToFloor) == 0x000008, "Wrong alignment on TslStatics_ProjectPointToFloor");
static_assert(sizeof(TslStatics_ProjectPointToFloor) == 0x000028, "Wrong size on TslStatics_ProjectPointToFloor");
static_assert(offsetof(TslStatics_ProjectPointToFloor, WorldContextObject) == 0x000000, "Member 'TslStatics_ProjectPointToFloor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointToFloor, Origin) == 0x000008, "Member 'TslStatics_ProjectPointToFloor::Origin' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointToFloor, bOutHit) == 0x000014, "Member 'TslStatics_ProjectPointToFloor::bOutHit' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointToFloor, Length) == 0x000018, "Member 'TslStatics_ProjectPointToFloor::Length' has a wrong offset!");
static_assert(offsetof(TslStatics_ProjectPointToFloor, ReturnValue) == 0x00001C, "Member 'TslStatics_ProjectPointToFloor::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ReleaseMouseCaptureFromPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TslStatics_ReleaseMouseCaptureFromPlayerController final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_ReleaseMouseCaptureFromPlayerController) == 0x000008, "Wrong alignment on TslStatics_ReleaseMouseCaptureFromPlayerController");
static_assert(sizeof(TslStatics_ReleaseMouseCaptureFromPlayerController) == 0x000008, "Wrong size on TslStatics_ReleaseMouseCaptureFromPlayerController");
static_assert(offsetof(TslStatics_ReleaseMouseCaptureFromPlayerController, PlayerController) == 0x000000, "Member 'TslStatics_ReleaseMouseCaptureFromPlayerController::PlayerController' has a wrong offset!");

// Function TslGame.TslStatics.SafeDivide_FloatFloat
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_SafeDivide_FloatFloat final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DivideByZeroValue;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_SafeDivide_FloatFloat) == 0x000004, "Wrong alignment on TslStatics_SafeDivide_FloatFloat");
static_assert(sizeof(TslStatics_SafeDivide_FloatFloat) == 0x000010, "Wrong size on TslStatics_SafeDivide_FloatFloat");
static_assert(offsetof(TslStatics_SafeDivide_FloatFloat, A) == 0x000000, "Member 'TslStatics_SafeDivide_FloatFloat::A' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_FloatFloat, B) == 0x000004, "Member 'TslStatics_SafeDivide_FloatFloat::B' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_FloatFloat, DivideByZeroValue) == 0x000008, "Member 'TslStatics_SafeDivide_FloatFloat::DivideByZeroValue' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_FloatFloat, ReturnValue) == 0x00000C, "Member 'TslStatics_SafeDivide_FloatFloat::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.SafeDivide_IntInt
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_SafeDivide_IntInt final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivideByZeroValue;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_SafeDivide_IntInt) == 0x000004, "Wrong alignment on TslStatics_SafeDivide_IntInt");
static_assert(sizeof(TslStatics_SafeDivide_IntInt) == 0x000010, "Wrong size on TslStatics_SafeDivide_IntInt");
static_assert(offsetof(TslStatics_SafeDivide_IntInt, A) == 0x000000, "Member 'TslStatics_SafeDivide_IntInt::A' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_IntInt, B) == 0x000004, "Member 'TslStatics_SafeDivide_IntInt::B' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_IntInt, DivideByZeroValue) == 0x000008, "Member 'TslStatics_SafeDivide_IntInt::DivideByZeroValue' has a wrong offset!");
static_assert(offsetof(TslStatics_SafeDivide_IntInt, ReturnValue) == 0x00000C, "Member 'TslStatics_SafeDivide_IntInt::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.ServerPositionToLocal
// 0x0020 (0x0020 - 0x0000)
struct TslStatics_ServerPositionToLocal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Server;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_ServerPositionToLocal) == 0x000008, "Wrong alignment on TslStatics_ServerPositionToLocal");
static_assert(sizeof(TslStatics_ServerPositionToLocal) == 0x000020, "Wrong size on TslStatics_ServerPositionToLocal");
static_assert(offsetof(TslStatics_ServerPositionToLocal, WorldContextObject) == 0x000000, "Member 'TslStatics_ServerPositionToLocal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TslStatics_ServerPositionToLocal, Server) == 0x000008, "Member 'TslStatics_ServerPositionToLocal::Server' has a wrong offset!");
static_assert(offsetof(TslStatics_ServerPositionToLocal, ReturnValue) == 0x000014, "Member 'TslStatics_ServerPositionToLocal::ReturnValue' has a wrong offset!");

// Function TslGame.TslStatics.SetAnimationAkRTPC
// 0x0020 (0x0020 - 0x0000)
struct TslStatics_SetAnimationAkRTPC final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPCName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTPCValue;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_SetAnimationAkRTPC) == 0x000008, "Wrong alignment on TslStatics_SetAnimationAkRTPC");
static_assert(sizeof(TslStatics_SetAnimationAkRTPC) == 0x000020, "Wrong size on TslStatics_SetAnimationAkRTPC");
static_assert(offsetof(TslStatics_SetAnimationAkRTPC, Character) == 0x000000, "Member 'TslStatics_SetAnimationAkRTPC::Character' has a wrong offset!");
static_assert(offsetof(TslStatics_SetAnimationAkRTPC, RTPCName) == 0x000008, "Member 'TslStatics_SetAnimationAkRTPC::RTPCName' has a wrong offset!");
static_assert(offsetof(TslStatics_SetAnimationAkRTPC, RTPCValue) == 0x000018, "Member 'TslStatics_SetAnimationAkRTPC::RTPCValue' has a wrong offset!");

// Function TslGame.TslStatics.SetAnimationAkSwitch
// 0x0028 (0x0028 - 0x0000)
struct TslStatics_SetAnimationAkSwitch final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchGroup;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_SetAnimationAkSwitch) == 0x000008, "Wrong alignment on TslStatics_SetAnimationAkSwitch");
static_assert(sizeof(TslStatics_SetAnimationAkSwitch) == 0x000028, "Wrong size on TslStatics_SetAnimationAkSwitch");
static_assert(offsetof(TslStatics_SetAnimationAkSwitch, Character) == 0x000000, "Member 'TslStatics_SetAnimationAkSwitch::Character' has a wrong offset!");
static_assert(offsetof(TslStatics_SetAnimationAkSwitch, SwitchGroup) == 0x000008, "Member 'TslStatics_SetAnimationAkSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(TslStatics_SetAnimationAkSwitch, SwitchState) == 0x000018, "Member 'TslStatics_SetAnimationAkSwitch::SwitchState' has a wrong offset!");

// Function TslGame.TslStatics.SetWorldOrigin
// 0x0008 (0x0008 - 0x0000)
struct TslStatics_SetWorldOrigin final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_SetWorldOrigin) == 0x000008, "Wrong alignment on TslStatics_SetWorldOrigin");
static_assert(sizeof(TslStatics_SetWorldOrigin) == 0x000008, "Wrong size on TslStatics_SetWorldOrigin");
static_assert(offsetof(TslStatics_SetWorldOrigin, Controller) == 0x000000, "Member 'TslStatics_SetWorldOrigin::Controller' has a wrong offset!");

// Function TslGame.TslStatics.SetWorldOriginByDistance
// 0x0010 (0x0010 - 0x0000)
struct TslStatics_SetWorldOriginByDistance final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XYDistanceToShift;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslStatics_SetWorldOriginByDistance) == 0x000008, "Wrong alignment on TslStatics_SetWorldOriginByDistance");
static_assert(sizeof(TslStatics_SetWorldOriginByDistance) == 0x000010, "Wrong size on TslStatics_SetWorldOriginByDistance");
static_assert(offsetof(TslStatics_SetWorldOriginByDistance, Controller) == 0x000000, "Member 'TslStatics_SetWorldOriginByDistance::Controller' has a wrong offset!");
static_assert(offsetof(TslStatics_SetWorldOriginByDistance, XYDistanceToShift) == 0x000008, "Member 'TslStatics_SetWorldOriginByDistance::XYDistanceToShift' has a wrong offset!");

// Function TslGame.TslStatics.UseHighPrecisionMouseMovement
// 0x0008 (0x0008 - 0x0000)
struct TslStatics_UseHighPrecisionMouseMovement final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslStatics_UseHighPrecisionMouseMovement) == 0x000008, "Wrong alignment on TslStatics_UseHighPrecisionMouseMovement");
static_assert(sizeof(TslStatics_UseHighPrecisionMouseMovement) == 0x000008, "Wrong size on TslStatics_UseHighPrecisionMouseMovement");
static_assert(offsetof(TslStatics_UseHighPrecisionMouseMovement, PlayerController) == 0x000000, "Member 'TslStatics_UseHighPrecisionMouseMovement::PlayerController' has a wrong offset!");

// Function TslGame.LifeGaugeBaseWidget.OnNotifyHeal
// 0x000C (0x000C - 0x0000)
struct LifeGaugeBaseWidget_OnNotifyHeal final
{
public:
	float                                         StartHealth;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoalHealth;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeGaugeBaseWidget_OnNotifyHeal) == 0x000004, "Wrong alignment on LifeGaugeBaseWidget_OnNotifyHeal");
static_assert(sizeof(LifeGaugeBaseWidget_OnNotifyHeal) == 0x00000C, "Wrong size on LifeGaugeBaseWidget_OnNotifyHeal");
static_assert(offsetof(LifeGaugeBaseWidget_OnNotifyHeal, StartHealth) == 0x000000, "Member 'LifeGaugeBaseWidget_OnNotifyHeal::StartHealth' has a wrong offset!");
static_assert(offsetof(LifeGaugeBaseWidget_OnNotifyHeal, GoalHealth) == 0x000004, "Member 'LifeGaugeBaseWidget_OnNotifyHeal::GoalHealth' has a wrong offset!");
static_assert(offsetof(LifeGaugeBaseWidget_OnNotifyHeal, MaxHealth) == 0x000008, "Member 'LifeGaugeBaseWidget_OnNotifyHeal::MaxHealth' has a wrong offset!");

// Function TslGame.LifeGaugeBaseWidget.OnNotifyHit
// 0x0008 (0x0008 - 0x0000)
struct LifeGaugeBaseWidget_OnNotifyHit final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageTypeCategory                           DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeGaugeBaseWidget_OnNotifyHit) == 0x000004, "Wrong alignment on LifeGaugeBaseWidget_OnNotifyHit");
static_assert(sizeof(LifeGaugeBaseWidget_OnNotifyHit) == 0x000008, "Wrong size on LifeGaugeBaseWidget_OnNotifyHit");
static_assert(offsetof(LifeGaugeBaseWidget_OnNotifyHit, Damage) == 0x000000, "Member 'LifeGaugeBaseWidget_OnNotifyHit::Damage' has a wrong offset!");
static_assert(offsetof(LifeGaugeBaseWidget_OnNotifyHit, DamageType) == 0x000004, "Member 'LifeGaugeBaseWidget_OnNotifyHit::DamageType' has a wrong offset!");

// Function TslGame.MapCarePackageItemIconBaseWidget.OnButtonDown
// 0x0158 (0x0158 - 0x0000)
struct MapCarePackageItemIconBaseWidget_OnButtonDown final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapCarePackageItemIconBaseWidget_OnButtonDown) == 0x000008, "Wrong alignment on MapCarePackageItemIconBaseWidget_OnButtonDown");
static_assert(sizeof(MapCarePackageItemIconBaseWidget_OnButtonDown) == 0x000158, "Wrong size on MapCarePackageItemIconBaseWidget_OnButtonDown");
static_assert(offsetof(MapCarePackageItemIconBaseWidget_OnButtonDown, Geometry) == 0x000000, "Member 'MapCarePackageItemIconBaseWidget_OnButtonDown::Geometry' has a wrong offset!");
static_assert(offsetof(MapCarePackageItemIconBaseWidget_OnButtonDown, MouseEvent) == 0x000038, "Member 'MapCarePackageItemIconBaseWidget_OnButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(MapCarePackageItemIconBaseWidget_OnButtonDown, ReturnValue) == 0x0000B0, "Member 'MapCarePackageItemIconBaseWidget_OnButtonDown::ReturnValue' has a wrong offset!");

// Function TslGame.MapCharacterIconBaseWidget.OnButtonDown
// 0x0158 (0x0158 - 0x0000)
struct MapCharacterIconBaseWidget_OnButtonDown final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapCharacterIconBaseWidget_OnButtonDown) == 0x000008, "Wrong alignment on MapCharacterIconBaseWidget_OnButtonDown");
static_assert(sizeof(MapCharacterIconBaseWidget_OnButtonDown) == 0x000158, "Wrong size on MapCharacterIconBaseWidget_OnButtonDown");
static_assert(offsetof(MapCharacterIconBaseWidget_OnButtonDown, Geometry) == 0x000000, "Member 'MapCharacterIconBaseWidget_OnButtonDown::Geometry' has a wrong offset!");
static_assert(offsetof(MapCharacterIconBaseWidget_OnButtonDown, MouseEvent) == 0x000038, "Member 'MapCharacterIconBaseWidget_OnButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(MapCharacterIconBaseWidget_OnButtonDown, ReturnValue) == 0x0000B0, "Member 'MapCharacterIconBaseWidget_OnButtonDown::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.AddCenter_UC
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_AddCenter_UC final
{
public:
	struct FVector2D                              Offset_UC;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_AddCenter_UC) == 0x000004, "Wrong alignment on MapGridWidget_AddCenter_UC");
static_assert(sizeof(MapGridWidget_AddCenter_UC) == 0x000008, "Wrong size on MapGridWidget_AddCenter_UC");
static_assert(offsetof(MapGridWidget_AddCenter_UC, Offset_UC) == 0x000000, "Member 'MapGridWidget_AddCenter_UC::Offset_UC' has a wrong offset!");

// Function TslGame.MapGridWidget.ClampPosition_UC
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_ClampPosition_UC final
{
public:
	struct FVector2D                              Positon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_ClampPosition_UC) == 0x000004, "Wrong alignment on MapGridWidget_ClampPosition_UC");
static_assert(sizeof(MapGridWidget_ClampPosition_UC) == 0x000010, "Wrong size on MapGridWidget_ClampPosition_UC");
static_assert(offsetof(MapGridWidget_ClampPosition_UC, Positon) == 0x000000, "Member 'MapGridWidget_ClampPosition_UC::Positon' has a wrong offset!");
static_assert(offsetof(MapGridWidget_ClampPosition_UC, ReturnValue) == 0x000008, "Member 'MapGridWidget_ClampPosition_UC::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.ClampPositionByWidgetSize_UC
// 0x0018 (0x0018 - 0x0000)
struct MapGridWidget_ClampPositionByWidgetSize_UC final
{
public:
	struct FVector2D                              Positon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_ClampPositionByWidgetSize_UC) == 0x000004, "Wrong alignment on MapGridWidget_ClampPositionByWidgetSize_UC");
static_assert(sizeof(MapGridWidget_ClampPositionByWidgetSize_UC) == 0x000018, "Wrong size on MapGridWidget_ClampPositionByWidgetSize_UC");
static_assert(offsetof(MapGridWidget_ClampPositionByWidgetSize_UC, Positon) == 0x000000, "Member 'MapGridWidget_ClampPositionByWidgetSize_UC::Positon' has a wrong offset!");
static_assert(offsetof(MapGridWidget_ClampPositionByWidgetSize_UC, WidgetSize) == 0x000008, "Member 'MapGridWidget_ClampPositionByWidgetSize_UC::WidgetSize' has a wrong offset!");
static_assert(offsetof(MapGridWidget_ClampPositionByWidgetSize_UC, ReturnValue) == 0x000010, "Member 'MapGridWidget_ClampPositionByWidgetSize_UC::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.CursorUCtoCenterMC
// 0x0014 (0x0014 - 0x0000)
struct MapGridWidget_CursorUCtoCenterMC final
{
public:
	struct FVector2D                              UC;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Offest_MC;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapGridWidget_CursorUCtoCenterMC) == 0x000004, "Wrong alignment on MapGridWidget_CursorUCtoCenterMC");
static_assert(sizeof(MapGridWidget_CursorUCtoCenterMC) == 0x000014, "Wrong size on MapGridWidget_CursorUCtoCenterMC");
static_assert(offsetof(MapGridWidget_CursorUCtoCenterMC, UC) == 0x000000, "Member 'MapGridWidget_CursorUCtoCenterMC::UC' has a wrong offset!");
static_assert(offsetof(MapGridWidget_CursorUCtoCenterMC, Offest_MC) == 0x000008, "Member 'MapGridWidget_CursorUCtoCenterMC::Offest_MC' has a wrong offset!");
static_assert(offsetof(MapGridWidget_CursorUCtoCenterMC, bUpdate) == 0x000010, "Member 'MapGridWidget_CursorUCtoCenterMC::bUpdate' has a wrong offset!");

// Function TslGame.MapGridWidget.GetMapImageWigetSizeAndImageOffset
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_GetMapImageWigetSizeAndImageOffset final
{
public:
	struct FVector2D                              WidgetSize;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageOffset;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetMapImageWigetSizeAndImageOffset) == 0x000004, "Wrong alignment on MapGridWidget_GetMapImageWigetSizeAndImageOffset");
static_assert(sizeof(MapGridWidget_GetMapImageWigetSizeAndImageOffset) == 0x000010, "Wrong size on MapGridWidget_GetMapImageWigetSizeAndImageOffset");
static_assert(offsetof(MapGridWidget_GetMapImageWigetSizeAndImageOffset, WidgetSize) == 0x000000, "Member 'MapGridWidget_GetMapImageWigetSizeAndImageOffset::WidgetSize' has a wrong offset!");
static_assert(offsetof(MapGridWidget_GetMapImageWigetSizeAndImageOffset, ImageOffset) == 0x000008, "Member 'MapGridWidget_GetMapImageWigetSizeAndImageOffset::ImageOffset' has a wrong offset!");

// Function TslGame.MapGridWidget.OnMapCarePackageItemIconClicked
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_OnMapCarePackageItemIconClicked final
{
public:
	class UMapCarePackageItemIconBaseWidget*      MapIconWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_OnMapCarePackageItemIconClicked) == 0x000008, "Wrong alignment on MapGridWidget_OnMapCarePackageItemIconClicked");
static_assert(sizeof(MapGridWidget_OnMapCarePackageItemIconClicked) == 0x000008, "Wrong size on MapGridWidget_OnMapCarePackageItemIconClicked");
static_assert(offsetof(MapGridWidget_OnMapCarePackageItemIconClicked, MapIconWidget) == 0x000000, "Member 'MapGridWidget_OnMapCarePackageItemIconClicked::MapIconWidget' has a wrong offset!");

// Function TslGame.MapGridWidget.OnMapIconClicked
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_OnMapIconClicked final
{
public:
	class UMapCharacterIconBaseWidget*            MapIconWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_OnMapIconClicked) == 0x000008, "Wrong alignment on MapGridWidget_OnMapIconClicked");
static_assert(sizeof(MapGridWidget_OnMapIconClicked) == 0x000008, "Wrong size on MapGridWidget_OnMapIconClicked");
static_assert(offsetof(MapGridWidget_OnMapIconClicked, MapIconWidget) == 0x000000, "Member 'MapGridWidget_OnMapIconClicked::MapIconWidget' has a wrong offset!");

// Function TslGame.MapGridWidget.SetCenter_MC
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_SetCenter_MC final
{
public:
	struct FVector2D                              Center;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_SetCenter_MC) == 0x000004, "Wrong alignment on MapGridWidget_SetCenter_MC");
static_assert(sizeof(MapGridWidget_SetCenter_MC) == 0x000008, "Wrong size on MapGridWidget_SetCenter_MC");
static_assert(offsetof(MapGridWidget_SetCenter_MC, Center) == 0x000000, "Member 'MapGridWidget_SetCenter_MC::Center' has a wrong offset!");

// Function TslGame.MapGridWidget.SetCharacterIconPositionAndRotation_UC
// 0x000C (0x000C - 0x0000)
struct MapGridWidget_SetCharacterIconPositionAndRotation_UC final
{
public:
	struct FVector2D                              Pos_UC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_SetCharacterIconPositionAndRotation_UC) == 0x000004, "Wrong alignment on MapGridWidget_SetCharacterIconPositionAndRotation_UC");
static_assert(sizeof(MapGridWidget_SetCharacterIconPositionAndRotation_UC) == 0x00000C, "Wrong size on MapGridWidget_SetCharacterIconPositionAndRotation_UC");
static_assert(offsetof(MapGridWidget_SetCharacterIconPositionAndRotation_UC, Pos_UC) == 0x000000, "Member 'MapGridWidget_SetCharacterIconPositionAndRotation_UC::Pos_UC' has a wrong offset!");
static_assert(offsetof(MapGridWidget_SetCharacterIconPositionAndRotation_UC, Angle) == 0x000008, "Member 'MapGridWidget_SetCharacterIconPositionAndRotation_UC::Angle' has a wrong offset!");

// Function TslGame.MapGridWidget.SetImageBrush
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_SetImageBrush final
{
public:
	class UMaterialInstanceDynamic*               NewMatInst;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_SetImageBrush) == 0x000008, "Wrong alignment on MapGridWidget_SetImageBrush");
static_assert(sizeof(MapGridWidget_SetImageBrush) == 0x000008, "Wrong size on MapGridWidget_SetImageBrush");
static_assert(offsetof(MapGridWidget_SetImageBrush, NewMatInst) == 0x000000, "Member 'MapGridWidget_SetImageBrush::NewMatInst' has a wrong offset!");

// Function TslGame.MapGridWidget.SetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct MapGridWidget_SetZoomLevel final
{
public:
	float                                         NewZoomLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_SetZoomLevel) == 0x000004, "Wrong alignment on MapGridWidget_SetZoomLevel");
static_assert(sizeof(MapGridWidget_SetZoomLevel) == 0x000004, "Wrong size on MapGridWidget_SetZoomLevel");
static_assert(offsetof(MapGridWidget_SetZoomLevel, NewZoomLevel) == 0x000000, "Member 'MapGridWidget_SetZoomLevel::NewZoomLevel' has a wrong offset!");

// Function TslGame.MapGridWidget.UpdateRectangleViewByWidgetSize
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_UpdateRectangleViewByWidgetSize final
{
public:
	struct FVector2D                              WidgetSize;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_UpdateRectangleViewByWidgetSize) == 0x000004, "Wrong alignment on MapGridWidget_UpdateRectangleViewByWidgetSize");
static_assert(sizeof(MapGridWidget_UpdateRectangleViewByWidgetSize) == 0x000008, "Wrong size on MapGridWidget_UpdateRectangleViewByWidgetSize");
static_assert(offsetof(MapGridWidget_UpdateRectangleViewByWidgetSize, WidgetSize) == 0x000000, "Member 'MapGridWidget_UpdateRectangleViewByWidgetSize::WidgetSize' has a wrong offset!");

// Function TslGame.MapGridWidget.UpdateWidgetSize_UC
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_UpdateWidgetSize_UC final
{
public:
	struct FVector2D                              WidgetSize;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_UpdateWidgetSize_UC) == 0x000004, "Wrong alignment on MapGridWidget_UpdateWidgetSize_UC");
static_assert(sizeof(MapGridWidget_UpdateWidgetSize_UC) == 0x000008, "Wrong size on MapGridWidget_UpdateWidgetSize_UC");
static_assert(offsetof(MapGridWidget_UpdateWidgetSize_UC, WidgetSize) == 0x000000, "Member 'MapGridWidget_UpdateWidgetSize_UC::WidgetSize' has a wrong offset!");

// Function TslGame.MapGridWidget.UpdateZoomAndWidgetSize
// 0x000C (0x000C - 0x0000)
struct MapGridWidget_UpdateZoomAndWidgetSize final
{
public:
	float                                         Zoom;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_UpdateZoomAndWidgetSize) == 0x000004, "Wrong alignment on MapGridWidget_UpdateZoomAndWidgetSize");
static_assert(sizeof(MapGridWidget_UpdateZoomAndWidgetSize) == 0x00000C, "Wrong size on MapGridWidget_UpdateZoomAndWidgetSize");
static_assert(offsetof(MapGridWidget_UpdateZoomAndWidgetSize, Zoom) == 0x000000, "Member 'MapGridWidget_UpdateZoomAndWidgetSize::Zoom' has a wrong offset!");
static_assert(offsetof(MapGridWidget_UpdateZoomAndWidgetSize, WidgetSize) == 0x000004, "Member 'MapGridWidget_UpdateZoomAndWidgetSize::WidgetSize' has a wrong offset!");

// Function TslGame.MapGridWidget.DrawMarker_UC
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_DrawMarker_UC final
{
public:
	struct FVector2D                              MarkerCenter_UC;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_DrawMarker_UC) == 0x000004, "Wrong alignment on MapGridWidget_DrawMarker_UC");
static_assert(sizeof(MapGridWidget_DrawMarker_UC) == 0x000008, "Wrong size on MapGridWidget_DrawMarker_UC");
static_assert(offsetof(MapGridWidget_DrawMarker_UC, MarkerCenter_UC) == 0x000000, "Member 'MapGridWidget_DrawMarker_UC::MarkerCenter_UC' has a wrong offset!");

// Function TslGame.MapGridWidget.DrawRedZone_UC
// 0x000C (0x000C - 0x0000)
struct MapGridWidget_DrawRedZone_UC final
{
public:
	struct FVector2D                              Center_UC;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius_UC;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_DrawRedZone_UC) == 0x000004, "Wrong alignment on MapGridWidget_DrawRedZone_UC");
static_assert(sizeof(MapGridWidget_DrawRedZone_UC) == 0x00000C, "Wrong size on MapGridWidget_DrawRedZone_UC");
static_assert(offsetof(MapGridWidget_DrawRedZone_UC, Center_UC) == 0x000000, "Member 'MapGridWidget_DrawRedZone_UC::Center_UC' has a wrong offset!");
static_assert(offsetof(MapGridWidget_DrawRedZone_UC, Radius_UC) == 0x000008, "Member 'MapGridWidget_DrawRedZone_UC::Radius_UC' has a wrong offset!");

// Function TslGame.MapGridWidget.GetAlignment
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_GetAlignment final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetAlignment) == 0x000004, "Wrong alignment on MapGridWidget_GetAlignment");
static_assert(sizeof(MapGridWidget_GetAlignment) == 0x000008, "Wrong size on MapGridWidget_GetAlignment");
static_assert(offsetof(MapGridWidget_GetAlignment, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetAlignment::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetCharacterGridTextHorizental
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_GetCharacterGridTextHorizental final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetCharacterGridTextHorizental) == 0x000008, "Wrong alignment on MapGridWidget_GetCharacterGridTextHorizental");
static_assert(sizeof(MapGridWidget_GetCharacterGridTextHorizental) == 0x000010, "Wrong size on MapGridWidget_GetCharacterGridTextHorizental");
static_assert(offsetof(MapGridWidget_GetCharacterGridTextHorizental, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetCharacterGridTextHorizental::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetCharacterGridVertical
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_GetCharacterGridVertical final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetCharacterGridVertical) == 0x000008, "Wrong alignment on MapGridWidget_GetCharacterGridVertical");
static_assert(sizeof(MapGridWidget_GetCharacterGridVertical) == 0x000010, "Wrong size on MapGridWidget_GetCharacterGridVertical");
static_assert(offsetof(MapGridWidget_GetCharacterGridVertical, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetCharacterGridVertical::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetLocalMousePosition
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_GetLocalMousePosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetLocalMousePosition) == 0x000004, "Wrong alignment on MapGridWidget_GetLocalMousePosition");
static_assert(sizeof(MapGridWidget_GetLocalMousePosition) == 0x000008, "Wrong size on MapGridWidget_GetLocalMousePosition");
static_assert(offsetof(MapGridWidget_GetLocalMousePosition, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetLocalMousePosition::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetScreenOffset
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_GetScreenOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetScreenOffset) == 0x000004, "Wrong alignment on MapGridWidget_GetScreenOffset");
static_assert(sizeof(MapGridWidget_GetScreenOffset) == 0x000008, "Wrong size on MapGridWidget_GetScreenOffset");
static_assert(offsetof(MapGridWidget_GetScreenOffset, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetScreenOffset::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetWidgetPosition
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_GetWidgetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetWidgetPosition) == 0x000004, "Wrong alignment on MapGridWidget_GetWidgetPosition");
static_assert(sizeof(MapGridWidget_GetWidgetPosition) == 0x000008, "Wrong size on MapGridWidget_GetWidgetPosition");
static_assert(offsetof(MapGridWidget_GetWidgetPosition, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetWidgetPosition::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetWidgetSize
// 0x0008 (0x0008 - 0x0000)
struct MapGridWidget_GetWidgetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetWidgetSize) == 0x000004, "Wrong alignment on MapGridWidget_GetWidgetSize");
static_assert(sizeof(MapGridWidget_GetWidgetSize) == 0x000008, "Wrong size on MapGridWidget_GetWidgetSize");
static_assert(offsetof(MapGridWidget_GetWidgetSize, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetWidgetSize::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.GetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct MapGridWidget_GetZoomLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_GetZoomLevel) == 0x000004, "Wrong alignment on MapGridWidget_GetZoomLevel");
static_assert(sizeof(MapGridWidget_GetZoomLevel) == 0x000004, "Wrong size on MapGridWidget_GetZoomLevel");
static_assert(offsetof(MapGridWidget_GetZoomLevel, ReturnValue) == 0x000000, "Member 'MapGridWidget_GetZoomLevel::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.IsMouseInMarker
// 0x0001 (0x0001 - 0x0000)
struct MapGridWidget_IsMouseInMarker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_IsMouseInMarker) == 0x000001, "Wrong alignment on MapGridWidget_IsMouseInMarker");
static_assert(sizeof(MapGridWidget_IsMouseInMarker) == 0x000001, "Wrong size on MapGridWidget_IsMouseInMarker");
static_assert(offsetof(MapGridWidget_IsMouseInMarker, ReturnValue) == 0x000000, "Member 'MapGridWidget_IsMouseInMarker::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.MCtoUC
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_MCtoUC final
{
public:
	struct FVector2D                              MapCoord;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_MCtoUC) == 0x000004, "Wrong alignment on MapGridWidget_MCtoUC");
static_assert(sizeof(MapGridWidget_MCtoUC) == 0x000010, "Wrong size on MapGridWidget_MCtoUC");
static_assert(offsetof(MapGridWidget_MCtoUC, MapCoord) == 0x000000, "Member 'MapGridWidget_MCtoUC::MapCoord' has a wrong offset!");
static_assert(offsetof(MapGridWidget_MCtoUC, ReturnValue) == 0x000008, "Member 'MapGridWidget_MCtoUC::ReturnValue' has a wrong offset!");

// Function TslGame.MapGridWidget.UCtoMC
// 0x0010 (0x0010 - 0x0000)
struct MapGridWidget_UCtoMC final
{
public:
	struct FVector2D                              UC;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapGridWidget_UCtoMC) == 0x000004, "Wrong alignment on MapGridWidget_UCtoMC");
static_assert(sizeof(MapGridWidget_UCtoMC) == 0x000010, "Wrong size on MapGridWidget_UCtoMC");
static_assert(offsetof(MapGridWidget_UCtoMC, UC) == 0x000000, "Member 'MapGridWidget_UCtoMC::UC' has a wrong offset!");
static_assert(offsetof(MapGridWidget_UCtoMC, ReturnValue) == 0x000008, "Member 'MapGridWidget_UCtoMC::ReturnValue' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetAdaptiveCrosshairPosition
// 0x000C (0x000C - 0x0000)
struct TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition final
{
public:
	struct FVector2D                              ScreenPosition;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition) == 0x000004, "Wrong alignment on TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition) == 0x00000C, "Wrong size on TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition, ScreenPosition) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition::ScreenPosition' has a wrong offset!");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition, Distance) == 0x000008, "Member 'TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairPosition::Distance' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetAdaptiveCrosshairVisibility
// 0x0001 (0x0001 - 0x0000)
struct TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility) == 0x000001, "Wrong alignment on TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility) == 0x000001, "Wrong size on TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility, bVisible) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetAdaptiveCrosshairVisibility::bVisible' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetCenterCrosshairClass
// 0x0002 (0x0002 - 0x0000)
struct TslAdaptiveCrosshairWidget_SetCenterCrosshairClass final
{
public:
	EWeaponClass                                  InWeaponClass;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasWeapon;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetCenterCrosshairClass) == 0x000001, "Wrong alignment on TslAdaptiveCrosshairWidget_SetCenterCrosshairClass");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetCenterCrosshairClass) == 0x000002, "Wrong size on TslAdaptiveCrosshairWidget_SetCenterCrosshairClass");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetCenterCrosshairClass, InWeaponClass) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetCenterCrosshairClass::InWeaponClass' has a wrong offset!");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetCenterCrosshairClass, bHasWeapon) == 0x000001, "Member 'TslAdaptiveCrosshairWidget_SetCenterCrosshairClass::bHasWeapon' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetCenterCrosshairDeviation
// 0x0004 (0x0004 - 0x0000)
struct TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation final
{
public:
	float                                         InDeviation;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation) == 0x000004, "Wrong alignment on TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation) == 0x000004, "Wrong size on TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation, InDeviation) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetCenterCrosshairDeviation::InDeviation' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetCenterCrosshairVisibility
// 0x0001 (0x0001 - 0x0000)
struct TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility) == 0x000001, "Wrong alignment on TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility) == 0x000001, "Wrong size on TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility, bVisible) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetCenterCrosshairVisibility::bVisible' has a wrong offset!");

// Function TslGame.TslAdaptiveCrosshairWidget.SetShowCrosshairWidget
// 0x0001 (0x0001 - 0x0000)
struct TslAdaptiveCrosshairWidget_SetShowCrosshairWidget final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslAdaptiveCrosshairWidget_SetShowCrosshairWidget) == 0x000001, "Wrong alignment on TslAdaptiveCrosshairWidget_SetShowCrosshairWidget");
static_assert(sizeof(TslAdaptiveCrosshairWidget_SetShowCrosshairWidget) == 0x000001, "Wrong size on TslAdaptiveCrosshairWidget_SetShowCrosshairWidget");
static_assert(offsetof(TslAdaptiveCrosshairWidget_SetShowCrosshairWidget, bShow) == 0x000000, "Member 'TslAdaptiveCrosshairWidget_SetShowCrosshairWidget::bShow' has a wrong offset!");

// Function TslGame.TslBaseOptionWidget.IsChanged
// 0x0001 (0x0001 - 0x0000)
struct TslBaseOptionWidget_IsChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseOptionWidget_IsChanged) == 0x000001, "Wrong alignment on TslBaseOptionWidget_IsChanged");
static_assert(sizeof(TslBaseOptionWidget_IsChanged) == 0x000001, "Wrong size on TslBaseOptionWidget_IsChanged");
static_assert(offsetof(TslBaseOptionWidget_IsChanged, ReturnValue) == 0x000000, "Member 'TslBaseOptionWidget_IsChanged::ReturnValue' has a wrong offset!");

// Function TslGame.TslBaseOptionWidget.IsEnableApply
// 0x0001 (0x0001 - 0x0000)
struct TslBaseOptionWidget_IsEnableApply final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseOptionWidget_IsEnableApply) == 0x000001, "Wrong alignment on TslBaseOptionWidget_IsEnableApply");
static_assert(sizeof(TslBaseOptionWidget_IsEnableApply) == 0x000001, "Wrong size on TslBaseOptionWidget_IsEnableApply");
static_assert(offsetof(TslBaseOptionWidget_IsEnableApply, ReturnValue) == 0x000000, "Member 'TslBaseOptionWidget_IsEnableApply::ReturnValue' has a wrong offset!");

// Function TslGame.TslBaseOptionWidget.IsKeyUp
// 0x0001 (0x0001 - 0x0000)
struct TslBaseOptionWidget_IsKeyUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBaseOptionWidget_IsKeyUp) == 0x000001, "Wrong alignment on TslBaseOptionWidget_IsKeyUp");
static_assert(sizeof(TslBaseOptionWidget_IsKeyUp) == 0x000001, "Wrong size on TslBaseOptionWidget_IsKeyUp");
static_assert(offsetof(TslBaseOptionWidget_IsKeyUp, ReturnValue) == 0x000000, "Member 'TslBaseOptionWidget_IsKeyUp::ReturnValue' has a wrong offset!");

// Function TslGame.TslKeyDisplayWidget.InitializeKeyDisplayWidget
// 0x0001 (0x0001 - 0x0000)
struct TslKeyDisplayWidget_InitializeKeyDisplayWidget final
{
public:
	bool                                          bDefault;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyDisplayWidget_InitializeKeyDisplayWidget) == 0x000001, "Wrong alignment on TslKeyDisplayWidget_InitializeKeyDisplayWidget");
static_assert(sizeof(TslKeyDisplayWidget_InitializeKeyDisplayWidget) == 0x000001, "Wrong size on TslKeyDisplayWidget_InitializeKeyDisplayWidget");
static_assert(offsetof(TslKeyDisplayWidget_InitializeKeyDisplayWidget, bDefault) == 0x000000, "Member 'TslKeyDisplayWidget_InitializeKeyDisplayWidget::bDefault' has a wrong offset!");

// Function TslGame.TslKeyDisplayWidget.SetupKeyDisplayWidget
// 0x0038 (0x0038 - 0x0000)
struct TslKeyDisplayWidget_SetupKeyDisplayWidget final
{
public:
	struct FName                                   InInputName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InDisplayName;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FName                                   InCategoryName;                                    // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbAxisInput;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAxisScale;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbGamepad;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslKeyDisplayWidget_SetupKeyDisplayWidget) == 0x000008, "Wrong alignment on TslKeyDisplayWidget_SetupKeyDisplayWidget");
static_assert(sizeof(TslKeyDisplayWidget_SetupKeyDisplayWidget) == 0x000038, "Wrong size on TslKeyDisplayWidget_SetupKeyDisplayWidget");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InInputName) == 0x000000, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InInputName' has a wrong offset!");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InDisplayName) == 0x000008, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InDisplayName' has a wrong offset!");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InCategoryName) == 0x000020, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InCategoryName' has a wrong offset!");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InbAxisInput) == 0x000028, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InbAxisInput' has a wrong offset!");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InAxisScale) == 0x00002C, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InAxisScale' has a wrong offset!");
static_assert(offsetof(TslKeyDisplayWidget_SetupKeyDisplayWidget, InbGamepad) == 0x000030, "Member 'TslKeyDisplayWidget_SetupKeyDisplayWidget::InbGamepad' has a wrong offset!");

// Function TslGame.TslKeyDisplayWidget.TransferInputEvent
// 0x0020 (0x0020 - 0x0000)
struct TslKeyDisplayWidget_TransferInputEvent final
{
public:
	struct FTslInputKey                           TslInputKey;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyDisplayWidget_TransferInputEvent) == 0x000008, "Wrong alignment on TslKeyDisplayWidget_TransferInputEvent");
static_assert(sizeof(TslKeyDisplayWidget_TransferInputEvent) == 0x000020, "Wrong size on TslKeyDisplayWidget_TransferInputEvent");
static_assert(offsetof(TslKeyDisplayWidget_TransferInputEvent, TslInputKey) == 0x000000, "Member 'TslKeyDisplayWidget_TransferInputEvent::TslInputKey' has a wrong offset!");

// Function TslGame.TslKeyOptionWidget.OnKeyChanged
// 0x0028 (0x0028 - 0x0000)
struct TslKeyOptionWidget_OnKeyChanged final
{
public:
	class UTslKeyDisplayWidget*                   InKeyDisplayWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTslInputKey                           InInputedKey;                                      // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyOptionWidget_OnKeyChanged) == 0x000008, "Wrong alignment on TslKeyOptionWidget_OnKeyChanged");
static_assert(sizeof(TslKeyOptionWidget_OnKeyChanged) == 0x000028, "Wrong size on TslKeyOptionWidget_OnKeyChanged");
static_assert(offsetof(TslKeyOptionWidget_OnKeyChanged, InKeyDisplayWidget) == 0x000000, "Member 'TslKeyOptionWidget_OnKeyChanged::InKeyDisplayWidget' has a wrong offset!");
static_assert(offsetof(TslKeyOptionWidget_OnKeyChanged, InInputedKey) == 0x000008, "Member 'TslKeyOptionWidget_OnKeyChanged::InInputedKey' has a wrong offset!");

// Function TslGame.TslKeySettingWidget.StartupKeySettingWidget
// 0x0020 (0x0020 - 0x0000)
struct TslKeySettingWidget_StartupKeySettingWidget final
{
public:
	struct FName                                   InCategoryName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InDisplayText;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeySettingWidget_StartupKeySettingWidget) == 0x000008, "Wrong alignment on TslKeySettingWidget_StartupKeySettingWidget");
static_assert(sizeof(TslKeySettingWidget_StartupKeySettingWidget) == 0x000020, "Wrong size on TslKeySettingWidget_StartupKeySettingWidget");
static_assert(offsetof(TslKeySettingWidget_StartupKeySettingWidget, InCategoryName) == 0x000000, "Member 'TslKeySettingWidget_StartupKeySettingWidget::InCategoryName' has a wrong offset!");
static_assert(offsetof(TslKeySettingWidget_StartupKeySettingWidget, InDisplayText) == 0x000008, "Member 'TslKeySettingWidget_StartupKeySettingWidget::InDisplayText' has a wrong offset!");

// Function TslGame.TslKeySettingWidget.TransferInputEvent
// 0x0028 (0x0028 - 0x0000)
struct TslKeySettingWidget_TransferInputEvent final
{
public:
	class UTslKeyDisplayWidget*                   KeyDisplayWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTslInputKey                           TslInputKey;                                       // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeySettingWidget_TransferInputEvent) == 0x000008, "Wrong alignment on TslKeySettingWidget_TransferInputEvent");
static_assert(sizeof(TslKeySettingWidget_TransferInputEvent) == 0x000028, "Wrong size on TslKeySettingWidget_TransferInputEvent");
static_assert(offsetof(TslKeySettingWidget_TransferInputEvent, KeyDisplayWidget) == 0x000000, "Member 'TslKeySettingWidget_TransferInputEvent::KeyDisplayWidget' has a wrong offset!");
static_assert(offsetof(TslKeySettingWidget_TransferInputEvent, TslInputKey) == 0x000008, "Member 'TslKeySettingWidget_TransferInputEvent::TslInputKey' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.OnStartBuff
// 0x0010 (0x0010 - 0x0000)
struct TslBuffIconListWidget_OnStartBuff final
{
public:
	struct FName                                   BuffName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStart;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslBuffIconListWidget_OnStartBuff) == 0x000004, "Wrong alignment on TslBuffIconListWidget_OnStartBuff");
static_assert(sizeof(TslBuffIconListWidget_OnStartBuff) == 0x000010, "Wrong size on TslBuffIconListWidget_OnStartBuff");
static_assert(offsetof(TslBuffIconListWidget_OnStartBuff, BuffName) == 0x000000, "Member 'TslBuffIconListWidget_OnStartBuff::BuffName' has a wrong offset!");
static_assert(offsetof(TslBuffIconListWidget_OnStartBuff, bStart) == 0x000008, "Member 'TslBuffIconListWidget_OnStartBuff::bStart' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.GetBoostPercent
// 0x0004 (0x0004 - 0x0000)
struct TslBuffIconListWidget_GetBoostPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuffIconListWidget_GetBoostPercent) == 0x000004, "Wrong alignment on TslBuffIconListWidget_GetBoostPercent");
static_assert(sizeof(TslBuffIconListWidget_GetBoostPercent) == 0x000004, "Wrong size on TslBuffIconListWidget_GetBoostPercent");
static_assert(offsetof(TslBuffIconListWidget_GetBoostPercent, ReturnValue) == 0x000000, "Member 'TslBuffIconListWidget_GetBoostPercent::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.GetHealBuffIconOpacity
// 0x0010 (0x0010 - 0x0000)
struct TslBuffIconListWidget_GetHealBuffIconOpacity final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuffIconListWidget_GetHealBuffIconOpacity) == 0x000004, "Wrong alignment on TslBuffIconListWidget_GetHealBuffIconOpacity");
static_assert(sizeof(TslBuffIconListWidget_GetHealBuffIconOpacity) == 0x000010, "Wrong size on TslBuffIconListWidget_GetHealBuffIconOpacity");
static_assert(offsetof(TslBuffIconListWidget_GetHealBuffIconOpacity, ReturnValue) == 0x000000, "Member 'TslBuffIconListWidget_GetHealBuffIconOpacity::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.GetHealBuffVisibility
// 0x0001 (0x0001 - 0x0000)
struct TslBuffIconListWidget_GetHealBuffVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuffIconListWidget_GetHealBuffVisibility) == 0x000001, "Wrong alignment on TslBuffIconListWidget_GetHealBuffVisibility");
static_assert(sizeof(TslBuffIconListWidget_GetHealBuffVisibility) == 0x000001, "Wrong size on TslBuffIconListWidget_GetHealBuffVisibility");
static_assert(offsetof(TslBuffIconListWidget_GetHealBuffVisibility, ReturnValue) == 0x000000, "Member 'TslBuffIconListWidget_GetHealBuffVisibility::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.GetRunBuffIconOpacity
// 0x0010 (0x0010 - 0x0000)
struct TslBuffIconListWidget_GetRunBuffIconOpacity final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuffIconListWidget_GetRunBuffIconOpacity) == 0x000004, "Wrong alignment on TslBuffIconListWidget_GetRunBuffIconOpacity");
static_assert(sizeof(TslBuffIconListWidget_GetRunBuffIconOpacity) == 0x000010, "Wrong size on TslBuffIconListWidget_GetRunBuffIconOpacity");
static_assert(offsetof(TslBuffIconListWidget_GetRunBuffIconOpacity, ReturnValue) == 0x000000, "Member 'TslBuffIconListWidget_GetRunBuffIconOpacity::ReturnValue' has a wrong offset!");

// Function TslGame.TslBuffIconListWidget.GetRunBuffVisibility
// 0x0001 (0x0001 - 0x0000)
struct TslBuffIconListWidget_GetRunBuffVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslBuffIconListWidget_GetRunBuffVisibility) == 0x000001, "Wrong alignment on TslBuffIconListWidget_GetRunBuffVisibility");
static_assert(sizeof(TslBuffIconListWidget_GetRunBuffVisibility) == 0x000001, "Wrong size on TslBuffIconListWidget_GetRunBuffVisibility");
static_assert(offsetof(TslBuffIconListWidget_GetRunBuffVisibility, ReturnValue) == 0x000000, "Member 'TslBuffIconListWidget_GetRunBuffVisibility::ReturnValue' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.KeyDown
// 0x0018 (0x0018 - 0x0000)
struct TslKeyReceiverWidget_KeyDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_KeyDown) == 0x000008, "Wrong alignment on TslKeyReceiverWidget_KeyDown");
static_assert(sizeof(TslKeyReceiverWidget_KeyDown) == 0x000018, "Wrong size on TslKeyReceiverWidget_KeyDown");
static_assert(offsetof(TslKeyReceiverWidget_KeyDown, InKey) == 0x000000, "Member 'TslKeyReceiverWidget_KeyDown::InKey' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.KeyUp
// 0x0018 (0x0018 - 0x0000)
struct TslKeyReceiverWidget_KeyUp final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_KeyUp) == 0x000008, "Wrong alignment on TslKeyReceiverWidget_KeyUp");
static_assert(sizeof(TslKeyReceiverWidget_KeyUp) == 0x000018, "Wrong size on TslKeyReceiverWidget_KeyUp");
static_assert(offsetof(TslKeyReceiverWidget_KeyUp, InKey) == 0x000000, "Member 'TslKeyReceiverWidget_KeyUp::InKey' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.UpdateKeyDown
// 0x0018 (0x0018 - 0x0000)
struct TslKeyReceiverWidget_UpdateKeyDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_UpdateKeyDown) == 0x000008, "Wrong alignment on TslKeyReceiverWidget_UpdateKeyDown");
static_assert(sizeof(TslKeyReceiverWidget_UpdateKeyDown) == 0x000018, "Wrong size on TslKeyReceiverWidget_UpdateKeyDown");
static_assert(offsetof(TslKeyReceiverWidget_UpdateKeyDown, InKey) == 0x000000, "Member 'TslKeyReceiverWidget_UpdateKeyDown::InKey' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.UpdateKeyUp
// 0x0018 (0x0018 - 0x0000)
struct TslKeyReceiverWidget_UpdateKeyUp final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_UpdateKeyUp) == 0x000008, "Wrong alignment on TslKeyReceiverWidget_UpdateKeyUp");
static_assert(sizeof(TslKeyReceiverWidget_UpdateKeyUp) == 0x000018, "Wrong size on TslKeyReceiverWidget_UpdateKeyUp");
static_assert(offsetof(TslKeyReceiverWidget_UpdateKeyUp, InKey) == 0x000000, "Member 'TslKeyReceiverWidget_UpdateKeyUp::InKey' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.GetLastDownedKeyName
// 0x0018 (0x0018 - 0x0000)
struct TslKeyReceiverWidget_GetLastDownedKeyName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_GetLastDownedKeyName) == 0x000008, "Wrong alignment on TslKeyReceiverWidget_GetLastDownedKeyName");
static_assert(sizeof(TslKeyReceiverWidget_GetLastDownedKeyName) == 0x000018, "Wrong size on TslKeyReceiverWidget_GetLastDownedKeyName");
static_assert(offsetof(TslKeyReceiverWidget_GetLastDownedKeyName, ReturnValue) == 0x000000, "Member 'TslKeyReceiverWidget_GetLastDownedKeyName::ReturnValue' has a wrong offset!");

// Function TslGame.TslKeyReceiverWidget.IsInputKeyDown
// 0x0001 (0x0001 - 0x0000)
struct TslKeyReceiverWidget_IsInputKeyDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslKeyReceiverWidget_IsInputKeyDown) == 0x000001, "Wrong alignment on TslKeyReceiverWidget_IsInputKeyDown");
static_assert(sizeof(TslKeyReceiverWidget_IsInputKeyDown) == 0x000001, "Wrong size on TslKeyReceiverWidget_IsInputKeyDown");
static_assert(offsetof(TslKeyReceiverWidget_IsInputKeyDown, ReturnValue) == 0x000000, "Member 'TslKeyReceiverWidget_IsInputKeyDown::ReturnValue' has a wrong offset!");

// Function TslGame.TslTeamInfoWidget.OnVoiceChat
// 0x0008 (0x0008 - 0x0000)
struct TslTeamInfoWidget_OnVoiceChat final
{
public:
	bool                                          InbSpeaking;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InMeterEnergy;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslTeamInfoWidget_OnVoiceChat) == 0x000004, "Wrong alignment on TslTeamInfoWidget_OnVoiceChat");
static_assert(sizeof(TslTeamInfoWidget_OnVoiceChat) == 0x000008, "Wrong size on TslTeamInfoWidget_OnVoiceChat");
static_assert(offsetof(TslTeamInfoWidget_OnVoiceChat, InbSpeaking) == 0x000000, "Member 'TslTeamInfoWidget_OnVoiceChat::InbSpeaking' has a wrong offset!");
static_assert(offsetof(TslTeamInfoWidget_OnVoiceChat, InMeterEnergy) == 0x000004, "Member 'TslTeamInfoWidget_OnVoiceChat::InMeterEnergy' has a wrong offset!");

// Function TslGame.TslTeamInfoWidget.SetTeam
// 0x0008 (0x0008 - 0x0000)
struct TslTeamInfoWidget_SetTeam final
{
public:
	class ATeam*                                  InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslTeamInfoWidget_SetTeam) == 0x000008, "Wrong alignment on TslTeamInfoWidget_SetTeam");
static_assert(sizeof(TslTeamInfoWidget_SetTeam) == 0x000008, "Wrong size on TslTeamInfoWidget_SetTeam");
static_assert(offsetof(TslTeamInfoWidget_SetTeam, InTeam) == 0x000000, "Member 'TslTeamInfoWidget_SetTeam::InTeam' has a wrong offset!");

// Function TslGame.TslTeamInfoWidget.UpdateVivoxChat
// 0x0018 (0x0018 - 0x0000)
struct TslTeamInfoWidget_UpdateVivoxChat final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamChannel;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbSpeaking;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InMeterEnergy;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslTeamInfoWidget_UpdateVivoxChat) == 0x000008, "Wrong alignment on TslTeamInfoWidget_UpdateVivoxChat");
static_assert(sizeof(TslTeamInfoWidget_UpdateVivoxChat) == 0x000018, "Wrong size on TslTeamInfoWidget_UpdateVivoxChat");
static_assert(offsetof(TslTeamInfoWidget_UpdateVivoxChat, UniqueId) == 0x000000, "Member 'TslTeamInfoWidget_UpdateVivoxChat::UniqueId' has a wrong offset!");
static_assert(offsetof(TslTeamInfoWidget_UpdateVivoxChat, bIsTeamChannel) == 0x000010, "Member 'TslTeamInfoWidget_UpdateVivoxChat::bIsTeamChannel' has a wrong offset!");
static_assert(offsetof(TslTeamInfoWidget_UpdateVivoxChat, InbSpeaking) == 0x000011, "Member 'TslTeamInfoWidget_UpdateVivoxChat::InbSpeaking' has a wrong offset!");
static_assert(offsetof(TslTeamInfoWidget_UpdateVivoxChat, InMeterEnergy) == 0x000014, "Member 'TslTeamInfoWidget_UpdateVivoxChat::InMeterEnergy' has a wrong offset!");

// Function TslGame.WeaponSlotHudBaseWidget.OnNotifyWeaponChange
// 0x0008 (0x0008 - 0x0000)
struct WeaponSlotHudBaseWidget_OnNotifyWeaponChange final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSlotHudBaseWidget_OnNotifyWeaponChange) == 0x000004, "Wrong alignment on WeaponSlotHudBaseWidget_OnNotifyWeaponChange");
static_assert(sizeof(WeaponSlotHudBaseWidget_OnNotifyWeaponChange) == 0x000008, "Wrong size on WeaponSlotHudBaseWidget_OnNotifyWeaponChange");
static_assert(offsetof(WeaponSlotHudBaseWidget_OnNotifyWeaponChange, WeaponIndex) == 0x000000, "Member 'WeaponSlotHudBaseWidget_OnNotifyWeaponChange::WeaponIndex' has a wrong offset!");
static_assert(offsetof(WeaponSlotHudBaseWidget_OnNotifyWeaponChange, Duration) == 0x000004, "Member 'WeaponSlotHudBaseWidget_OnNotifyWeaponChange::Duration' has a wrong offset!");

// Function TslGame.WeaponSlotHudBaseWidget.OnNotifyWeaponUnarm
// 0x0001 (0x0001 - 0x0000)
struct WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm final
{
public:
	bool                                          bIsUnarmed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm) == 0x000001, "Wrong alignment on WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm");
static_assert(sizeof(WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm) == 0x000001, "Wrong size on WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm");
static_assert(offsetof(WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm, bIsUnarmed) == 0x000000, "Member 'WeaponSlotHudBaseWidget_OnNotifyWeaponUnarm::bIsUnarmed' has a wrong offset!");

// Function TslGame.TslVehicleHitComponent.OnDeath
// 0x0030 (0x0030 - 0x0000)
struct TslVehicleHitComponent_OnDeath final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleHitComponent_OnDeath) == 0x000008, "Wrong alignment on TslVehicleHitComponent_OnDeath");
static_assert(sizeof(TslVehicleHitComponent_OnDeath) == 0x000030, "Wrong size on TslVehicleHitComponent_OnDeath");
static_assert(offsetof(TslVehicleHitComponent_OnDeath, KillingDamage) == 0x000000, "Member 'TslVehicleHitComponent_OnDeath::KillingDamage' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnDeath, DamageEvent) == 0x000008, "Member 'TslVehicleHitComponent_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnDeath, PlayerInstigator) == 0x000020, "Member 'TslVehicleHitComponent_OnDeath::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnDeath, DamageCauser) == 0x000028, "Member 'TslVehicleHitComponent_OnDeath::DamageCauser' has a wrong offset!");

// Function TslGame.TslVehicleHitComponent.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct TslVehicleHitComponent_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleHitComponent_OnHit) == 0x000008, "Wrong alignment on TslVehicleHitComponent_OnHit");
static_assert(sizeof(TslVehicleHitComponent_OnHit) == 0x0000A8, "Wrong size on TslVehicleHitComponent_OnHit");
static_assert(offsetof(TslVehicleHitComponent_OnHit, SelfActor) == 0x000000, "Member 'TslVehicleHitComponent_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnHit, OtherActor) == 0x000008, "Member 'TslVehicleHitComponent_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnHit, NormalImpulse) == 0x000010, "Member 'TslVehicleHitComponent_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnHit, Hit) == 0x000020, "Member 'TslVehicleHitComponent_OnHit::Hit' has a wrong offset!");

// Function TslGame.TslVehicleHitComponent.OnSyncHit
// 0x0098 (0x0098 - 0x0000)
struct TslVehicleHitComponent_OnSyncHit final
{
public:
	struct FVector                                NormalImpulse;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleHitComponent_OnSyncHit) == 0x000008, "Wrong alignment on TslVehicleHitComponent_OnSyncHit");
static_assert(sizeof(TslVehicleHitComponent_OnSyncHit) == 0x000098, "Wrong size on TslVehicleHitComponent_OnSyncHit");
static_assert(offsetof(TslVehicleHitComponent_OnSyncHit, NormalImpulse) == 0x000000, "Member 'TslVehicleHitComponent_OnSyncHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TslVehicleHitComponent_OnSyncHit, Hit) == 0x000010, "Member 'TslVehicleHitComponent_OnSyncHit::Hit' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.KillAllRiders
// 0x0030 (0x0030 - 0x0000)
struct TslVehicleSeatComponent_KillAllRiders final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ATslPlayerState*                        PlayerInstigator;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_KillAllRiders) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_KillAllRiders");
static_assert(sizeof(TslVehicleSeatComponent_KillAllRiders) == 0x000030, "Wrong size on TslVehicleSeatComponent_KillAllRiders");
static_assert(offsetof(TslVehicleSeatComponent_KillAllRiders, KillingDamage) == 0x000000, "Member 'TslVehicleSeatComponent_KillAllRiders::KillingDamage' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_KillAllRiders, DamageEvent) == 0x000008, "Member 'TslVehicleSeatComponent_KillAllRiders::DamageEvent' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_KillAllRiders, PlayerInstigator) == 0x000020, "Member 'TslVehicleSeatComponent_KillAllRiders::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_KillAllRiders, DamageCauser) == 0x000028, "Member 'TslVehicleSeatComponent_KillAllRiders::DamageCauser' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.Leave
// 0x0018 (0x0018 - 0x0000)
struct TslVehicleSeatComponent_Leave final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleSeatComponent_Leave) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_Leave");
static_assert(sizeof(TslVehicleSeatComponent_Leave) == 0x000018, "Wrong size on TslVehicleSeatComponent_Leave");
static_assert(offsetof(TslVehicleSeatComponent_Leave, Rider) == 0x000000, "Member 'TslVehicleSeatComponent_Leave::Rider' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_Leave, Seat) == 0x000008, "Member 'TslVehicleSeatComponent_Leave::Seat' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_Leave, bForce) == 0x000010, "Member 'TslVehicleSeatComponent_Leave::bForce' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.OnFuelChange
// 0x000C (0x000C - 0x0000)
struct TslVehicleSeatComponent_OnFuelChange final
{
public:
	float                                         CurrentFuel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastFuel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelMax;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_OnFuelChange) == 0x000004, "Wrong alignment on TslVehicleSeatComponent_OnFuelChange");
static_assert(sizeof(TslVehicleSeatComponent_OnFuelChange) == 0x00000C, "Wrong size on TslVehicleSeatComponent_OnFuelChange");
static_assert(offsetof(TslVehicleSeatComponent_OnFuelChange, CurrentFuel) == 0x000000, "Member 'TslVehicleSeatComponent_OnFuelChange::CurrentFuel' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_OnFuelChange, LastFuel) == 0x000004, "Member 'TslVehicleSeatComponent_OnFuelChange::LastFuel' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_OnFuelChange, FuelMax) == 0x000008, "Member 'TslVehicleSeatComponent_OnFuelChange::FuelMax' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.Ride
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_Ride final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_Ride) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_Ride");
static_assert(sizeof(TslVehicleSeatComponent_Ride) == 0x000010, "Wrong size on TslVehicleSeatComponent_Ride");
static_assert(offsetof(TslVehicleSeatComponent_Ride, Rider) == 0x000000, "Member 'TslVehicleSeatComponent_Ride::Rider' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_Ride, Seat) == 0x000008, "Member 'TslVehicleSeatComponent_Ride::Seat' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.TryToLeave
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_TryToLeave final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleSeatComponent_TryToLeave) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_TryToLeave");
static_assert(sizeof(TslVehicleSeatComponent_TryToLeave) == 0x000010, "Wrong size on TslVehicleSeatComponent_TryToLeave");
static_assert(offsetof(TslVehicleSeatComponent_TryToLeave, Rider) == 0x000000, "Member 'TslVehicleSeatComponent_TryToLeave::Rider' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_TryToLeave, bForce) == 0x000008, "Member 'TslVehicleSeatComponent_TryToLeave::bForce' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.TryToRide
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_TryToRide final
{
public:
	class ATslCharacter*                          Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_TryToRide) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_TryToRide");
static_assert(sizeof(TslVehicleSeatComponent_TryToRide) == 0x000010, "Wrong size on TslVehicleSeatComponent_TryToRide");
static_assert(offsetof(TslVehicleSeatComponent_TryToRide, Rider) == 0x000000, "Member 'TslVehicleSeatComponent_TryToRide::Rider' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_TryToRide, Seat) == 0x000008, "Member 'TslVehicleSeatComponent_TryToRide::Seat' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct TslVehicleSeatComponent_GetDriver final
{
public:
	class ATslCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_GetDriver) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetDriver");
static_assert(sizeof(TslVehicleSeatComponent_GetDriver) == 0x000008, "Wrong size on TslVehicleSeatComponent_GetDriver");
static_assert(offsetof(TslVehicleSeatComponent_GetDriver, ReturnValue) == 0x000000, "Member 'TslVehicleSeatComponent_GetDriver::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetLastDriver
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_GetLastDriver final
{
public:
	float                                         LastDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_GetLastDriver) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetLastDriver");
static_assert(sizeof(TslVehicleSeatComponent_GetLastDriver) == 0x000010, "Wrong size on TslVehicleSeatComponent_GetLastDriver");
static_assert(offsetof(TslVehicleSeatComponent_GetLastDriver, LastDuration) == 0x000000, "Member 'TslVehicleSeatComponent_GetLastDriver::LastDuration' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_GetLastDriver, ReturnValue) == 0x000008, "Member 'TslVehicleSeatComponent_GetLastDriver::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetRiders
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_GetRiders final
{
public:
	TArray<class ATslCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_GetRiders) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetRiders");
static_assert(sizeof(TslVehicleSeatComponent_GetRiders) == 0x000010, "Wrong size on TslVehicleSeatComponent_GetRiders");
static_assert(offsetof(TslVehicleSeatComponent_GetRiders, ReturnValue) == 0x000000, "Member 'TslVehicleSeatComponent_GetRiders::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetSeat
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_GetSeat final
{
public:
	int32                                         SeatIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleSeatInteractionComponent*       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_GetSeat) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetSeat");
static_assert(sizeof(TslVehicleSeatComponent_GetSeat) == 0x000010, "Wrong size on TslVehicleSeatComponent_GetSeat");
static_assert(offsetof(TslVehicleSeatComponent_GetSeat, SeatIndex) == 0x000000, "Member 'TslVehicleSeatComponent_GetSeat::SeatIndex' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_GetSeat, ReturnValue) == 0x000008, "Member 'TslVehicleSeatComponent_GetSeat::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetSeats
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_GetSeats final
{
public:
	TArray<class UVehicleSeatInteractionComponent*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslVehicleSeatComponent_GetSeats) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetSeats");
static_assert(sizeof(TslVehicleSeatComponent_GetSeats) == 0x000010, "Wrong size on TslVehicleSeatComponent_GetSeats");
static_assert(offsetof(TslVehicleSeatComponent_GetSeats, ReturnValue) == 0x000000, "Member 'TslVehicleSeatComponent_GetSeats::ReturnValue' has a wrong offset!");

// Function TslGame.TslVehicleSeatComponent.GetVehicleSeatIndex
// 0x0010 (0x0010 - 0x0000)
struct TslVehicleSeatComponent_GetVehicleSeatIndex final
{
public:
	class UVehicleSeatInteractionComponent*       Seat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslVehicleSeatComponent_GetVehicleSeatIndex) == 0x000008, "Wrong alignment on TslVehicleSeatComponent_GetVehicleSeatIndex");
static_assert(sizeof(TslVehicleSeatComponent_GetVehicleSeatIndex) == 0x000010, "Wrong size on TslVehicleSeatComponent_GetVehicleSeatIndex");
static_assert(offsetof(TslVehicleSeatComponent_GetVehicleSeatIndex, Seat) == 0x000000, "Member 'TslVehicleSeatComponent_GetVehicleSeatIndex::Seat' has a wrong offset!");
static_assert(offsetof(TslVehicleSeatComponent_GetVehicleSeatIndex, ReturnValue) == 0x000008, "Member 'TslVehicleSeatComponent_GetVehicleSeatIndex::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.OnRep_WeaponSpread
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Trajectory_OnRep_WeaponSpread final
{
public:
	float                                         LastWeaponSpread;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_OnRep_WeaponSpread) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_OnRep_WeaponSpread");
static_assert(sizeof(TslWeapon_Trajectory_OnRep_WeaponSpread) == 0x000004, "Wrong size on TslWeapon_Trajectory_OnRep_WeaponSpread");
static_assert(offsetof(TslWeapon_Trajectory_OnRep_WeaponSpread, LastWeaponSpread) == 0x000000, "Member 'TslWeapon_Trajectory_OnRep_WeaponSpread::LastWeaponSpread' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.ServerNotifyCrack
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_Trajectory_ServerNotifyCrack final
{
public:
	class ATslCharacter*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    LocationRelative;                                  // 0x0008(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         BulletVelocity;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_ServerNotifyCrack) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_ServerNotifyCrack");
static_assert(sizeof(TslWeapon_Trajectory_ServerNotifyCrack) == 0x000018, "Wrong size on TslWeapon_Trajectory_ServerNotifyCrack");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyCrack, TargetCharacter) == 0x000000, "Member 'TslWeapon_Trajectory_ServerNotifyCrack::TargetCharacter' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyCrack, LocationRelative) == 0x000008, "Member 'TslWeapon_Trajectory_ServerNotifyCrack::LocationRelative' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyCrack, BulletVelocity) == 0x000014, "Member 'TslWeapon_Trajectory_ServerNotifyCrack::BulletVelocity' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.ServerNotifyHit
// 0x00D0 (0x00D0 - 0x0000)
struct TslWeapon_Trajectory_ServerNotifyHit final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Origin;                                            // 0x0088(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0094(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PreLocation;                                       // 0x00A0(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x00AC(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         TravelDistance;                                    // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x00BC(0x0004)(Parm, NativeAccessSpecifierPublic)
	uint32                                        HitSeq;                                            // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelLocation;                                       // 0x00C4(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_ServerNotifyHit) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_ServerNotifyHit");
static_assert(sizeof(TslWeapon_Trajectory_ServerNotifyHit) == 0x0000D0, "Wrong size on TslWeapon_Trajectory_ServerNotifyHit");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, Impact) == 0x000000, "Member 'TslWeapon_Trajectory_ServerNotifyHit::Impact' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, Origin) == 0x000088, "Member 'TslWeapon_Trajectory_ServerNotifyHit::Origin' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, TraceStart) == 0x000094, "Member 'TslWeapon_Trajectory_ServerNotifyHit::TraceStart' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, PreLocation) == 0x0000A0, "Member 'TslWeapon_Trajectory_ServerNotifyHit::PreLocation' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, ShootDir) == 0x0000AC, "Member 'TslWeapon_Trajectory_ServerNotifyHit::ShootDir' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, TravelDistance) == 0x0000B8, "Member 'TslWeapon_Trajectory_ServerNotifyHit::TravelDistance' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, AttackId) == 0x0000BC, "Member 'TslWeapon_Trajectory_ServerNotifyHit::AttackId' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, HitSeq) == 0x0000C0, "Member 'TslWeapon_Trajectory_ServerNotifyHit::HitSeq' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_ServerNotifyHit, RelLocation) == 0x0000C4, "Member 'TslWeapon_Trajectory_ServerNotifyHit::RelLocation' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.SimulateHit_Reliable
// 0x0098 (0x0098 - 0x0000)
struct TslWeapon_Trajectory_SimulateHit_Reliable final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                RelLocation;                                       // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWeapon_Trajectory_SimulateHit_Reliable) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_SimulateHit_Reliable");
static_assert(sizeof(TslWeapon_Trajectory_SimulateHit_Reliable) == 0x000098, "Wrong size on TslWeapon_Trajectory_SimulateHit_Reliable");
static_assert(offsetof(TslWeapon_Trajectory_SimulateHit_Reliable, Impact) == 0x000000, "Member 'TslWeapon_Trajectory_SimulateHit_Reliable::Impact' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_SimulateHit_Reliable, RelLocation) == 0x000088, "Member 'TslWeapon_Trajectory_SimulateHit_Reliable::RelLocation' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.SimulateHit_UnReliable
// 0x0098 (0x0098 - 0x0000)
struct TslWeapon_Trajectory_SimulateHit_UnReliable final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                RelLocation;                                       // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWeapon_Trajectory_SimulateHit_UnReliable) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_SimulateHit_UnReliable");
static_assert(sizeof(TslWeapon_Trajectory_SimulateHit_UnReliable) == 0x000098, "Wrong size on TslWeapon_Trajectory_SimulateHit_UnReliable");
static_assert(offsetof(TslWeapon_Trajectory_SimulateHit_UnReliable, Impact) == 0x000000, "Member 'TslWeapon_Trajectory_SimulateHit_UnReliable::Impact' has a wrong offset!");
static_assert(offsetof(TslWeapon_Trajectory_SimulateHit_UnReliable, RelLocation) == 0x000088, "Member 'TslWeapon_Trajectory_SimulateHit_UnReliable::RelLocation' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetBulletLocation
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Trajectory_GetBulletLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetBulletLocation) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetBulletLocation");
static_assert(sizeof(TslWeapon_Trajectory_GetBulletLocation) == 0x00000C, "Wrong size on TslWeapon_Trajectory_GetBulletLocation");
static_assert(offsetof(TslWeapon_Trajectory_GetBulletLocation, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetBulletLocation::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetBulletRotation
// 0x000C (0x000C - 0x0000)
struct TslWeapon_Trajectory_GetBulletRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetBulletRotation) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetBulletRotation");
static_assert(sizeof(TslWeapon_Trajectory_GetBulletRotation) == 0x00000C, "Wrong size on TslWeapon_Trajectory_GetBulletRotation");
static_assert(offsetof(TslWeapon_Trajectory_GetBulletRotation, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetBulletRotation::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetCurrentRecoilTarget
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Trajectory_GetCurrentRecoilTarget final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetCurrentRecoilTarget) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetCurrentRecoilTarget");
static_assert(sizeof(TslWeapon_Trajectory_GetCurrentRecoilTarget) == 0x000008, "Wrong size on TslWeapon_Trajectory_GetCurrentRecoilTarget");
static_assert(offsetof(TslWeapon_Trajectory_GetCurrentRecoilTarget, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetCurrentRecoilTarget::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetCurrentRecoilValue
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Trajectory_GetCurrentRecoilValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetCurrentRecoilValue) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetCurrentRecoilValue");
static_assert(sizeof(TslWeapon_Trajectory_GetCurrentRecoilValue) == 0x000004, "Wrong size on TslWeapon_Trajectory_GetCurrentRecoilValue");
static_assert(offsetof(TslWeapon_Trajectory_GetCurrentRecoilValue, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetCurrentRecoilValue::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetCurrentReoveryTarget
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Trajectory_GetCurrentReoveryTarget final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetCurrentReoveryTarget) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetCurrentReoveryTarget");
static_assert(sizeof(TslWeapon_Trajectory_GetCurrentReoveryTarget) == 0x000004, "Wrong size on TslWeapon_Trajectory_GetCurrentReoveryTarget");
static_assert(offsetof(TslWeapon_Trajectory_GetCurrentReoveryTarget, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetCurrentReoveryTarget::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetCurrentStabilityVar
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Trajectory_GetCurrentStabilityVar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetCurrentStabilityVar) == 0x000004, "Wrong alignment on TslWeapon_Trajectory_GetCurrentStabilityVar");
static_assert(sizeof(TslWeapon_Trajectory_GetCurrentStabilityVar) == 0x000004, "Wrong size on TslWeapon_Trajectory_GetCurrentStabilityVar");
static_assert(offsetof(TslWeapon_Trajectory_GetCurrentStabilityVar, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetCurrentStabilityVar::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetRecoilInfo
// 0x0068 (0x0068 - 0x0000)
struct TslWeapon_Trajectory_GetRecoilInfo final
{
public:
	struct FRecoilInfo                            ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetRecoilInfo) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_GetRecoilInfo");
static_assert(sizeof(TslWeapon_Trajectory_GetRecoilInfo) == 0x000068, "Wrong size on TslWeapon_Trajectory_GetRecoilInfo");
static_assert(offsetof(TslWeapon_Trajectory_GetRecoilInfo, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetRecoilInfo::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.GetTrajectoryConfig
// 0x0060 (0x0060 - 0x0000)
struct TslWeapon_Trajectory_GetTrajectoryConfig final
{
public:
	struct FTrajectoryWeaponData                  ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_GetTrajectoryConfig) == 0x000008, "Wrong alignment on TslWeapon_Trajectory_GetTrajectoryConfig");
static_assert(sizeof(TslWeapon_Trajectory_GetTrajectoryConfig) == 0x000060, "Wrong size on TslWeapon_Trajectory_GetTrajectoryConfig");
static_assert(offsetof(TslWeapon_Trajectory_GetTrajectoryConfig, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_GetTrajectoryConfig::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Trajectory.IsBulletInAir
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Trajectory_IsBulletInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Trajectory_IsBulletInAir) == 0x000001, "Wrong alignment on TslWeapon_Trajectory_IsBulletInAir");
static_assert(sizeof(TslWeapon_Trajectory_IsBulletInAir) == 0x000001, "Wrong size on TslWeapon_Trajectory_IsBulletInAir");
static_assert(offsetof(TslWeapon_Trajectory_IsBulletInAir, ReturnValue) == 0x000000, "Member 'TslWeapon_Trajectory_IsBulletInAir::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.ClientAttack
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Melee_ClientAttack final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Melee_ClientAttack) == 0x000004, "Wrong alignment on TslWeapon_Melee_ClientAttack");
static_assert(sizeof(TslWeapon_Melee_ClientAttack) == 0x000004, "Wrong size on TslWeapon_Melee_ClientAttack");
static_assert(offsetof(TslWeapon_Melee_ClientAttack, AnimIndex) == 0x000000, "Member 'TslWeapon_Melee_ClientAttack::AnimIndex' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.ClientHit_Confirmed
// 0x0088 (0x0088 - 0x0000)
struct TslWeapon_Melee_ClientHit_Confirmed final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Melee_ClientHit_Confirmed) == 0x000008, "Wrong alignment on TslWeapon_Melee_ClientHit_Confirmed");
static_assert(sizeof(TslWeapon_Melee_ClientHit_Confirmed) == 0x000088, "Wrong size on TslWeapon_Melee_ClientHit_Confirmed");
static_assert(offsetof(TslWeapon_Melee_ClientHit_Confirmed, Impact) == 0x000000, "Member 'TslWeapon_Melee_ClientHit_Confirmed::Impact' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.OnAnimationNotify
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Melee_OnAnimationNotify final
{
public:
	struct FName                                   NotifyName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Melee_OnAnimationNotify) == 0x000004, "Wrong alignment on TslWeapon_Melee_OnAnimationNotify");
static_assert(sizeof(TslWeapon_Melee_OnAnimationNotify) == 0x000008, "Wrong size on TslWeapon_Melee_OnAnimationNotify");
static_assert(offsetof(TslWeapon_Melee_OnAnimationNotify, NotifyName) == 0x000000, "Member 'TslWeapon_Melee_OnAnimationNotify::NotifyName' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct TslWeapon_Melee_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TslWeapon_Melee_OnMontageEnded) == 0x000008, "Wrong alignment on TslWeapon_Melee_OnMontageEnded");
static_assert(sizeof(TslWeapon_Melee_OnMontageEnded) == 0x000010, "Wrong size on TslWeapon_Melee_OnMontageEnded");
static_assert(offsetof(TslWeapon_Melee_OnMontageEnded, Montage) == 0x000000, "Member 'TslWeapon_Melee_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(TslWeapon_Melee_OnMontageEnded, bInterrupted) == 0x000008, "Member 'TslWeapon_Melee_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.ServerAttack
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Melee_ServerAttack final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Melee_ServerAttack) == 0x000004, "Wrong alignment on TslWeapon_Melee_ServerAttack");
static_assert(sizeof(TslWeapon_Melee_ServerAttack) == 0x000004, "Wrong size on TslWeapon_Melee_ServerAttack");
static_assert(offsetof(TslWeapon_Melee_ServerAttack, AnimIndex) == 0x000000, "Member 'TslWeapon_Melee_ServerAttack::AnimIndex' has a wrong offset!");

// Function TslGame.TslWeapon_Melee.ServerNotifyHit
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_Melee_ServerNotifyHit final
{
public:
	TArray<struct FHitResult>                     Impacts;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAttackId                              AttackId;                                          // 0x0010(0x0004)(Parm, NativeAccessSpecifierPublic)
	uint32                                        HitSeq;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Melee_ServerNotifyHit) == 0x000008, "Wrong alignment on TslWeapon_Melee_ServerNotifyHit");
static_assert(sizeof(TslWeapon_Melee_ServerNotifyHit) == 0x000018, "Wrong size on TslWeapon_Melee_ServerNotifyHit");
static_assert(offsetof(TslWeapon_Melee_ServerNotifyHit, Impacts) == 0x000000, "Member 'TslWeapon_Melee_ServerNotifyHit::Impacts' has a wrong offset!");
static_assert(offsetof(TslWeapon_Melee_ServerNotifyHit, AttackId) == 0x000010, "Member 'TslWeapon_Melee_ServerNotifyHit::AttackId' has a wrong offset!");
static_assert(offsetof(TslWeapon_Melee_ServerNotifyHit, HitSeq) == 0x000014, "Member 'TslWeapon_Melee_ServerNotifyHit::HitSeq' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.GetThrowableCount
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Throwable_GetThrowableCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_GetThrowableCount) == 0x000004, "Wrong alignment on TslWeapon_Throwable_GetThrowableCount");
static_assert(sizeof(TslWeapon_Throwable_GetThrowableCount) == 0x000004, "Wrong size on TslWeapon_Throwable_GetThrowableCount");
static_assert(offsetof(TslWeapon_Throwable_GetThrowableCount, ReturnValue) == 0x000000, "Member 'TslWeapon_Throwable_GetThrowableCount::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.GetThrowableCountInInventory
// 0x0004 (0x0004 - 0x0000)
struct TslWeapon_Throwable_GetThrowableCountInInventory final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_GetThrowableCountInInventory) == 0x000004, "Wrong alignment on TslWeapon_Throwable_GetThrowableCountInInventory");
static_assert(sizeof(TslWeapon_Throwable_GetThrowableCountInInventory) == 0x000004, "Wrong size on TslWeapon_Throwable_GetThrowableCountInInventory");
static_assert(offsetof(TslWeapon_Throwable_GetThrowableCountInInventory, ReturnValue) == 0x000000, "Member 'TslWeapon_Throwable_GetThrowableCountInInventory::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.OnAnimationNotify
// 0x0008 (0x0008 - 0x0000)
struct TslWeapon_Throwable_OnAnimationNotify final
{
public:
	struct FName                                   NotifyName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_OnAnimationNotify) == 0x000004, "Wrong alignment on TslWeapon_Throwable_OnAnimationNotify");
static_assert(sizeof(TslWeapon_Throwable_OnAnimationNotify) == 0x000008, "Wrong size on TslWeapon_Throwable_OnAnimationNotify");
static_assert(offsetof(TslWeapon_Throwable_OnAnimationNotify, NotifyName) == 0x000000, "Member 'TslWeapon_Throwable_OnAnimationNotify::NotifyName' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.OnRep_ThrowableState
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Throwable_OnRep_ThrowableState final
{
public:
	EThrowableState                               LastThrowableState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_OnRep_ThrowableState) == 0x000001, "Wrong alignment on TslWeapon_Throwable_OnRep_ThrowableState");
static_assert(sizeof(TslWeapon_Throwable_OnRep_ThrowableState) == 0x000001, "Wrong size on TslWeapon_Throwable_OnRep_ThrowableState");
static_assert(offsetof(TslWeapon_Throwable_OnRep_ThrowableState, LastThrowableState) == 0x000000, "Member 'TslWeapon_Throwable_OnRep_ThrowableState::LastThrowableState' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.ServerFireProjectile
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_Throwable_ServerFireProjectile final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AimDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_ServerFireProjectile) == 0x000004, "Wrong alignment on TslWeapon_Throwable_ServerFireProjectile");
static_assert(sizeof(TslWeapon_Throwable_ServerFireProjectile) == 0x000018, "Wrong size on TslWeapon_Throwable_ServerFireProjectile");
static_assert(offsetof(TslWeapon_Throwable_ServerFireProjectile, RelativeLocation) == 0x000000, "Member 'TslWeapon_Throwable_ServerFireProjectile::RelativeLocation' has a wrong offset!");
static_assert(offsetof(TslWeapon_Throwable_ServerFireProjectile, AimDirection) == 0x00000C, "Member 'TslWeapon_Throwable_ServerFireProjectile::AimDirection' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.CalculateFinalThrowVelocity
// 0x0018 (0x0018 - 0x0000)
struct TslWeapon_Throwable_CalculateFinalThrowVelocity final
{
public:
	struct FVector                                AimDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_CalculateFinalThrowVelocity) == 0x000004, "Wrong alignment on TslWeapon_Throwable_CalculateFinalThrowVelocity");
static_assert(sizeof(TslWeapon_Throwable_CalculateFinalThrowVelocity) == 0x000018, "Wrong size on TslWeapon_Throwable_CalculateFinalThrowVelocity");
static_assert(offsetof(TslWeapon_Throwable_CalculateFinalThrowVelocity, AimDirection) == 0x000000, "Member 'TslWeapon_Throwable_CalculateFinalThrowVelocity::AimDirection' has a wrong offset!");
static_assert(offsetof(TslWeapon_Throwable_CalculateFinalThrowVelocity, ReturnValue) == 0x00000C, "Member 'TslWeapon_Throwable_CalculateFinalThrowVelocity::ReturnValue' has a wrong offset!");

// Function TslGame.TslWeapon_Throwable.GetThrowableState
// 0x0001 (0x0001 - 0x0000)
struct TslWeapon_Throwable_GetThrowableState final
{
public:
	EThrowableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TslWeapon_Throwable_GetThrowableState) == 0x000001, "Wrong alignment on TslWeapon_Throwable_GetThrowableState");
static_assert(sizeof(TslWeapon_Throwable_GetThrowableState) == 0x000001, "Wrong size on TslWeapon_Throwable_GetThrowableState");
static_assert(offsetof(TslWeapon_Throwable_GetThrowableState, ReturnValue) == 0x000000, "Member 'TslWeapon_Throwable_GetThrowableState::ReturnValue' has a wrong offset!");

// Function TslGame.VivoxComponent.ApplyTimedVolumeModifier
// 0x0010 (0x0010 - 0x0000)
struct VivoxComponent_ApplyTimedVolumeModifier final
{
public:
	EVivoxChannelType                             ChannelType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewModifier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestoreDuration;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxComponent_ApplyTimedVolumeModifier) == 0x000004, "Wrong alignment on VivoxComponent_ApplyTimedVolumeModifier");
static_assert(sizeof(VivoxComponent_ApplyTimedVolumeModifier) == 0x000010, "Wrong size on VivoxComponent_ApplyTimedVolumeModifier");
static_assert(offsetof(VivoxComponent_ApplyTimedVolumeModifier, ChannelType) == 0x000000, "Member 'VivoxComponent_ApplyTimedVolumeModifier::ChannelType' has a wrong offset!");
static_assert(offsetof(VivoxComponent_ApplyTimedVolumeModifier, NewModifier) == 0x000004, "Member 'VivoxComponent_ApplyTimedVolumeModifier::NewModifier' has a wrong offset!");
static_assert(offsetof(VivoxComponent_ApplyTimedVolumeModifier, Duration) == 0x000008, "Member 'VivoxComponent_ApplyTimedVolumeModifier::Duration' has a wrong offset!");
static_assert(offsetof(VivoxComponent_ApplyTimedVolumeModifier, RestoreDuration) == 0x00000C, "Member 'VivoxComponent_ApplyTimedVolumeModifier::RestoreDuration' has a wrong offset!");

// Function TslGame.VivoxComponent.ServerSetObserverTeamNum
// 0x0004 (0x0004 - 0x0000)
struct VivoxComponent_ServerSetObserverTeamNum final
{
public:
	int32                                         NewTeamNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxComponent_ServerSetObserverTeamNum) == 0x000004, "Wrong alignment on VivoxComponent_ServerSetObserverTeamNum");
static_assert(sizeof(VivoxComponent_ServerSetObserverTeamNum) == 0x000004, "Wrong size on VivoxComponent_ServerSetObserverTeamNum");
static_assert(offsetof(VivoxComponent_ServerSetObserverTeamNum, NewTeamNum) == 0x000000, "Member 'VivoxComponent_ServerSetObserverTeamNum::NewTeamNum' has a wrong offset!");

// Function TslGame.VivoxManager.OnAddKeyFail
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnAddKeyFail final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnAddKeyFail) == 0x000008, "Wrong alignment on VivoxManager_OnAddKeyFail");
static_assert(sizeof(VivoxManager_OnAddKeyFail) == 0x000008, "Wrong size on VivoxManager_OnAddKeyFail");
static_assert(offsetof(VivoxManager_OnAddKeyFail, Response) == 0x000000, "Member 'VivoxManager_OnAddKeyFail::Response' has a wrong offset!");

// Function TslGame.VivoxManager.OnAddKeySuccess
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnAddKeySuccess final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnAddKeySuccess) == 0x000008, "Wrong alignment on VivoxManager_OnAddKeySuccess");
static_assert(sizeof(VivoxManager_OnAddKeySuccess) == 0x000008, "Wrong size on VivoxManager_OnAddKeySuccess");
static_assert(offsetof(VivoxManager_OnAddKeySuccess, Response) == 0x000000, "Member 'VivoxManager_OnAddKeySuccess::Response' has a wrong offset!");

// Function TslGame.VivoxManager.OnChannelFail
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnChannelFail final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnChannelFail) == 0x000008, "Wrong alignment on VivoxManager_OnChannelFail");
static_assert(sizeof(VivoxManager_OnChannelFail) == 0x000008, "Wrong size on VivoxManager_OnChannelFail");
static_assert(offsetof(VivoxManager_OnChannelFail, Response) == 0x000000, "Member 'VivoxManager_OnChannelFail::Response' has a wrong offset!");

// Function TslGame.VivoxManager.OnChannelSuccess
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnChannelSuccess final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnChannelSuccess) == 0x000008, "Wrong alignment on VivoxManager_OnChannelSuccess");
static_assert(sizeof(VivoxManager_OnChannelSuccess) == 0x000008, "Wrong size on VivoxManager_OnChannelSuccess");
static_assert(offsetof(VivoxManager_OnChannelSuccess, Response) == 0x000000, "Member 'VivoxManager_OnChannelSuccess::Response' has a wrong offset!");

// Function TslGame.VivoxManager.OnRevokeKeyFail
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnRevokeKeyFail final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnRevokeKeyFail) == 0x000008, "Wrong alignment on VivoxManager_OnRevokeKeyFail");
static_assert(sizeof(VivoxManager_OnRevokeKeyFail) == 0x000008, "Wrong size on VivoxManager_OnRevokeKeyFail");
static_assert(offsetof(VivoxManager_OnRevokeKeyFail, Response) == 0x000000, "Member 'VivoxManager_OnRevokeKeyFail::Response' has a wrong offset!");

// Function TslGame.VivoxManager.OnRevokeKeySuccess
// 0x0008 (0x0008 - 0x0000)
struct VivoxManager_OnRevokeKeySuccess final
{
public:
	const class UVivoxResponse*                   Response;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VivoxManager_OnRevokeKeySuccess) == 0x000008, "Wrong alignment on VivoxManager_OnRevokeKeySuccess");
static_assert(sizeof(VivoxManager_OnRevokeKeySuccess) == 0x000008, "Wrong size on VivoxManager_OnRevokeKeySuccess");
static_assert(offsetof(VivoxManager_OnRevokeKeySuccess, Response) == 0x000000, "Member 'VivoxManager_OnRevokeKeySuccess::Response' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.SetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimInfoComponent_SetAccessorySlot final
{
public:
	class UTslAccessoryComponent*                 NewAccessoryComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccessorySlot                                Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimInfoComponent_SetAccessorySlot) == 0x000008, "Wrong alignment on WeaponAnimInfoComponent_SetAccessorySlot");
static_assert(sizeof(WeaponAnimInfoComponent_SetAccessorySlot) == 0x000010, "Wrong size on WeaponAnimInfoComponent_SetAccessorySlot");
static_assert(offsetof(WeaponAnimInfoComponent_SetAccessorySlot, NewAccessoryComponent) == 0x000000, "Member 'WeaponAnimInfoComponent_SetAccessorySlot::NewAccessoryComponent' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_SetAccessorySlot, Slot) == 0x000008, "Member 'WeaponAnimInfoComponent_SetAccessorySlot::Slot' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.GetAccessorySlot
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimInfoComponent_GetAccessorySlot final
{
public:
	EAccessorySlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTslAccessoryComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInfoComponent_GetAccessorySlot) == 0x000008, "Wrong alignment on WeaponAnimInfoComponent_GetAccessorySlot");
static_assert(sizeof(WeaponAnimInfoComponent_GetAccessorySlot) == 0x000010, "Wrong size on WeaponAnimInfoComponent_GetAccessorySlot");
static_assert(offsetof(WeaponAnimInfoComponent_GetAccessorySlot, Slot) == 0x000000, "Member 'WeaponAnimInfoComponent_GetAccessorySlot::Slot' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_GetAccessorySlot, ReturnValue) == 0x000008, "Member 'WeaponAnimInfoComponent_GetAccessorySlot::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponAnimInfoComponent_GetCurrentWeapon final
{
public:
	class ATslWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInfoComponent_GetCurrentWeapon) == 0x000008, "Wrong alignment on WeaponAnimInfoComponent_GetCurrentWeapon");
static_assert(sizeof(WeaponAnimInfoComponent_GetCurrentWeapon) == 0x000008, "Wrong size on WeaponAnimInfoComponent_GetCurrentWeapon");
static_assert(offsetof(WeaponAnimInfoComponent_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'WeaponAnimInfoComponent_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.GetWeaponHandIK_Left
// 0x0040 (0x0040 - 0x0000)
struct WeaponAnimInfoComponent_GetWeaponHandIK_Left final
{
public:
	const class ATslWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInfoComponent_GetWeaponHandIK_Left) == 0x000010, "Wrong alignment on WeaponAnimInfoComponent_GetWeaponHandIK_Left");
static_assert(sizeof(WeaponAnimInfoComponent_GetWeaponHandIK_Left) == 0x000040, "Wrong size on WeaponAnimInfoComponent_GetWeaponHandIK_Left");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponHandIK_Left, Weapon) == 0x000000, "Member 'WeaponAnimInfoComponent_GetWeaponHandIK_Left::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponHandIK_Left, ReturnValue) == 0x000010, "Member 'WeaponAnimInfoComponent_GetWeaponHandIK_Left::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.GetWeaponHandIK_Right
// 0x0040 (0x0040 - 0x0000)
struct WeaponAnimInfoComponent_GetWeaponHandIK_Right final
{
public:
	const class ATslWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInfoComponent_GetWeaponHandIK_Right) == 0x000010, "Wrong alignment on WeaponAnimInfoComponent_GetWeaponHandIK_Right");
static_assert(sizeof(WeaponAnimInfoComponent_GetWeaponHandIK_Right) == 0x000040, "Wrong size on WeaponAnimInfoComponent_GetWeaponHandIK_Right");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponHandIK_Right, Weapon) == 0x000000, "Member 'WeaponAnimInfoComponent_GetWeaponHandIK_Right::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponHandIK_Right, ReturnValue) == 0x000010, "Member 'WeaponAnimInfoComponent_GetWeaponHandIK_Right::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.GetWeaponLeftHandIKTransform
// 0x0040 (0x0040 - 0x0000)
struct WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform final
{
public:
	const class ATslWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform) == 0x000010, "Wrong alignment on WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform");
static_assert(sizeof(WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform) == 0x000040, "Wrong size on WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform, Weapon) == 0x000000, "Member 'WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform, ReturnValue) == 0x000010, "Member 'WeaponAnimInfoComponent_GetWeaponLeftHandIKTransform::ReturnValue' has a wrong offset!");

// Function TslGame.WeaponAnimInfoComponent.HasWeaponLeftHandIKSocket
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket final
{
public:
	const class ATslWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket) == 0x000008, "Wrong alignment on WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket");
static_assert(sizeof(WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket) == 0x000010, "Wrong size on WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket");
static_assert(offsetof(WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket, Weapon) == 0x000000, "Member 'WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket, ReturnValue) == 0x000008, "Member 'WeaponAnimInfoComponent_HasWeaponLeftHandIKSocket::ReturnValue' has a wrong offset!");

}

