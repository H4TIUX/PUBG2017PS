#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TslItemDragDropOperation

#include "Basic.hpp"

#include "TslGame_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TslItemDragDropOperation.TslItemDragDropOperation_C
// 0x0080 (0x0108 - 0x0088)
class UTslItemDragDropOperation_C final : public UDragDropOperation
{
public:
	class UItem*                                  DragDroppingItem;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	int32                                         MouseOverWeaponSlotIndex;                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipableItem*                         DragDroppingEquipableItem;                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	class UWeaponItem*                            DragDroppingWeaponItem;                            // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	class UThrowableItem*                         DragDroppingThrowableItem;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	int32                                         MouseOverAttachmentWeaponSlotIndex;                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeaponAttachmentSlotID                       MouseOverAttachmentSlotId;                         // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttachableItem*                        DragDroppingAttachableItem;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsMouseOverVicinity;                              // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsMouseOverInventory;                             // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsMouseOverEquipment;                             // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsMouseOverWeaponEquipment;                       // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsMouseOverAttachmentSlot;                        // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlotContainerInterface> Container;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	TScriptInterface<class ISlotInterface>        Slot;                                              // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	int32                                         DragDroppingWeaponIndex;                           // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEquipSlotID                                  MouseOverSlotId;                                   // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class ISlotContainerInterface>> OtherContainerStack;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FName                                   ActionName;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetOptions(class FString* Options);
	void GetActionName(struct FName* ActionName_0);
	void IsEnableAction(bool* IsEnableAction_0);
	void EnterOtherContainer(TScriptInterface<class ISlotContainerInterface> NewOtherContainer);
	void LeaveOtherContainer();
	void GetCurrentOtherContainer(TScriptInterface<class ISlotContainerInterface>* OtherContainer);
	void IsInEquipment(bool* NewParam);
	void IsDragDroppingItemWeapon(bool* IsWeapon);
	void IsDragDroppingItemAttachment(bool* IsAttachment);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TslItemDragDropOperation_C">();
	}
	static class UTslItemDragDropOperation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTslItemDragDropOperation_C>();
	}
};
static_assert(alignof(UTslItemDragDropOperation_C) == 0x000008, "Wrong alignment on UTslItemDragDropOperation_C");
static_assert(sizeof(UTslItemDragDropOperation_C) == 0x000108, "Wrong size on UTslItemDragDropOperation_C");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingItem) == 0x000088, "Member 'UTslItemDragDropOperation_C::DragDroppingItem' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, MouseOverWeaponSlotIndex) == 0x000090, "Member 'UTslItemDragDropOperation_C::MouseOverWeaponSlotIndex' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingEquipableItem) == 0x000098, "Member 'UTslItemDragDropOperation_C::DragDroppingEquipableItem' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingWeaponItem) == 0x0000A0, "Member 'UTslItemDragDropOperation_C::DragDroppingWeaponItem' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingThrowableItem) == 0x0000A8, "Member 'UTslItemDragDropOperation_C::DragDroppingThrowableItem' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, MouseOverAttachmentWeaponSlotIndex) == 0x0000B0, "Member 'UTslItemDragDropOperation_C::MouseOverAttachmentWeaponSlotIndex' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, MouseOverAttachmentSlotId) == 0x0000B4, "Member 'UTslItemDragDropOperation_C::MouseOverAttachmentSlotId' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingAttachableItem) == 0x0000B8, "Member 'UTslItemDragDropOperation_C::DragDroppingAttachableItem' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, bIsMouseOverVicinity) == 0x0000C0, "Member 'UTslItemDragDropOperation_C::bIsMouseOverVicinity' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, bIsMouseOverInventory) == 0x0000C1, "Member 'UTslItemDragDropOperation_C::bIsMouseOverInventory' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, bIsMouseOverEquipment) == 0x0000C2, "Member 'UTslItemDragDropOperation_C::bIsMouseOverEquipment' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, bIsMouseOverWeaponEquipment) == 0x0000C3, "Member 'UTslItemDragDropOperation_C::bIsMouseOverWeaponEquipment' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, bIsMouseOverAttachmentSlot) == 0x0000C4, "Member 'UTslItemDragDropOperation_C::bIsMouseOverAttachmentSlot' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, Container) == 0x0000C8, "Member 'UTslItemDragDropOperation_C::Container' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, Slot) == 0x0000D8, "Member 'UTslItemDragDropOperation_C::Slot' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, DragDroppingWeaponIndex) == 0x0000E8, "Member 'UTslItemDragDropOperation_C::DragDroppingWeaponIndex' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, MouseOverSlotId) == 0x0000EC, "Member 'UTslItemDragDropOperation_C::MouseOverSlotId' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, OtherContainerStack) == 0x0000F0, "Member 'UTslItemDragDropOperation_C::OtherContainerStack' has a wrong offset!");
static_assert(offsetof(UTslItemDragDropOperation_C, ActionName) == 0x000100, "Member 'UTslItemDragDropOperation_C::ActionName' has a wrong offset!");

}

