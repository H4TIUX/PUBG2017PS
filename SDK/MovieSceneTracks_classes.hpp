#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneTracks

#include "Basic.hpp"

#include "MovieScene_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieSceneTracks_structs.hpp"


namespace SDK
{

// Class MovieSceneTracks.MovieScene3DConstraintSection
// 0x0010 (0x0050 - 0x0040)
class alignas(8) UMovieScene3DConstraintSection : public UMovieSceneSection
{
public:
	struct FGuid                                  ConstraintId;                                      // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintSection">();
	}
	static class UMovieScene3DConstraintSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintSection>();
	}
};
static_assert(alignof(UMovieScene3DConstraintSection) == 0x000008, "Wrong alignment on UMovieScene3DConstraintSection");
static_assert(sizeof(UMovieScene3DConstraintSection) == 0x000050, "Wrong size on UMovieScene3DConstraintSection");
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintId) == 0x000040, "Member 'UMovieScene3DConstraintSection::ConstraintId' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachSection
// 0x0018 (0x0068 - 0x0050)
class UMovieScene3DAttachSection final : public UMovieScene3DConstraintSection
{
public:
	struct FName                                   AttachSocketName;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   AttachComponentName;                               // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConstrainTx : 1;                                  // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainTy : 1;                                  // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainTz : 1;                                  // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRx : 1;                                  // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRy : 1;                                  // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRz : 1;                                  // 0x0060(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachSection">();
	}
	static class UMovieScene3DAttachSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachSection>();
	}
};
static_assert(alignof(UMovieScene3DAttachSection) == 0x000008, "Wrong alignment on UMovieScene3DAttachSection");
static_assert(sizeof(UMovieScene3DAttachSection) == 0x000068, "Wrong size on UMovieScene3DAttachSection");
static_assert(offsetof(UMovieScene3DAttachSection, AttachSocketName) == 0x000050, "Member 'UMovieScene3DAttachSection::AttachSocketName' has a wrong offset!");
static_assert(offsetof(UMovieScene3DAttachSection, AttachComponentName) == 0x000058, "Member 'UMovieScene3DAttachSection::AttachComponentName' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DPathSection
// 0x0080 (0x00D0 - 0x0050)
class UMovieScene3DPathSection final : public UMovieScene3DConstraintSection
{
public:
	struct FRichCurve                             TimingCurve;                                       // 0x0050(0x0078)(Edit, NativeAccessSpecifierPrivate)
	EMovieScene3DPathSection_Axis                 FrontAxisEnum;                                     // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMovieScene3DPathSection_Axis                 UpAxisEnum;                                        // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFollow : 1;                                       // 0x00CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bReverse : 1;                                      // 0x00CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bForceUpright : 1;                                 // 0x00CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathSection">();
	}
	static class UMovieScene3DPathSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathSection>();
	}
};
static_assert(alignof(UMovieScene3DPathSection) == 0x000008, "Wrong alignment on UMovieScene3DPathSection");
static_assert(sizeof(UMovieScene3DPathSection) == 0x0000D0, "Wrong size on UMovieScene3DPathSection");
static_assert(offsetof(UMovieScene3DPathSection, TimingCurve) == 0x000050, "Member 'UMovieScene3DPathSection::TimingCurve' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, FrontAxisEnum) == 0x0000C8, "Member 'UMovieScene3DPathSection::FrontAxisEnum' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, UpAxisEnum) == 0x0000C9, "Member 'UMovieScene3DPathSection::UpAxisEnum' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DConstraintTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             ConstraintSections;                                // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintTrack">();
	}
	static class UMovieScene3DConstraintTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintTrack>();
	}
};
static_assert(alignof(UMovieScene3DConstraintTrack) == 0x000008, "Wrong alignment on UMovieScene3DConstraintTrack");
static_assert(sizeof(UMovieScene3DConstraintTrack) == 0x000038, "Wrong size on UMovieScene3DConstraintTrack");
static_assert(offsetof(UMovieScene3DConstraintTrack, ConstraintSections) == 0x000028, "Member 'UMovieScene3DConstraintTrack::ConstraintSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachTrack
// 0x0000 (0x0038 - 0x0038)
class UMovieScene3DAttachTrack final : public UMovieScene3DConstraintTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachTrack">();
	}
	static class UMovieScene3DAttachTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachTrack>();
	}
};
static_assert(alignof(UMovieScene3DAttachTrack) == 0x000008, "Wrong alignment on UMovieScene3DAttachTrack");
static_assert(sizeof(UMovieScene3DAttachTrack) == 0x000038, "Wrong size on UMovieScene3DAttachTrack");

// Class MovieSceneTracks.MovieScene3DPathTrack
// 0x0000 (0x0038 - 0x0038)
class UMovieScene3DPathTrack final : public UMovieScene3DConstraintTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathTrack">();
	}
	static class UMovieScene3DPathTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathTrack>();
	}
};
static_assert(alignof(UMovieScene3DPathTrack) == 0x000008, "Wrong alignment on UMovieScene3DPathTrack");
static_assert(sizeof(UMovieScene3DPathTrack) == 0x000038, "Wrong size on UMovieScene3DPathTrack");

// Class MovieSceneTracks.MovieScene3DTransformSection
// 0x0440 (0x0480 - 0x0040)
class UMovieScene3DTransformSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Translation[0x3];                                  // 0x0048(0x0078)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Rotation[0x3];                                     // 0x01B0(0x0078)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Scale[0x3];                                        // 0x0318(0x0078)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformSection">();
	}
	static class UMovieScene3DTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformSection>();
	}
};
static_assert(alignof(UMovieScene3DTransformSection) == 0x000008, "Wrong alignment on UMovieScene3DTransformSection");
static_assert(sizeof(UMovieScene3DTransformSection) == 0x000480, "Wrong size on UMovieScene3DTransformSection");
static_assert(offsetof(UMovieScene3DTransformSection, Translation) == 0x000048, "Member 'UMovieScene3DTransformSection::Translation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Rotation) == 0x0001B0, "Member 'UMovieScene3DTransformSection::Rotation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Scale) == 0x000318, "Member 'UMovieScene3DTransformSection::Scale' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneActorReferenceSection
// 0x0098 (0x00D8 - 0x0040)
class UMovieSceneActorReferenceSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntegralCurve                         ActorGuidIndexCurve;                               // 0x0048(0x0070)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ActorGuidStrings;                                  // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneActorReferenceSection">();
	}
	static class UMovieSceneActorReferenceSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneActorReferenceSection>();
	}
};
static_assert(alignof(UMovieSceneActorReferenceSection) == 0x000008, "Wrong alignment on UMovieSceneActorReferenceSection");
static_assert(sizeof(UMovieSceneActorReferenceSection) == 0x0000D8, "Wrong size on UMovieSceneActorReferenceSection");
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidIndexCurve) == 0x000048, "Member 'UMovieSceneActorReferenceSection::ActorGuidIndexCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidStrings) == 0x0000C8, "Member 'UMovieSceneActorReferenceSection::ActorGuidStrings' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneAudioSection
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneAudioSection final : public UMovieSceneSection
{
public:
	class USoundBase*                             Sound;                                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioStartTime;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioDilationFactor;                               // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioVolume;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSuppressSubtitles;                                // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioSection">();
	}
	static class UMovieSceneAudioSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioSection>();
	}
};
static_assert(alignof(UMovieSceneAudioSection) == 0x000008, "Wrong alignment on UMovieSceneAudioSection");
static_assert(sizeof(UMovieSceneAudioSection) == 0x000058, "Wrong size on UMovieSceneAudioSection");
static_assert(offsetof(UMovieSceneAudioSection, Sound) == 0x000040, "Member 'UMovieSceneAudioSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioStartTime) == 0x000048, "Member 'UMovieSceneAudioSection::AudioStartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioDilationFactor) == 0x00004C, "Member 'UMovieSceneAudioSection::AudioDilationFactor' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioVolume) == 0x000050, "Member 'UMovieSceneAudioSection::AudioVolume' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, bSuppressSubtitles) == 0x000054, "Member 'UMovieSceneAudioSection::bSuppressSubtitles' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneAudioTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneAudioTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AudioSections;                                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioTrack">();
	}
	static class UMovieSceneAudioTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioTrack>();
	}
};
static_assert(alignof(UMovieSceneAudioTrack) == 0x000008, "Wrong alignment on UMovieSceneAudioTrack");
static_assert(sizeof(UMovieSceneAudioTrack) == 0x000038, "Wrong size on UMovieSceneAudioTrack");
static_assert(offsetof(UMovieSceneAudioTrack, AudioSections) == 0x000028, "Member 'UMovieSceneAudioTrack::AudioSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneBoolSection
// 0x0080 (0x00C0 - 0x0040)
class UMovieSceneBoolSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DefaultValue;                                      // 0x0048(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntegralCurve                         BoolCurve;                                         // 0x0050(0x0070)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolSection">();
	}
	static class UMovieSceneBoolSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolSection>();
	}
};
static_assert(alignof(UMovieSceneBoolSection) == 0x000008, "Wrong alignment on UMovieSceneBoolSection");
static_assert(sizeof(UMovieSceneBoolSection) == 0x0000C0, "Wrong size on UMovieSceneBoolSection");
static_assert(offsetof(UMovieSceneBoolSection, DefaultValue) == 0x000048, "Member 'UMovieSceneBoolSection::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMovieSceneBoolSection, BoolCurve) == 0x000050, "Member 'UMovieSceneBoolSection::BoolCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneVisibilitySection
// 0x0000 (0x00C0 - 0x00C0)
class UMovieSceneVisibilitySection final : public UMovieSceneBoolSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilitySection">();
	}
	static class UMovieSceneVisibilitySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilitySection>();
	}
};
static_assert(alignof(UMovieSceneVisibilitySection) == 0x000008, "Wrong alignment on UMovieSceneVisibilitySection");
static_assert(sizeof(UMovieSceneVisibilitySection) == 0x0000C0, "Wrong size on UMovieSceneVisibilitySection");

// Class MovieSceneTracks.MovieSceneByteSection
// 0x0078 (0x00B8 - 0x0040)
class UMovieSceneByteSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntegralCurve                         ByteCurve;                                         // 0x0048(0x0070)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteSection">();
	}
	static class UMovieSceneByteSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteSection>();
	}
};
static_assert(alignof(UMovieSceneByteSection) == 0x000008, "Wrong alignment on UMovieSceneByteSection");
static_assert(sizeof(UMovieSceneByteSection) == 0x0000B8, "Wrong size on UMovieSceneByteSection");
static_assert(offsetof(UMovieSceneByteSection, ByteCurve) == 0x000048, "Member 'UMovieSceneByteSection::ByteCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraAnimSection
// 0x0028 (0x0068 - 0x0040)
class UMovieSceneCameraAnimSection final : public UMovieSceneSection
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayRate;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayScale;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x1];                                       // 0x0059(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ECameraAnimPlaySpace                          PlaySpace;                                         // 0x005A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserDefinedPlaySpace;                              // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraAnimSection">();
	}
	static class UMovieSceneCameraAnimSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraAnimSection>();
	}
};
static_assert(alignof(UMovieSceneCameraAnimSection) == 0x000008, "Wrong alignment on UMovieSceneCameraAnimSection");
static_assert(sizeof(UMovieSceneCameraAnimSection) == 0x000068, "Wrong size on UMovieSceneCameraAnimSection");
static_assert(offsetof(UMovieSceneCameraAnimSection, CameraAnim) == 0x000040, "Member 'UMovieSceneCameraAnimSection::CameraAnim' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, PlayRate) == 0x000048, "Member 'UMovieSceneCameraAnimSection::PlayRate' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, PlayScale) == 0x00004C, "Member 'UMovieSceneCameraAnimSection::PlayScale' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, BlendInTime) == 0x000050, "Member 'UMovieSceneCameraAnimSection::BlendInTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, BlendOutTime) == 0x000054, "Member 'UMovieSceneCameraAnimSection::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, bLooping) == 0x000058, "Member 'UMovieSceneCameraAnimSection::bLooping' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, PlaySpace) == 0x00005A, "Member 'UMovieSceneCameraAnimSection::PlaySpace' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraAnimSection, UserDefinedPlaySpace) == 0x00005C, "Member 'UMovieSceneCameraAnimSection::UserDefinedPlaySpace' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraAnimTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneCameraAnimTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             CameraAnimSections;                                // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraAnimTrack">();
	}
	static class UMovieSceneCameraAnimTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraAnimTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraAnimTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraAnimTrack");
static_assert(sizeof(UMovieSceneCameraAnimTrack) == 0x000038, "Wrong size on UMovieSceneCameraAnimTrack");
static_assert(offsetof(UMovieSceneCameraAnimTrack, CameraAnimSections) == 0x000028, "Member 'UMovieSceneCameraAnimTrack::CameraAnimSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraCutSection
// 0x0010 (0x0050 - 0x0040)
class alignas(8) UMovieSceneCameraCutSection final : public UMovieSceneSection
{
public:
	struct FGuid                                  CameraGuid;                                        // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraCutSection">();
	}
	static class UMovieSceneCameraCutSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraCutSection>();
	}
};
static_assert(alignof(UMovieSceneCameraCutSection) == 0x000008, "Wrong alignment on UMovieSceneCameraCutSection");
static_assert(sizeof(UMovieSceneCameraCutSection) == 0x000050, "Wrong size on UMovieSceneCameraCutSection");
static_assert(offsetof(UMovieSceneCameraCutSection, CameraGuid) == 0x000040, "Member 'UMovieSceneCameraCutSection::CameraGuid' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraCutTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneCameraCutTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraCutTrack">();
	}
	static class UMovieSceneCameraCutTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraCutTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraCutTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraCutTrack");
static_assert(sizeof(UMovieSceneCameraCutTrack) == 0x000038, "Wrong size on UMovieSceneCameraCutTrack");
static_assert(offsetof(UMovieSceneCameraCutTrack, Sections) == 0x000028, "Member 'UMovieSceneCameraCutTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeSection
// 0x0020 (0x0060 - 0x0040)
class UMovieSceneCameraShakeSection final : public UMovieSceneSection
{
public:
	TSubclassOf<class UCameraShake>               ShakeClass;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayScale;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAnimPlaySpace                          PlaySpace;                                         // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserDefinedPlaySpace;                              // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeSection">();
	}
	static class UMovieSceneCameraShakeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeSection>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeSection) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeSection");
static_assert(sizeof(UMovieSceneCameraShakeSection) == 0x000060, "Wrong size on UMovieSceneCameraShakeSection");
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeClass) == 0x000040, "Member 'UMovieSceneCameraShakeSection::ShakeClass' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, PlayScale) == 0x000048, "Member 'UMovieSceneCameraShakeSection::PlayScale' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, PlaySpace) == 0x00004C, "Member 'UMovieSceneCameraShakeSection::PlaySpace' has a wrong offset!");
static_assert(offsetof(UMovieSceneCameraShakeSection, UserDefinedPlaySpace) == 0x000050, "Member 'UMovieSceneCameraShakeSection::UserDefinedPlaySpace' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCameraShakeTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneCameraShakeTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             CameraShakeSections;                               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCameraShakeTrack">();
	}
	static class UMovieSceneCameraShakeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCameraShakeTrack>();
	}
};
static_assert(alignof(UMovieSceneCameraShakeTrack) == 0x000008, "Wrong alignment on UMovieSceneCameraShakeTrack");
static_assert(sizeof(UMovieSceneCameraShakeTrack) == 0x000038, "Wrong size on UMovieSceneCameraShakeTrack");
static_assert(offsetof(UMovieSceneCameraShakeTrack, CameraShakeSections) == 0x000028, "Member 'UMovieSceneCameraShakeTrack::CameraShakeSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneColorSection
// 0x01E8 (0x0228 - 0x0040)
class UMovieSceneColorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             RedCurve;                                          // 0x0048(0x0078)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             GreenCurve;                                        // 0x00C0(0x0078)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             BlueCurve;                                         // 0x0138(0x0078)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             AlphaCurve;                                        // 0x01B0(0x0078)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorSection">();
	}
	static class UMovieSceneColorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorSection>();
	}
};
static_assert(alignof(UMovieSceneColorSection) == 0x000008, "Wrong alignment on UMovieSceneColorSection");
static_assert(sizeof(UMovieSceneColorSection) == 0x000228, "Wrong size on UMovieSceneColorSection");
static_assert(offsetof(UMovieSceneColorSection, RedCurve) == 0x000048, "Member 'UMovieSceneColorSection::RedCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, GreenCurve) == 0x0000C0, "Member 'UMovieSceneColorSection::GreenCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, BlueCurve) == 0x000138, "Member 'UMovieSceneColorSection::BlueCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, AlphaCurve) == 0x0001B0, "Member 'UMovieSceneColorSection::AlphaCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventSection
// 0x0068 (0x00A8 - 0x0040)
class UMovieSceneEventSection final : public UMovieSceneSection
{
public:
	struct FNameCurve                             Events;                                            // 0x0040(0x0068)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventSection">();
	}
	static class UMovieSceneEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventSection>();
	}
};
static_assert(alignof(UMovieSceneEventSection) == 0x000008, "Wrong alignment on UMovieSceneEventSection");
static_assert(sizeof(UMovieSceneEventSection) == 0x0000A8, "Wrong size on UMovieSceneEventSection");
static_assert(offsetof(UMovieSceneEventSection, Events) == 0x000040, "Member 'UMovieSceneEventSection::Events' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventTrack
// 0x0018 (0x0040 - 0x0028)
class UMovieSceneEventTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventTrack">();
	}
	static class UMovieSceneEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventTrack>();
	}
};
static_assert(alignof(UMovieSceneEventTrack) == 0x000008, "Wrong alignment on UMovieSceneEventTrack");
static_assert(sizeof(UMovieSceneEventTrack) == 0x000040, "Wrong size on UMovieSceneEventTrack");
static_assert(offsetof(UMovieSceneEventTrack, Sections) == 0x000030, "Member 'UMovieSceneEventTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatSection
// 0x0080 (0x00C0 - 0x0040)
class UMovieSceneFloatSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             FloatCurve;                                        // 0x0048(0x0078)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatSection">();
	}
	static class UMovieSceneFloatSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatSection>();
	}
};
static_assert(alignof(UMovieSceneFloatSection) == 0x000008, "Wrong alignment on UMovieSceneFloatSection");
static_assert(sizeof(UMovieSceneFloatSection) == 0x0000C0, "Wrong size on UMovieSceneFloatSection");
static_assert(offsetof(UMovieSceneFloatSection, FloatCurve) == 0x000048, "Member 'UMovieSceneFloatSection::FloatCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFadeSection
// 0x0018 (0x00D8 - 0x00C0)
class UMovieSceneFadeSection final : public UMovieSceneFloatSection
{
public:
	struct FLinearColor                           FadeColor;                                         // 0x00C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bFadeAudio : 1;                                    // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeSection">();
	}
	static class UMovieSceneFadeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeSection>();
	}
};
static_assert(alignof(UMovieSceneFadeSection) == 0x000008, "Wrong alignment on UMovieSceneFadeSection");
static_assert(sizeof(UMovieSceneFadeSection) == 0x0000D8, "Wrong size on UMovieSceneFadeSection");
static_assert(offsetof(UMovieSceneFadeSection, FadeColor) == 0x0000C0, "Member 'UMovieSceneFadeSection::FadeColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSlomoSection
// 0x0000 (0x00C0 - 0x00C0)
class UMovieSceneSlomoSection final : public UMovieSceneFloatSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoSection">();
	}
	static class UMovieSceneSlomoSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoSection>();
	}
};
static_assert(alignof(UMovieSceneSlomoSection) == 0x000008, "Wrong alignment on UMovieSceneSlomoSection");
static_assert(sizeof(UMovieSceneSlomoSection) == 0x0000C0, "Wrong size on UMovieSceneSlomoSection");

// Class MovieSceneTracks.MovieSceneLevelVisibilitySection
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneLevelVisibilitySection final : public UMovieSceneSection
{
public:
	ELevelVisibility                              Visibility;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FName>                           LevelNames;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLevelVisibilitySection">();
	}
	static class UMovieSceneLevelVisibilitySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLevelVisibilitySection>();
	}
};
static_assert(alignof(UMovieSceneLevelVisibilitySection) == 0x000008, "Wrong alignment on UMovieSceneLevelVisibilitySection");
static_assert(sizeof(UMovieSceneLevelVisibilitySection) == 0x000058, "Wrong size on UMovieSceneLevelVisibilitySection");
static_assert(offsetof(UMovieSceneLevelVisibilitySection, Visibility) == 0x000040, "Member 'UMovieSceneLevelVisibilitySection::Visibility' has a wrong offset!");
static_assert(offsetof(UMovieSceneLevelVisibilitySection, LevelNames) == 0x000048, "Member 'UMovieSceneLevelVisibilitySection::LevelNames' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePropertyTrack
// 0x0028 (0x0050 - 0x0028)
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{
public:
	struct FName                                   PropertyName;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PropertyPath;                                      // 0x0030(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertyTrack">();
	}
	static class UMovieScenePropertyTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertyTrack>();
	}
};
static_assert(alignof(UMovieScenePropertyTrack) == 0x000008, "Wrong alignment on UMovieScenePropertyTrack");
static_assert(sizeof(UMovieScenePropertyTrack) == 0x000050, "Wrong size on UMovieScenePropertyTrack");
static_assert(offsetof(UMovieScenePropertyTrack, PropertyName) == 0x000028, "Member 'UMovieScenePropertyTrack::PropertyName' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, PropertyPath) == 0x000030, "Member 'UMovieScenePropertyTrack::PropertyPath' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, Sections) == 0x000040, "Member 'UMovieScenePropertyTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneLevelVisibilityTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneLevelVisibilityTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneLevelVisibilityTrack">();
	}
	static class UMovieSceneLevelVisibilityTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneLevelVisibilityTrack>();
	}
};
static_assert(alignof(UMovieSceneLevelVisibilityTrack) == 0x000008, "Wrong alignment on UMovieSceneLevelVisibilityTrack");
static_assert(sizeof(UMovieSceneLevelVisibilityTrack) == 0x000038, "Wrong size on UMovieSceneLevelVisibilityTrack");
static_assert(offsetof(UMovieSceneLevelVisibilityTrack, Sections) == 0x000028, "Member 'UMovieSceneLevelVisibilityTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParameterSection
// 0x0030 (0x0070 - 0x0040)
class UMovieSceneParameterSection final : public UMovieSceneSection
{
public:
	TArray<struct FScalarParameterNameAndCurve>   ScalarParameterNamesAndCurves;                     // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVectorParameterNameAndCurves>  VectorParameterNamesAndCurves;                     // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FColorParameterNameAndCurves>   ColorParameterNamesAndCurves;                      // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParameterSection">();
	}
	static class UMovieSceneParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParameterSection>();
	}
};
static_assert(alignof(UMovieSceneParameterSection) == 0x000008, "Wrong alignment on UMovieSceneParameterSection");
static_assert(sizeof(UMovieSceneParameterSection) == 0x000070, "Wrong size on UMovieSceneParameterSection");
static_assert(offsetof(UMovieSceneParameterSection, ScalarParameterNamesAndCurves) == 0x000040, "Member 'UMovieSceneParameterSection::ScalarParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, VectorParameterNamesAndCurves) == 0x000050, "Member 'UMovieSceneParameterSection::VectorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, ColorParameterNamesAndCurves) == 0x000060, "Member 'UMovieSceneParameterSection::ColorParameterNamesAndCurves' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneMaterialTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialTrack">();
	}
	static class UMovieSceneMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneMaterialTrack) == 0x000008, "Wrong alignment on UMovieSceneMaterialTrack");
static_assert(sizeof(UMovieSceneMaterialTrack) == 0x000038, "Wrong size on UMovieSceneMaterialTrack");
static_assert(offsetof(UMovieSceneMaterialTrack, Sections) == 0x000028, "Member 'UMovieSceneMaterialTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneComponentMaterialTrack
// 0x0008 (0x0040 - 0x0038)
class UMovieSceneComponentMaterialTrack final : public UMovieSceneMaterialTrack
{
public:
	int32                                         MaterialIndex;                                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMaterialTrack">();
	}
	static class UMovieSceneComponentMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneComponentMaterialTrack) == 0x000008, "Wrong alignment on UMovieSceneComponentMaterialTrack");
static_assert(sizeof(UMovieSceneComponentMaterialTrack) == 0x000040, "Wrong size on UMovieSceneComponentMaterialTrack");
static_assert(offsetof(UMovieSceneComponentMaterialTrack, MaterialIndex) == 0x000038, "Member 'UMovieSceneComponentMaterialTrack::MaterialIndex' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleParameterTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneParticleParameterTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleParameterTrack">();
	}
	static class UMovieSceneParticleParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleParameterTrack) == 0x000008, "Wrong alignment on UMovieSceneParticleParameterTrack");
static_assert(sizeof(UMovieSceneParticleParameterTrack) == 0x000038, "Wrong size on UMovieSceneParticleParameterTrack");
static_assert(offsetof(UMovieSceneParticleParameterTrack, Sections) == 0x000028, "Member 'UMovieSceneParticleParameterTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleSection
// 0x0070 (0x00B0 - 0x0040)
class UMovieSceneParticleSection final : public UMovieSceneSection
{
public:
	struct FIntegralCurve                         ParticleKeys;                                      // 0x0040(0x0070)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleSection">();
	}
	static class UMovieSceneParticleSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleSection>();
	}
};
static_assert(alignof(UMovieSceneParticleSection) == 0x000008, "Wrong alignment on UMovieSceneParticleSection");
static_assert(sizeof(UMovieSceneParticleSection) == 0x0000B0, "Wrong size on UMovieSceneParticleSection");
static_assert(offsetof(UMovieSceneParticleSection, ParticleKeys) == 0x000040, "Member 'UMovieSceneParticleSection::ParticleKeys' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneParticleTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             ParticleSections;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleTrack">();
	}
	static class UMovieSceneParticleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleTrack) == 0x000008, "Wrong alignment on UMovieSceneParticleTrack");
static_assert(sizeof(UMovieSceneParticleTrack) == 0x000038, "Wrong size on UMovieSceneParticleTrack");
static_assert(offsetof(UMovieSceneParticleTrack, ParticleSections) == 0x000028, "Member 'UMovieSceneParticleTrack::ParticleSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieScene3DTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformTrack">();
	}
	static class UMovieScene3DTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformTrack>();
	}
};
static_assert(alignof(UMovieScene3DTransformTrack) == 0x000008, "Wrong alignment on UMovieScene3DTransformTrack");
static_assert(sizeof(UMovieScene3DTransformTrack) == 0x000050, "Wrong size on UMovieScene3DTransformTrack");

// Class MovieSceneTracks.MovieSceneActorReferenceTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneActorReferenceTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneActorReferenceTrack">();
	}
	static class UMovieSceneActorReferenceTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneActorReferenceTrack>();
	}
};
static_assert(alignof(UMovieSceneActorReferenceTrack) == 0x000008, "Wrong alignment on UMovieSceneActorReferenceTrack");
static_assert(sizeof(UMovieSceneActorReferenceTrack) == 0x000050, "Wrong size on UMovieSceneActorReferenceTrack");

// Class MovieSceneTracks.MovieSceneBoolTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolTrack">();
	}
	static class UMovieSceneBoolTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolTrack>();
	}
};
static_assert(alignof(UMovieSceneBoolTrack) == 0x000008, "Wrong alignment on UMovieSceneBoolTrack");
static_assert(sizeof(UMovieSceneBoolTrack) == 0x000050, "Wrong size on UMovieSceneBoolTrack");

// Class MovieSceneTracks.MovieSceneVisibilityTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneVisibilityTrack final : public UMovieSceneBoolTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilityTrack">();
	}
	static class UMovieSceneVisibilityTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilityTrack>();
	}
};
static_assert(alignof(UMovieSceneVisibilityTrack) == 0x000008, "Wrong alignment on UMovieSceneVisibilityTrack");
static_assert(sizeof(UMovieSceneVisibilityTrack) == 0x000050, "Wrong size on UMovieSceneVisibilityTrack");

// Class MovieSceneTracks.MovieSceneByteTrack
// 0x0008 (0x0058 - 0x0050)
class UMovieSceneByteTrack final : public UMovieScenePropertyTrack
{
public:
	class UEnum*                                  Enum;                                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteTrack">();
	}
	static class UMovieSceneByteTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteTrack>();
	}
};
static_assert(alignof(UMovieSceneByteTrack) == 0x000008, "Wrong alignment on UMovieSceneByteTrack");
static_assert(sizeof(UMovieSceneByteTrack) == 0x000058, "Wrong size on UMovieSceneByteTrack");
static_assert(offsetof(UMovieSceneByteTrack, Enum) == 0x000050, "Member 'UMovieSceneByteTrack::Enum' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneColorTrack
// 0x0008 (0x0058 - 0x0050)
class UMovieSceneColorTrack final : public UMovieScenePropertyTrack
{
public:
	bool                                          bIsSlateColor;                                     // 0x0050(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorTrack">();
	}
	static class UMovieSceneColorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorTrack>();
	}
};
static_assert(alignof(UMovieSceneColorTrack) == 0x000008, "Wrong alignment on UMovieSceneColorTrack");
static_assert(sizeof(UMovieSceneColorTrack) == 0x000058, "Wrong size on UMovieSceneColorTrack");
static_assert(offsetof(UMovieSceneColorTrack, bIsSlateColor) == 0x000050, "Member 'UMovieSceneColorTrack::bIsSlateColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatTrack">();
	}
	static class UMovieSceneFloatTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatTrack>();
	}
};
static_assert(alignof(UMovieSceneFloatTrack) == 0x000008, "Wrong alignment on UMovieSceneFloatTrack");
static_assert(sizeof(UMovieSceneFloatTrack) == 0x000050, "Wrong size on UMovieSceneFloatTrack");

// Class MovieSceneTracks.MovieSceneFadeTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneFadeTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeTrack">();
	}
	static class UMovieSceneFadeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeTrack>();
	}
};
static_assert(alignof(UMovieSceneFadeTrack) == 0x000008, "Wrong alignment on UMovieSceneFadeTrack");
static_assert(sizeof(UMovieSceneFadeTrack) == 0x000050, "Wrong size on UMovieSceneFadeTrack");

// Class MovieSceneTracks.MovieSceneSlomoTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneSlomoTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoTrack">();
	}
	static class UMovieSceneSlomoTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoTrack>();
	}
};
static_assert(alignof(UMovieSceneSlomoTrack) == 0x000008, "Wrong alignment on UMovieSceneSlomoTrack");
static_assert(sizeof(UMovieSceneSlomoTrack) == 0x000050, "Wrong size on UMovieSceneSlomoTrack");

// Class MovieSceneTracks.MovieSceneStringTrack
// 0x0000 (0x0050 - 0x0050)
class UMovieSceneStringTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneStringTrack">();
	}
	static class UMovieSceneStringTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneStringTrack>();
	}
};
static_assert(alignof(UMovieSceneStringTrack) == 0x000008, "Wrong alignment on UMovieSceneStringTrack");
static_assert(sizeof(UMovieSceneStringTrack) == 0x000050, "Wrong size on UMovieSceneStringTrack");

// Class MovieSceneTracks.MovieSceneVectorTrack
// 0x0008 (0x0058 - 0x0050)
class UMovieSceneVectorTrack final : public UMovieScenePropertyTrack
{
public:
	int32                                         NumChannelsUsed;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVectorTrack">();
	}
	static class UMovieSceneVectorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVectorTrack>();
	}
};
static_assert(alignof(UMovieSceneVectorTrack) == 0x000008, "Wrong alignment on UMovieSceneVectorTrack");
static_assert(sizeof(UMovieSceneVectorTrack) == 0x000058, "Wrong size on UMovieSceneVectorTrack");
static_assert(offsetof(UMovieSceneVectorTrack, NumChannelsUsed) == 0x000050, "Member 'UMovieSceneVectorTrack::NumChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationSection
// 0x0028 (0x0068 - 0x0040)
class UMovieSceneSkeletalAnimationSection final : public UMovieSceneSection
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0040(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      Animation;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndOffset;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayRate;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bReverse : 1;                                      // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FName                                   SlotName;                                          // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationSection">();
	}
	static class UMovieSceneSkeletalAnimationSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationSection>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationSection) == 0x000008, "Wrong alignment on UMovieSceneSkeletalAnimationSection");
static_assert(sizeof(UMovieSceneSkeletalAnimationSection) == 0x000068, "Wrong size on UMovieSceneSkeletalAnimationSection");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, AnimSequence) == 0x000040, "Member 'UMovieSceneSkeletalAnimationSection::AnimSequence' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Animation) == 0x000048, "Member 'UMovieSceneSkeletalAnimationSection::Animation' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartOffset) == 0x000050, "Member 'UMovieSceneSkeletalAnimationSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, EndOffset) == 0x000054, "Member 'UMovieSceneSkeletalAnimationSection::EndOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, PlayRate) == 0x000058, "Member 'UMovieSceneSkeletalAnimationSection::PlayRate' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, SlotName) == 0x000060, "Member 'UMovieSceneSkeletalAnimationSection::SlotName' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneSkeletalAnimationTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AnimationSections;                                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationTrack">();
	}
	static class UMovieSceneSkeletalAnimationTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationTrack>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationTrack) == 0x000008, "Wrong alignment on UMovieSceneSkeletalAnimationTrack");
static_assert(sizeof(UMovieSceneSkeletalAnimationTrack) == 0x000038, "Wrong size on UMovieSceneSkeletalAnimationTrack");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, AnimationSections) == 0x000028, "Member 'UMovieSceneSkeletalAnimationTrack::AnimationSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSpawnTrack
// 0x0020 (0x0048 - 0x0028)
class UMovieSceneSpawnTrack final : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  ObjectGuid;                                        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSpawnTrack">();
	}
	static class UMovieSceneSpawnTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSpawnTrack>();
	}
};
static_assert(alignof(UMovieSceneSpawnTrack) == 0x000008, "Wrong alignment on UMovieSceneSpawnTrack");
static_assert(sizeof(UMovieSceneSpawnTrack) == 0x000048, "Wrong size on UMovieSceneSpawnTrack");
static_assert(offsetof(UMovieSceneSpawnTrack, Sections) == 0x000028, "Member 'UMovieSceneSpawnTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneSpawnTrack, ObjectGuid) == 0x000038, "Member 'UMovieSceneSpawnTrack::ObjectGuid' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneStringSection
// 0x0080 (0x00C0 - 0x0040)
class UMovieSceneStringSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStringCurve                           StringCurve;                                       // 0x0048(0x0078)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneStringSection">();
	}
	static class UMovieSceneStringSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneStringSection>();
	}
};
static_assert(alignof(UMovieSceneStringSection) == 0x000008, "Wrong alignment on UMovieSceneStringSection");
static_assert(sizeof(UMovieSceneStringSection) == 0x0000C0, "Wrong size on UMovieSceneStringSection");
static_assert(offsetof(UMovieSceneStringSection, StringCurve) == 0x000048, "Member 'UMovieSceneStringSection::StringCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSubSection
// 0x0058 (0x0098 - 0x0040)
class UMovieSceneSubSection : public UMovieSceneSection
{
public:
	float                                         StartOffset;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSequence*                    SubSequence;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TLazyObjectPtr<class AActor>                  ActorToRecord;                                     // 0x0058(0x001C)(Edit, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetSequenceName;                                // 0x0078(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDirectoryPath                         TargetPathToRecordTo;                              // 0x0088(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSubSection">();
	}
	static class UMovieSceneSubSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSubSection>();
	}
};
static_assert(alignof(UMovieSceneSubSection) == 0x000008, "Wrong alignment on UMovieSceneSubSection");
static_assert(sizeof(UMovieSceneSubSection) == 0x000098, "Wrong size on UMovieSceneSubSection");
static_assert(offsetof(UMovieSceneSubSection, StartOffset) == 0x000040, "Member 'UMovieSceneSubSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, TimeScale) == 0x000044, "Member 'UMovieSceneSubSection::TimeScale' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, PrerollTime) == 0x000048, "Member 'UMovieSceneSubSection::PrerollTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, SubSequence) == 0x000050, "Member 'UMovieSceneSubSection::SubSequence' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, ActorToRecord) == 0x000058, "Member 'UMovieSceneSubSection::ActorToRecord' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, TargetSequenceName) == 0x000078, "Member 'UMovieSceneSubSection::TargetSequenceName' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, TargetPathToRecordTo) == 0x000088, "Member 'UMovieSceneSubSection::TargetPathToRecordTo' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCinematicShotSection
// 0x0018 (0x00B0 - 0x0098)
class UMovieSceneCinematicShotSection final : public UMovieSceneSubSection
{
public:
	class FText                                   DisplayName;                                       // 0x0098(0x0018)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCinematicShotSection">();
	}
	static class UMovieSceneCinematicShotSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCinematicShotSection>();
	}
};
static_assert(alignof(UMovieSceneCinematicShotSection) == 0x000008, "Wrong alignment on UMovieSceneCinematicShotSection");
static_assert(sizeof(UMovieSceneCinematicShotSection) == 0x0000B0, "Wrong size on UMovieSceneCinematicShotSection");
static_assert(offsetof(UMovieSceneCinematicShotSection, DisplayName) == 0x000098, "Member 'UMovieSceneCinematicShotSection::DisplayName' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSubTrack
// 0x0010 (0x0038 - 0x0028)
class UMovieSceneSubTrack : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSubTrack">();
	}
	static class UMovieSceneSubTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSubTrack>();
	}
};
static_assert(alignof(UMovieSceneSubTrack) == 0x000008, "Wrong alignment on UMovieSceneSubTrack");
static_assert(sizeof(UMovieSceneSubTrack) == 0x000038, "Wrong size on UMovieSceneSubTrack");
static_assert(offsetof(UMovieSceneSubTrack, Sections) == 0x000028, "Member 'UMovieSceneSubTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneCinematicShotTrack
// 0x0000 (0x0038 - 0x0038)
class UMovieSceneCinematicShotTrack final : public UMovieSceneSubTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCinematicShotTrack">();
	}
	static class UMovieSceneCinematicShotTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCinematicShotTrack>();
	}
};
static_assert(alignof(UMovieSceneCinematicShotTrack) == 0x000008, "Wrong alignment on UMovieSceneCinematicShotTrack");
static_assert(sizeof(UMovieSceneCinematicShotTrack) == 0x000038, "Wrong size on UMovieSceneCinematicShotTrack");

// Class MovieSceneTracks.MovieSceneVectorSection
// 0x01F0 (0x0230 - 0x0040)
class UMovieSceneVectorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Curves[0x4];                                       // 0x0048(0x0078)(NativeAccessSpecifierPrivate)
	int32                                         ChannelsUsed;                                      // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVectorSection">();
	}
	static class UMovieSceneVectorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVectorSection>();
	}
};
static_assert(alignof(UMovieSceneVectorSection) == 0x000008, "Wrong alignment on UMovieSceneVectorSection");
static_assert(sizeof(UMovieSceneVectorSection) == 0x000230, "Wrong size on UMovieSceneVectorSection");
static_assert(offsetof(UMovieSceneVectorSection, Curves) == 0x000048, "Member 'UMovieSceneVectorSection::Curves' has a wrong offset!");
static_assert(offsetof(UMovieSceneVectorSection, ChannelsUsed) == 0x000228, "Member 'UMovieSceneVectorSection::ChannelsUsed' has a wrong offset!");

}

