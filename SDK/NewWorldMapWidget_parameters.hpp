#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NewWorldMapWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function NewWorldMapWidget.NewWorldMapWidget_C.ExecuteUbergraph_NewWorldMapWidget
// 0x0320 (0x0320 - 0x0000)
struct NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              m__struct_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable3;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m__int_Variable;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         m__int_Variable2;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable4;                                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Has_Been_Initd_Variable;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReplaying_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalMousePosition_ReturnValue;        // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_UCtoMC_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue3; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0080(0x0034)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bIsPad;                         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable5;                                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetWidgetPosition_ReturnValue;            // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         m__object_Variable;                                // 0x00D8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_NEW_OutHit;               // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_NEW_ReturnValue;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173[0x1];                                      // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue2;                // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetMapSize_MapSize;                       // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_ClampPositionByWidgetSize_UC_ReturnValue; // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWheelUpAlignment_Alignment;            // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_IsClosed_Variable;                         // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0254(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue3;                // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetMapSize_MapSize2;                      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue4;                // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMapSize_MapSize3;                      // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select2_Default;                            // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue5;                // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x02A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetMapSize_MapSize4;                      // 0x02AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select3_Default;                            // 0x02B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x02BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue2;   // 0x02C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue6;                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Scale;                                // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsXBoxOnePlatform_NewParam;               // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPadGuidePos_UC_ReturnValue;            // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X7;                         // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y7;                         // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue2;               // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLastInputGamepad_ReturnValue;           // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X8;                         // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y8;                         // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Select4_Default;                            // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x030C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select5_Default;                            // 0x0314(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget");
static_assert(sizeof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget) == 0x000320, "Wrong size on NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, EntryPoint) == 0x000000, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Variable) == 0x000004, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__float_Variable) == 0x000008, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__float_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Variable2) == 0x00000C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__struct_Variable) == 0x000010, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__struct_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Variable3) == 0x000018, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Variable3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__int_Variable) == 0x00001C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__int_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__int_Variable2) == 0x000020, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__int_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Variable4) == 0x000024, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Variable4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000028, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Has_Been_Initd_Variable) == 0x000030, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_IsReplaying_ReturnValue) == 0x000032, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_IsReplaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetLocalMousePosition_ReturnValue) == 0x000034, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetLocalMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_UCtoMC_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_UCtoMC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetOwningTslPlayerController_ReturnValue2) == 0x000050, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetOwningTslPlayerController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X) == 0x000058, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y) == 0x00005C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetOwningTslPlayerController_ReturnValue3) == 0x000060, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetOwningTslPlayerController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_MakeVector_ReturnValue) == 0x000068, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000074, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Event_MyGeometry) == 0x000080, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Event_InDeltaTime) == 0x0000B4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_CustomEvent_bIsPad) == 0x0000B8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_CustomEvent_bIsPad' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetWidgetSize_ReturnValue) == 0x0000BC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue) == 0x0000C4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_Variable5) == 0x0000C8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_Variable5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetWidgetPosition_ReturnValue) == 0x0000CC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetWidgetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__object_Variable) == 0x0000D8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__object_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_LineTraceSingle_NEW_OutHit) == 0x0000E8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_LineTraceSingle_NEW_OutHit' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_LineTraceSingle_NEW_ReturnValue) == 0x000170, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_LineTraceSingle_NEW_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_bBlockingHit) == 0x000171, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_bInitialOverlap) == 0x000172, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_Time) == 0x000174, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_Location) == 0x000178, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_ImpactPoint) == 0x000184, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_Normal) == 0x000190, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_ImpactNormal) == 0x00019C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_PhysMat) == 0x0001A8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_HitActor) == 0x0001B0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_HitComponent) == 0x0001B8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_HitBoneName) == 0x0001C0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_HitItem) == 0x0001C8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_FaceIndex) == 0x0001CC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_TraceStart) == 0x0001D0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakHitResult_TraceEnd) == 0x0001DC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Add_VectorVector_ReturnValue) == 0x0001E8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue2) == 0x0001F4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetAlignment_ReturnValue) == 0x0001F8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetMapSize_MapSize) == 0x000200, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetMapSize_MapSize' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_ClampPositionByWidgetSize_UC_ReturnValue) == 0x000208, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_ClampPositionByWidgetSize_UC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000210, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X2) == 0x000214, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y2) == 0x000218, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetWheelUpAlignment_Alignment) == 0x00021C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetWheelUpAlignment_Alignment' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Array_Add_ReturnValue) == 0x000224, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetViewportSize_ReturnValue) == 0x000228, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetViewportScale_ReturnValue) == 0x000230, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, m__bool_IsClosed_Variable) == 0x000234, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::m__bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000238, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X3) == 0x000240, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y3) == 0x000244, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetViewportSize_ReturnValue2) == 0x000248, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetViewportScale_ReturnValue2) == 0x000250, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000254, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue3) == 0x00025C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X4) == 0x000260, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y4) == 0x000264, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetMapSize_MapSize2) == 0x000268, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetMapSize_MapSize2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X5) == 0x000270, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y5) == 0x000274, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue4) == 0x000278, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00027C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetMapSize_MapSize3) == 0x000280, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetMapSize_MapSize3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X6) == 0x000288, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y6) == 0x00028C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Select_Default) == 0x000290, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x000298, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Select2_Default) == 0x00029C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue5) == 0x0002A0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_MakeVector2D_ReturnValue) == 0x0002A4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetMapSize_MapSize4) == 0x0002AC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetMapSize_MapSize4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Select3_Default) == 0x0002B4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0002BC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Subtract_Vector2DVector2D_ReturnValue2) == 0x0002C4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Subtract_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetZoomLevel_ReturnValue6) == 0x0002CC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetZoomLevel_ReturnValue6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Event_Scale) == 0x0002D0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Event_Scale' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_IsXBoxOnePlatform_NewParam) == 0x0002D4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_IsXBoxOnePlatform_NewParam' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetPadGuidePos_UC_ReturnValue) == 0x0002D8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetPadGuidePos_UC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X7) == 0x0002E0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y7) == 0x0002E4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_GetWidgetSize_ReturnValue2) == 0x0002E8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_GetWidgetSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_IsLastInputGamepad_ReturnValue) == 0x0002F0, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_IsLastInputGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_X8) == 0x0002F4, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_X8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BreakVector2D_Y8) == 0x0002F8, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BreakVector2D_Y8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_BooleanOR_ReturnValue) == 0x0002FC, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000300, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000304, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Select4_Default) == 0x000308, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, CallFunc_MakeVector2D_ReturnValue2) == 0x00030C, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget, K2Node_Select5_Default) == 0x000314, "Member 'NewWorldMapWidget_C_ExecuteUbergraph_NewWorldMapWidget::K2Node_Select5_Default' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnInputAxis
// 0x0004 (0x0004 - 0x0000)
struct NewWorldMapWidget_C_OnInputAxis final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnInputAxis) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_OnInputAxis");
static_assert(sizeof(NewWorldMapWidget_C_OnInputAxis) == 0x000004, "Wrong size on NewWorldMapWidget_C_OnInputAxis");
static_assert(offsetof(NewWorldMapWidget_C_OnInputAxis, Scale) == 0x000000, "Member 'NewWorldMapWidget_C_OnInputAxis::Scale' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.StartChangeMapSize
// 0x0001 (0x0001 - 0x0000)
struct NewWorldMapWidget_C_StartChangeMapSize final
{
public:
	bool                                          bIsPad;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_StartChangeMapSize) == 0x000001, "Wrong alignment on NewWorldMapWidget_C_StartChangeMapSize");
static_assert(sizeof(NewWorldMapWidget_C_StartChangeMapSize) == 0x000001, "Wrong size on NewWorldMapWidget_C_StartChangeMapSize");
static_assert(offsetof(NewWorldMapWidget_C_StartChangeMapSize, bIsPad) == 0x000000, "Member 'NewWorldMapWidget_C_StartChangeMapSize::bIsPad' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.Tick
// 0x0038 (0x0038 - 0x0000)
struct NewWorldMapWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_Tick) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_Tick");
static_assert(sizeof(NewWorldMapWidget_C_Tick) == 0x000038, "Wrong size on NewWorldMapWidget_C_Tick");
static_assert(offsetof(NewWorldMapWidget_C_Tick, MyGeometry) == 0x000000, "Member 'NewWorldMapWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_Tick, InDeltaTime) == 0x000034, "Member 'NewWorldMapWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.UpdateZoom
// 0x0018 (0x0018 - 0x0000)
struct NewWorldMapWidget_C_UpdateZoom final
{
public:
	float                                         ZoomOffset;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomLevel_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomRange_ZoomMin;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetZoomRange_ZoomMax;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_UpdateZoom) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_UpdateZoom");
static_assert(sizeof(NewWorldMapWidget_C_UpdateZoom) == 0x000018, "Wrong size on NewWorldMapWidget_C_UpdateZoom");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, ZoomOffset) == 0x000000, "Member 'NewWorldMapWidget_C_UpdateZoom::ZoomOffset' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, CallFunc_GetZoomLevel_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_UpdateZoom::CallFunc_GetZoomLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, CallFunc_GetZoomRange_ZoomMin) == 0x000008, "Member 'NewWorldMapWidget_C_UpdateZoom::CallFunc_GetZoomRange_ZoomMin' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, CallFunc_GetZoomRange_ZoomMax) == 0x00000C, "Member 'NewWorldMapWidget_C_UpdateZoom::CallFunc_GetZoomRange_ZoomMax' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_UpdateZoom::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateZoom, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_UpdateZoom::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMouseWheel
// 0x0200 (0x0200 - 0x0000)
struct NewWorldMapWidget_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0158(0x00A8)()
};
static_assert(alignof(NewWorldMapWidget_C_OnMouseWheel) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMouseWheel");
static_assert(sizeof(NewWorldMapWidget_C_OnMouseWheel) == 0x000200, "Wrong size on NewWorldMapWidget_C_OnMouseWheel");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'NewWorldMapWidget_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'NewWorldMapWidget_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseWheel, ReturnValue) == 0x0000B0, "Member 'NewWorldMapWidget_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x000158, "Member 'NewWorldMapWidget_C_OnMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.UpdateMap
// 0x0030 (0x0030 - 0x0000)
struct NewWorldMapWidget_C_UpdateMap final
{
public:
	struct FVector2D                              MapSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue2;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_UpdateMap) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_UpdateMap");
static_assert(sizeof(NewWorldMapWidget_C_UpdateMap) == 0x000030, "Wrong size on NewWorldMapWidget_C_UpdateMap");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, MapSize) == 0x000000, "Member 'NewWorldMapWidget_C_UpdateMap::MapSize' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_BreakVector2D_X) == 0x000008, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_GetWidgetSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_BreakVector2D_X2) == 0x000018, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_BreakVector2D_Y2) == 0x00001C, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_NotEqual_FloatFloat_ReturnValue2) == 0x000021, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_NotEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMap, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'NewWorldMapWidget_C_UpdateMap::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.InitializeWorldMap
// 0x000C (0x000C - 0x0000)
struct NewWorldMapWidget_C_InitializeWorldMap final
{
public:
	float                                         CallFunc_GetZoomLevel_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetMapSize_MapSize;                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_InitializeWorldMap) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_InitializeWorldMap");
static_assert(sizeof(NewWorldMapWidget_C_InitializeWorldMap) == 0x00000C, "Wrong size on NewWorldMapWidget_C_InitializeWorldMap");
static_assert(offsetof(NewWorldMapWidget_C_InitializeWorldMap, CallFunc_GetZoomLevel_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_InitializeWorldMap::CallFunc_GetZoomLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitializeWorldMap, CallFunc_GetMapSize_MapSize) == 0x000004, "Member 'NewWorldMapWidget_C_InitializeWorldMap::CallFunc_GetMapSize_MapSize' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMouseButtonDown
// 0x0200 (0x0200 - 0x0000)
struct NewWorldMapWidget_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0158(0x00A8)()
};
static_assert(alignof(NewWorldMapWidget_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMouseButtonDown");
static_assert(sizeof(NewWorldMapWidget_C_OnMouseButtonDown) == 0x000200, "Wrong size on NewWorldMapWidget_C_OnMouseButtonDown");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'NewWorldMapWidget_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'NewWorldMapWidget_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'NewWorldMapWidget_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000158, "Member 'NewWorldMapWidget_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMouseMove
// 0x0200 (0x0200 - 0x0000)
struct NewWorldMapWidget_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0158(0x00A8)()
};
static_assert(alignof(NewWorldMapWidget_C_OnMouseMove) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMouseMove");
static_assert(sizeof(NewWorldMapWidget_C_OnMouseMove) == 0x000200, "Wrong size on NewWorldMapWidget_C_OnMouseMove");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'NewWorldMapWidget_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'NewWorldMapWidget_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseMove, ReturnValue) == 0x0000B0, "Member 'NewWorldMapWidget_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000158, "Member 'NewWorldMapWidget_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMouseButtonUp
// 0x0200 (0x0200 - 0x0000)
struct NewWorldMapWidget_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0158(0x00A8)()
};
static_assert(alignof(NewWorldMapWidget_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMouseButtonUp");
static_assert(sizeof(NewWorldMapWidget_C_OnMouseButtonUp) == 0x000200, "Wrong size on NewWorldMapWidget_C_OnMouseButtonUp");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'NewWorldMapWidget_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'NewWorldMapWidget_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'NewWorldMapWidget_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000158, "Member 'NewWorldMapWidget_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetZoomRange
// 0x002C (0x002C - 0x0000)
struct NewWorldMapWidget_C_GetZoomRange final
{
public:
	float                                         ZoomMin;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ZoomMax;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m__float_Variable2;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select2_Default;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetZoomRange) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_GetZoomRange");
static_assert(sizeof(NewWorldMapWidget_C_GetZoomRange) == 0x00002C, "Wrong size on NewWorldMapWidget_C_GetZoomRange");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, ZoomMin) == 0x000000, "Member 'NewWorldMapWidget_C_GetZoomRange::ZoomMin' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, ZoomMax) == 0x000004, "Member 'NewWorldMapWidget_C_GetZoomRange::ZoomMax' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, m__bool_Variable) == 0x000008, "Member 'NewWorldMapWidget_C_GetZoomRange::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, m__float_Variable) == 0x00000C, "Member 'NewWorldMapWidget_C_GetZoomRange::m__float_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, m__bool_Variable2) == 0x000010, "Member 'NewWorldMapWidget_C_GetZoomRange::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, m__float_Variable2) == 0x000014, "Member 'NewWorldMapWidget_C_GetZoomRange::m__float_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, CallFunc_GetTimeRange_MinTime) == 0x000018, "Member 'NewWorldMapWidget_C_GetZoomRange::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, CallFunc_GetTimeRange_MaxTime) == 0x00001C, "Member 'NewWorldMapWidget_C_GetZoomRange::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_GetZoomRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, K2Node_Select_Default) == 0x000024, "Member 'NewWorldMapWidget_C_GetZoomRange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetZoomRange, K2Node_Select2_Default) == 0x000028, "Member 'NewWorldMapWidget_C_GetZoomRange::K2Node_Select2_Default' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.TickChangeMapSize
// 0x0198 (0x0198 - 0x0000)
struct NewWorldMapWidget_C_TickChangeMapSize final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue3;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue3;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue3;             // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue4;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue3;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue4;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X7;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y7;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue4;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X8;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y8;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue2;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue4;            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X9;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y9;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue2;                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X10;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y10;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue5;            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue3;                 // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X11;                        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y11;                        // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue4;         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue2;                        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue2;                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0174(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue2;        // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_TickChangeMapSize) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_TickChangeMapSize");
static_assert(sizeof(NewWorldMapWidget_C_TickChangeMapSize) == 0x000198, "Wrong size on NewWorldMapWidget_C_TickChangeMapSize");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, DeltaTime) == 0x000000, "Member 'NewWorldMapWidget_C_TickChangeMapSize::DeltaTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportScale_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetPosition_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X) == 0x000028, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X2) == 0x000030, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y2) == 0x000034, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportScale_ReturnValue2) == 0x000038, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportSize_ReturnValue2) == 0x000040, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000048, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetWidgetSize_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X3) == 0x000058, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y3) == 0x00005C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X4) == 0x000060, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y4) == 0x000064, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000068, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000070, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetAlignment_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_SlotAsCanvasSlot_ReturnValue3) == 0x000080, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_SlotAsCanvasSlot_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X5) == 0x000088, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y5) == 0x00008C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetPosition_ReturnValue2) == 0x000090, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X6) == 0x00009C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y6) == 0x0000A0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000A8, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000AC, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000B0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FMin_ReturnValue) == 0x0000B4, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FMax_ReturnValue) == 0x0000B8, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportScale_ReturnValue3) == 0x0000BC, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportScale_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportSize_ReturnValue3) == 0x0000C4, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportSize_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportScale_ReturnValue4) == 0x0000CC, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportScale_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_Vector2DFloat_ReturnValue3) == 0x0000D0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_Vector2DFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetViewportSize_ReturnValue4) == 0x0000D8, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetViewportSize_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X7) == 0x0000E0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y7) == 0x0000E4, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_Vector2DFloat_ReturnValue4) == 0x0000E8, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_Vector2DFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x0000F0, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X8) == 0x0000F4, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y8) == 0x0000F8, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x0000FC, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetWidgetSize_ReturnValue2) == 0x000100, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetWidgetSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_SlotAsCanvasSlot_ReturnValue4) == 0x000108, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_SlotAsCanvasSlot_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X9) == 0x000110, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X9' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y9) == 0x000114, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y9' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetAlignment_ReturnValue2) == 0x000118, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetAlignment_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X10) == 0x000120, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X10' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y10) == 0x000124, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y10' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_SlotAsCanvasSlot_ReturnValue5) == 0x000128, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_SlotAsCanvasSlot_ReturnValue5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x000130, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetPosition_ReturnValue3) == 0x000134, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetPosition_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00013C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_X11) == 0x000140, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_X11' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_BreakVector2D_Y11) == 0x000144, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_BreakVector2D_Y11' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000148, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00014C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Subtract_FloatFloat_ReturnValue4) == 0x000150, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Subtract_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FMin_ReturnValue2) == 0x000154, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FMin_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FMax_ReturnValue2) == 0x000158, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FMax_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_FClamp_ReturnValue2) == 0x00015C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_MakeVector2D_ReturnValue) == 0x000160, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000168, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetFloatValue_ReturnValue) == 0x000170, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000174, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Add_Vector2DVector2D_ReturnValue2) == 0x00017C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Add_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetTimeRange_MinTime) == 0x000184, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_GetTimeRange_MaxTime) == 0x000188, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Less_FloatFloat_ReturnValue) == 0x00018C, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickChangeMapSize, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000190, "Member 'NewWorldMapWidget_C_TickChangeMapSize::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.ClampPosition
// 0x001C (0x001C - 0x0000)
struct NewWorldMapWidget_C_ClampPosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              ConvertedPosition;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_ClampPosition_UC_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         OutX;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_ClampPosition) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_ClampPosition");
static_assert(sizeof(NewWorldMapWidget_C_ClampPosition) == 0x00001C, "Wrong size on NewWorldMapWidget_C_ClampPosition");
static_assert(offsetof(NewWorldMapWidget_C_ClampPosition, Position) == 0x000000, "Member 'NewWorldMapWidget_C_ClampPosition::Position' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ClampPosition, ConvertedPosition) == 0x000008, "Member 'NewWorldMapWidget_C_ClampPosition::ConvertedPosition' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ClampPosition, CallFunc_ClampPosition_UC_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_ClampPosition::CallFunc_ClampPosition_UC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ClampPosition, OutX) == 0x000018, "Member 'NewWorldMapWidget_C_ClampPosition::OutX' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.IsInMapWidget
// 0x000C (0x000C - 0x0000)
struct NewWorldMapWidget_C_IsInMapWidget final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsIn;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_IsInMapWidget) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_IsInMapWidget");
static_assert(sizeof(NewWorldMapWidget_C_IsInMapWidget) == 0x00000C, "Wrong size on NewWorldMapWidget_C_IsInMapWidget");
static_assert(offsetof(NewWorldMapWidget_C_IsInMapWidget, Position) == 0x000000, "Member 'NewWorldMapWidget_C_IsInMapWidget::Position' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInMapWidget, IsIn) == 0x000008, "Member 'NewWorldMapWidget_C_IsInMapWidget::IsIn' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.TickMapPositionMove
// 0x01A0 (0x01A0 - 0x0000)
struct NewWorldMapWidget_C_TickMapPositionMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue3;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue3;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue3;             // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue4;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue3;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue4;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X7;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y7;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue4;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue3;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X8;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y8;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue4;           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue2;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue4;            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X9;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y9;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue2;                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X10;                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y10;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue5;            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue3;                 // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X11;                        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y11;                        // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue4;         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue2;                        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue2;                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue6;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x018C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue2;        // 0x0194(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_TickMapPositionMove) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_TickMapPositionMove");
static_assert(sizeof(NewWorldMapWidget_C_TickMapPositionMove) == 0x0001A0, "Wrong size on NewWorldMapWidget_C_TickMapPositionMove");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, DeltaTime) == 0x000000, "Member 'NewWorldMapWidget_C_TickMapPositionMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportScale_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetPosition_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X) == 0x000028, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X2) == 0x000030, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y2) == 0x000034, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportScale_ReturnValue2) == 0x000038, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportSize_ReturnValue2) == 0x000040, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000048, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetWidgetSize_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X3) == 0x000058, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y3) == 0x00005C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X4) == 0x000060, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y4) == 0x000064, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x000068, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000070, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetAlignment_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue3) == 0x000080, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X5) == 0x000088, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y5) == 0x00008C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetPosition_ReturnValue2) == 0x000090, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X6) == 0x00009C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y6) == 0x0000A0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000A8, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000AC, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000B0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FMin_ReturnValue) == 0x0000B4, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FMax_ReturnValue) == 0x0000B8, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportScale_ReturnValue3) == 0x0000BC, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportScale_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportSize_ReturnValue3) == 0x0000C4, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportSize_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportScale_ReturnValue4) == 0x0000CC, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportScale_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_Vector2DFloat_ReturnValue3) == 0x0000D0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_Vector2DFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetViewportSize_ReturnValue4) == 0x0000D8, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetViewportSize_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X7) == 0x0000E0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y7) == 0x0000E4, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_Vector2DFloat_ReturnValue4) == 0x0000E8, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_Vector2DFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_FloatFloat_ReturnValue3) == 0x0000F0, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X8) == 0x0000F4, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y8) == 0x0000F8, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Divide_FloatFloat_ReturnValue4) == 0x0000FC, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Divide_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetWidgetSize_ReturnValue2) == 0x000100, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetWidgetSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue4) == 0x000108, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X9) == 0x000110, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X9' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y9) == 0x000114, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y9' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetAlignment_ReturnValue2) == 0x000118, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetAlignment_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X10) == 0x000120, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X10' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y10) == 0x000124, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y10' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue5) == 0x000128, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x000130, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetPosition_ReturnValue3) == 0x000134, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetPosition_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00013C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_X11) == 0x000140, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_X11' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_BreakVector2D_Y11) == 0x000144, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_BreakVector2D_Y11' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000148, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00014C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Subtract_FloatFloat_ReturnValue4) == 0x000150, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Subtract_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FMin_ReturnValue2) == 0x000154, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FMin_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FMax_ReturnValue2) == 0x000158, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FMax_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_FClamp_ReturnValue2) == 0x00015C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_MakeVector2D_ReturnValue) == 0x000160, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetTimeRange_MinTime) == 0x000168, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetTimeRange_MaxTime) == 0x00016C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Less_FloatFloat_ReturnValue) == 0x000170, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_SlotAsCanvasSlot_ReturnValue6) == 0x000178, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_SlotAsCanvasSlot_ReturnValue6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_GetFloatValue_ReturnValue) == 0x000180, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000184, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00018C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Add_Vector2DVector2D_ReturnValue2) == 0x000194, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Add_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_TickMapPositionMove, CallFunc_Add_FloatFloat_ReturnValue3) == 0x00019C, "Member 'NewWorldMapWidget_C_TickMapPositionMove::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.PlayFadeInAnim
// 0x0004 (0x0004 - 0x0000)
struct NewWorldMapWidget_C_PlayFadeInAnim final
{
public:
	float                                         Playback_Speed;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_PlayFadeInAnim) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_PlayFadeInAnim");
static_assert(sizeof(NewWorldMapWidget_C_PlayFadeInAnim) == 0x000004, "Wrong size on NewWorldMapWidget_C_PlayFadeInAnim");
static_assert(offsetof(NewWorldMapWidget_C_PlayFadeInAnim, Playback_Speed) == 0x000000, "Member 'NewWorldMapWidget_C_PlayFadeInAnim::Playback_Speed' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.UpdateMapAlignment
// 0x0080 (0x0080 - 0x0000)
struct NewWorldMapWidget_C_UpdateMapAlignment final
{
public:
	struct FVector2D                              Aligment;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              Size;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue3;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              OldPosition;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              OldAlignment;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              NewAlignment;                                      // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_UpdateMapAlignment) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_UpdateMapAlignment");
static_assert(sizeof(NewWorldMapWidget_C_UpdateMapAlignment) == 0x000080, "Wrong size on NewWorldMapWidget_C_UpdateMapAlignment");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, Aligment) == 0x000000, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::Aligment' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, Size) == 0x000008, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::Size' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_BreakVector2D_X) == 0x000010, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000028, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_BreakVector2D_X2) == 0x000030, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_BreakVector2D_Y2) == 0x000034, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00003C, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_MakeVector2D_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_SlotAsCanvasSlot_ReturnValue3) == 0x000048, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_SlotAsCanvasSlot_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_GetAlignment_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, CallFunc_GetPosition_ReturnValue) == 0x000060, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, OldPosition) == 0x000068, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::OldPosition' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, OldAlignment) == 0x000070, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::OldAlignment' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_UpdateMapAlignment, NewAlignment) == 0x000078, "Member 'NewWorldMapWidget_C_UpdateMapAlignment::NewAlignment' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.TestClear
// 0x0008 (0x0008 - 0x0000)
struct NewWorldMapWidget_C_TestClear final
{
public:
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_TestClear) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_TestClear");
static_assert(sizeof(NewWorldMapWidget_C_TestClear) == 0x000008, "Wrong size on NewWorldMapWidget_C_TestClear");
static_assert(offsetof(NewWorldMapWidget_C_TestClear, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_TestClear::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetMapWidgetScreenLocation
// 0x00A8 (0x00A8 - 0x0000)
struct NewWorldMapWidget_C_GetMapWidgetScreenLocation final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              LeftTop;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              RightBottom;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue4;         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetMapWidgetScreenLocation) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_GetMapWidgetScreenLocation");
static_assert(sizeof(NewWorldMapWidget_C_GetMapWidgetScreenLocation) == 0x0000A8, "Wrong size on NewWorldMapWidget_C_GetMapWidgetScreenLocation");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, Position) == 0x000000, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::Position' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, LeftTop) == 0x000008, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::LeftTop' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, RightBottom) == 0x000010, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::RightBottom' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_GetViewportScale_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_GetWidgetSize_ReturnValue) == 0x00001C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_X) == 0x000030, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_GetAlignment_ReturnValue) == 0x000038, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_GetViewportSize_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_X2) == 0x000048, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_Y2) == 0x00004C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x00005C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000068, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000070, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_X3) == 0x000074, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_BreakVector2D_Y3) == 0x000078, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x00007C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000080, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000084, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x000088, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00008C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000090, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_MakeVector2D_ReturnValue) == 0x000094, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_Subtract_FloatFloat_ReturnValue4) == 0x00009C, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_Subtract_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapWidgetScreenLocation, CallFunc_MakeVector2D_ReturnValue2) == 0x0000A0, "Member 'NewWorldMapWidget_C_GetMapWidgetScreenLocation::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.InitNewWorldMapWidget
// 0x0148 (0x0148 - 0x0000)
struct NewWorldMapWidget_C_InitNewWorldMapWidget final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate5;             // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate6;             // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate7;             // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate8;             // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate9;             // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate10;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate11;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate12;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate13;            // 0x00C8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate14;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate15;            // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float Scale)>                  K2Node_CreateDelegate_OutputDelegate16;            // 0x00F8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate17;            // 0x0108(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate18;            // 0x0118(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate19;            // 0x0128(0x0010)(ZeroConstructor, NoDestructor)
	class ATslCharacter*                          CallFunc_GetOwningShooterCharacter_ShooterCharacter; // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFiring_ReturnValue;                     // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargeting_ReturnValue;                  // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_InitNewWorldMapWidget) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_InitNewWorldMapWidget");
static_assert(sizeof(NewWorldMapWidget_C_InitNewWorldMapWidget) == 0x000148, "Wrong size on NewWorldMapWidget_C_InitNewWorldMapWidget");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate2) == 0x000010, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate3) == 0x000020, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate4) == 0x000030, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate5) == 0x000040, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate6) == 0x000058, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate7) == 0x000068, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate8) == 0x000078, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate9) == 0x000088, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate9' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate10) == 0x000098, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate10' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate11) == 0x0000A8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate11' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate12) == 0x0000B8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate12' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate13) == 0x0000C8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate13' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate14) == 0x0000D8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate14' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate15) == 0x0000E8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate15' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate16) == 0x0000F8, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate16' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate17) == 0x000108, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate17' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate18) == 0x000118, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate18' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, K2Node_CreateDelegate_OutputDelegate19) == 0x000128, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::K2Node_CreateDelegate_OutputDelegate19' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, CallFunc_GetOwningShooterCharacter_ShooterCharacter) == 0x000138, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::CallFunc_GetOwningShooterCharacter_ShooterCharacter' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, CallFunc_IsFiring_ReturnValue) == 0x000141, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::CallFunc_IsFiring_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_InitNewWorldMapWidget, CallFunc_IsTargeting_ReturnValue) == 0x000142, "Member 'NewWorldMapWidget_C_InitNewWorldMapWidget::CallFunc_IsTargeting_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMarker
// 0x0218 (0x0218 - 0x0000)
struct NewWorldMapWidget_C_OnMarker final
{
public:
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue2; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue3; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalMousePosition_ReturnValue;        // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_UCtoMC_ReturnValue;                       // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsObserving_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_ComputeServerToLocalPosition_ReturnValue; // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_ComputeServerToLocalPosition_ReturnValue2; // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         m__object_Variable;                                // 0x0080(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_NEW_OutHit;               // 0x0090(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_NEW_ReturnValue;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue4; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATeam*                                  CallFunc_GetViewTargetTeam_ReturnValue;            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectating_ReturnValue;                 // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue5; // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalMousePosition_ReturnValue2;       // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMouseInMarker_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_UCtoMC_ReturnValue2;                      // 0x01D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMouseOn_ReturnValue;                    // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DE[0x2];                                      // 0x01DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerState*                        K2Node_DynamicCast_AsTsl_Player_State;             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLocalVar_0;                                     // 0x01F4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TeleportPosition;                                  // 0x0200(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerState*                        TslPlayerState;                                    // 0x0210(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnMarker) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMarker");
static_assert(sizeof(NewWorldMapWidget_C_OnMarker) == 0x000218, "Wrong size on NewWorldMapWidget_C_OnMarker");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningTslPlayerController_ReturnValue2) == 0x000008, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningTslPlayerController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningTslPlayerController_ReturnValue3) == 0x000020, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningTslPlayerController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetLocalMousePosition_ReturnValue) == 0x00002C, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetLocalMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_UCtoMC_ReturnValue) == 0x000034, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_UCtoMC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsObserving_ReturnValue) == 0x00003C, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsObserving_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakVector2D_X) == 0x000040, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000054, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_ComputeServerToLocalPosition_ReturnValue) == 0x000060, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_ComputeServerToLocalPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_ComputeServerToLocalPosition_ReturnValue2) == 0x00006C, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_ComputeServerToLocalPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetTslHUD_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, m__object_Variable) == 0x000080, "Member 'NewWorldMapWidget_C_OnMarker::m__object_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_LineTraceSingle_NEW_OutHit) == 0x000090, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_LineTraceSingle_NEW_OutHit' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_LineTraceSingle_NEW_ReturnValue) == 0x000118, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_LineTraceSingle_NEW_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningTslPlayerController_ReturnValue4) == 0x000120, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningTslPlayerController_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetViewTargetTeam_ReturnValue) == 0x000128, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetViewTargetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsValid_ReturnValue2) == 0x000130, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsValid_ReturnValue3) == 0x000131, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsSpectating_ReturnValue) == 0x000132, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsSpectating_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_Not_PreBool_ReturnValue) == 0x000133, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_bBlockingHit) == 0x000134, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_bInitialOverlap) == 0x000135, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_Time) == 0x000138, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_Location) == 0x00013C, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_Normal) == 0x000154, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_FaceIndex) == 0x000194, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_TraceStart) == 0x000198, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_BreakHitResult_TraceEnd) == 0x0001A4, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_Add_VectorVector_ReturnValue) == 0x0001B0, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningTslPlayerController_ReturnValue5) == 0x0001C0, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningTslPlayerController_ReturnValue5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetLocalMousePosition_ReturnValue2) == 0x0001C8, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetLocalMousePosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsMouseInMarker_ReturnValue) == 0x0001D0, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsMouseInMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_UCtoMC_ReturnValue2) == 0x0001D4, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_UCtoMC_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_Not_PreBool_ReturnValue2) == 0x0001DC, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_IsMouseOn_ReturnValue) == 0x0001DD, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_IsMouseOn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, CallFunc_GetOwningPlayer_ReturnValue) == 0x0001E0, "Member 'NewWorldMapWidget_C_OnMarker::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, K2Node_DynamicCast_AsTsl_Player_State) == 0x0001E8, "Member 'NewWorldMapWidget_C_OnMarker::K2Node_DynamicCast_AsTsl_Player_State' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'NewWorldMapWidget_C_OnMarker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, NewLocalVar_0) == 0x0001F4, "Member 'NewWorldMapWidget_C_OnMarker::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, TeleportPosition) == 0x000200, "Member 'NewWorldMapWidget_C_OnMarker::TeleportPosition' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarker, TslPlayerState) == 0x000210, "Member 'NewWorldMapWidget_C_OnMarker::TslPlayerState' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MoveMapGrid
// 0x0080 (0x0080 - 0x0000)
struct NewWorldMapWidget_C_MoveMapGrid final
{
public:
	struct FVector2D                              AdditionalPos;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ClampPosition_ConvertedPosition;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select2_Default;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MoveMapGrid) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_MoveMapGrid");
static_assert(sizeof(NewWorldMapWidget_C_MoveMapGrid) == 0x000080, "Wrong size on NewWorldMapWidget_C_MoveMapGrid");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, AdditionalPos) == 0x000000, "Member 'NewWorldMapWidget_C_MoveMapGrid::AdditionalPos' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, m__bool_Variable) == 0x000008, "Member 'NewWorldMapWidget_C_MoveMapGrid::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, m__bool_Variable2) == 0x000009, "Member 'NewWorldMapWidget_C_MoveMapGrid::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_GetViewportScale_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_GetViewportSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_GetWidgetSize_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_X) == 0x000028, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_X2) == 0x000030, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_Y2) == 0x000034, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000038, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_GetPosition_ReturnValue) == 0x000044, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_X3) == 0x00004C, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_Y3) == 0x000050, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000054, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x00005C, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_ClampPosition_ConvertedPosition) == 0x000060, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_ClampPosition_ConvertedPosition' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_X4) == 0x000068, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_BreakVector2D_Y4) == 0x00006C, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, K2Node_Select_Default) == 0x000070, "Member 'NewWorldMapWidget_C_MoveMapGrid::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, K2Node_Select2_Default) == 0x000074, "Member 'NewWorldMapWidget_C_MoveMapGrid::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MoveMapGrid, CallFunc_MakeVector2D_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_MoveMapGrid::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMapMove
// 0x0020 (0x0020 - 0x0000)
struct NewWorldMapWidget_C_OnMapMove final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnMapMove) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMapMove");
static_assert(sizeof(NewWorldMapWidget_C_OnMapMove) == 0x000020, "Wrong size on NewWorldMapWidget_C_OnMapMove");
static_assert(offsetof(NewWorldMapWidget_C_OnMapMove, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnMapMove::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMapMove, CallFunc_GetMousePosition_LocationX) == 0x000008, "Member 'NewWorldMapWidget_C_OnMapMove::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMapMove, CallFunc_GetMousePosition_LocationY) == 0x00000C, "Member 'NewWorldMapWidget_C_OnMapMove::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMapMove, CallFunc_GetMousePosition_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_OnMapMove::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMapMove, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_OnMapMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OffMapMove
// 0x0020 (0x0020 - 0x0000)
struct NewWorldMapWidget_C_OffMapMove final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue2;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FTrunc_ReturnValue2;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OffMapMove) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OffMapMove");
static_assert(sizeof(NewWorldMapWidget_C_OffMapMove) == 0x000020, "Wrong size on NewWorldMapWidget_C_OffMapMove");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_BreakVector2D_X) == 0x000008, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_GetOwningPlayer_ReturnValue2) == 0x000010, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_GetOwningPlayer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OffMapMove, CallFunc_FTrunc_ReturnValue2) == 0x00001C, "Member 'NewWorldMapWidget_C_OffMapMove::CallFunc_FTrunc_ReturnValue2' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapMoveX
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_MapMoveX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapMoveX) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapMoveX");
static_assert(sizeof(NewWorldMapWidget_C_MapMoveX) == 0x000010, "Wrong size on NewWorldMapWidget_C_MapMoveX");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveX, Value) == 0x000000, "Member 'NewWorldMapWidget_C_MapMoveX::Value' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_MapMoveX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveX, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_MapMoveX::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapMoveY
// 0x0020 (0x0020 - 0x0000)
struct NewWorldMapWidget_C_MapMoveY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInvertMouse_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapMoveY) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapMoveY");
static_assert(sizeof(NewWorldMapWidget_C_MapMoveY) == 0x000020, "Wrong size on NewWorldMapWidget_C_MapMoveY");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, Value) == 0x000000, "Member 'NewWorldMapWidget_C_MapMoveY::Value' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, m__bool_Variable) == 0x000004, "Member 'NewWorldMapWidget_C_MapMoveY::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_MapMoveY::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, CallFunc_IsInvertMouse_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_MapMoveY::CallFunc_IsInvertMouse_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000010, "Member 'NewWorldMapWidget_C_MapMoveY::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, K2Node_Select_Default) == 0x000014, "Member 'NewWorldMapWidget_C_MapMoveY::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveY, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_MapMoveY::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapZoom
// 0x0028 (0x0028 - 0x0000)
struct NewWorldMapWidget_C_MapZoom final
{
public:
	float                                         AdditaionalZoom;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetWorldMapZoomSpeedLevel_ReturnValue;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SafeDivide_FloatFloat_ReturnValue;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMouseOn_ReturnValue;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapZoom) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapZoom");
static_assert(sizeof(NewWorldMapWidget_C_MapZoom) == 0x000028, "Wrong size on NewWorldMapWidget_C_MapZoom");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, AdditaionalZoom) == 0x000000, "Member 'NewWorldMapWidget_C_MapZoom::AdditaionalZoom' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_GetWorldMapZoomSpeedLevel_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_GetWorldMapZoomSpeedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_SafeDivide_FloatFloat_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_SafeDivide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_GetFloatValue_ReturnValue) == 0x00001C, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoom, CallFunc_IsMouseOn_ReturnValue) == 0x000024, "Member 'NewWorldMapWidget_C_MapZoom::CallFunc_IsMouseOn_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapMoveGamepadX
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_MapMoveGamepadX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapMoveGamepadX) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapMoveGamepadX");
static_assert(sizeof(NewWorldMapWidget_C_MapMoveGamepadX) == 0x000010, "Wrong size on NewWorldMapWidget_C_MapMoveGamepadX");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadX, Value) == 0x000000, "Member 'NewWorldMapWidget_C_MapMoveGamepadX::Value' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_MapMoveGamepadX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadX, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_MapMoveGamepadX::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapMoveGamepadY
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_MapMoveGamepadY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapMoveGamepadY) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapMoveGamepadY");
static_assert(sizeof(NewWorldMapWidget_C_MapMoveGamepadY) == 0x000010, "Wrong size on NewWorldMapWidget_C_MapMoveGamepadY");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadY, Value) == 0x000000, "Member 'NewWorldMapWidget_C_MapMoveGamepadY::Value' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadY, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_MapMoveGamepadY::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapMoveGamepadY, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_MapMoveGamepadY::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnPrepass_0
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_OnPrepass_0 final
{
public:
	class UWidget*                                BoundWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              m__byte_Variable2;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLastInputGamepad_ReturnValue;           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsXBoxOnePlatform_NewParam;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnPrepass_0) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnPrepass_0");
static_assert(sizeof(NewWorldMapWidget_C_OnPrepass_0) == 0x000010, "Wrong size on NewWorldMapWidget_C_OnPrepass_0");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, BoundWidget) == 0x000000, "Member 'NewWorldMapWidget_C_OnPrepass_0::BoundWidget' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, m__bool_Variable) == 0x000008, "Member 'NewWorldMapWidget_C_OnPrepass_0::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, m__byte_Variable) == 0x000009, "Member 'NewWorldMapWidget_C_OnPrepass_0::m__byte_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, m__byte_Variable2) == 0x00000A, "Member 'NewWorldMapWidget_C_OnPrepass_0::m__byte_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, CallFunc_IsLastInputGamepad_ReturnValue) == 0x00000B, "Member 'NewWorldMapWidget_C_OnPrepass_0::CallFunc_IsLastInputGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, CallFunc_IsXBoxOnePlatform_NewParam) == 0x00000C, "Member 'NewWorldMapWidget_C_OnPrepass_0::CallFunc_IsXBoxOnePlatform_NewParam' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'NewWorldMapWidget_C_OnPrepass_0::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPrepass_0, K2Node_Select_Default) == 0x00000E, "Member 'NewWorldMapWidget_C_OnPrepass_0::K2Node_Select_Default' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMarkerDelete
// 0x0018 (0x0018 - 0x0000)
struct NewWorldMapWidget_C_OnMarkerDelete final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerState*                        K2Node_DynamicCast_AsTsl_Player_State;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnMarkerDelete) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnMarkerDelete");
static_assert(sizeof(NewWorldMapWidget_C_OnMarkerDelete) == 0x000018, "Wrong size on NewWorldMapWidget_C_OnMarkerDelete");
static_assert(offsetof(NewWorldMapWidget_C_OnMarkerDelete, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnMarkerDelete::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarkerDelete, K2Node_DynamicCast_AsTsl_Player_State) == 0x000008, "Member 'NewWorldMapWidget_C_OnMarkerDelete::K2Node_DynamicCast_AsTsl_Player_State' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnMarkerDelete, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'NewWorldMapWidget_C_OnMarkerDelete::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnPutMarkerPad
// 0x0050 (0x0050 - 0x0000)
struct NewWorldMapWidget_C_OnPutMarkerPad final
{
public:
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsObserving_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPadGuidePos_MC_ReturnValue;            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue2; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATeam*                                  CallFunc_GetViewTargetTeam_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSpectating_ReturnValue;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerState*                        K2Node_DynamicCast_AsTsl_Player_State;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslPlayerState*                        TslPlayerState;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnPutMarkerPad) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnPutMarkerPad");
static_assert(sizeof(NewWorldMapWidget_C_OnPutMarkerPad) == 0x000050, "Wrong size on NewWorldMapWidget_C_OnPutMarkerPad");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_IsObserving_ReturnValue) == 0x000009, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_IsObserving_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_GetPadGuidePos_MC_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_GetPadGuidePos_MC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_GetOwningTslPlayerController_ReturnValue2) == 0x000018, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_GetOwningTslPlayerController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_GetViewTargetTeam_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_GetViewTargetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_IsValid_ReturnValue2) == 0x000028, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_IsValid_ReturnValue3) == 0x000029, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_IsSpectating_ReturnValue) == 0x00002A, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_IsSpectating_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, K2Node_DynamicCast_AsTsl_Player_State) == 0x000038, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::K2Node_DynamicCast_AsTsl_Player_State' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnPutMarkerPad, TslPlayerState) == 0x000048, "Member 'NewWorldMapWidget_C_OnPutMarkerPad::TslPlayerState' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.MapZoomPad
// 0x000C (0x000C - 0x0000)
struct NewWorldMapWidget_C_MapZoomPad final
{
public:
	float                                         AdditaionalZoom;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInPadGuideInMap_bIsIn;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_MapZoomPad) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_MapZoomPad");
static_assert(sizeof(NewWorldMapWidget_C_MapZoomPad) == 0x00000C, "Wrong size on NewWorldMapWidget_C_MapZoomPad");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, AdditaionalZoom) == 0x000000, "Member 'NewWorldMapWidget_C_MapZoomPad::AdditaionalZoom' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_IsInPadGuideInMap_bIsIn) == 0x000004, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_IsInPadGuideInMap_bIsIn' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000007, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_Not_PreBool_ReturnValue2) == 0x000008, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_MapZoomPad, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'NewWorldMapWidget_C_MapZoomPad::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.PadGuideMoveUp
// 0x00F0 (0x00F0 - 0x0000)
struct NewWorldMapWidget_C_PadGuideMoveUp final
{
public:
	float                                         Add;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue3;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x00D8(0x0010)(ZeroConstructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_PadGuideMoveUp) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_PadGuideMoveUp");
static_assert(sizeof(NewWorldMapWidget_C_PadGuideMoveUp) == 0x0000F0, "Wrong size on NewWorldMapWidget_C_PadGuideMoveUp");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, Add) == 0x000000, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::Add' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetViewportScale_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetViewportSize_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetViewportScale_ReturnValue2) == 0x00001C, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetViewportSize_ReturnValue2) == 0x000028, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X) == 0x000030, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000038, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X2) == 0x000044, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y2) == 0x000048, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x00004C, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetWidgetSize_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X3) == 0x000060, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y3) == 0x000064, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetAlignment_ReturnValue) == 0x000068, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X4) == 0x000070, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y4) == 0x000074, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000078, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000080, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetPosition_ReturnValue) == 0x000084, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X5) == 0x000090, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y5) == 0x000094, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000098, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000A0, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_FMin_ReturnValue) == 0x0000A4, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_FMax_ReturnValue) == 0x0000A8, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Not_PreBool_ReturnValue) == 0x0000AC, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_SlotAsCanvasSlot_ReturnValue3) == 0x0000B0, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_SlotAsCanvasSlot_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_GetPosition_ReturnValue2) == 0x0000BC, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000C4, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_X6) == 0x0000CC, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_BreakVector2D_Y6) == 0x0000D0, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_FClamp_ReturnValue) == 0x0000D4, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_Conv_FloatToString_ReturnValue) == 0x0000D8, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveUp, CallFunc_MakeVector2D_ReturnValue) == 0x0000E8, "Member 'NewWorldMapWidget_C_PadGuideMoveUp::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.PadGuideMoveRight
// 0x00E0 (0x00E0 - 0x0000)
struct NewWorldMapWidget_C_PadGuideMoveRight final
{
public:
	float                                         Add;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue3;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_PadGuideMoveRight) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_PadGuideMoveRight");
static_assert(sizeof(NewWorldMapWidget_C_PadGuideMoveRight) == 0x0000E0, "Wrong size on NewWorldMapWidget_C_PadGuideMoveRight");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, Add) == 0x000000, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::Add' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetViewportScale_ReturnValue) == 0x000004, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetViewportSize_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetViewportScale_ReturnValue2) == 0x00001C, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetViewportSize_ReturnValue2) == 0x000028, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X) == 0x000030, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000038, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X2) == 0x000044, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y2) == 0x000048, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x00004C, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetWidgetSize_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X3) == 0x000060, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y3) == 0x000064, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetAlignment_ReturnValue) == 0x000068, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X4) == 0x000070, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y4) == 0x000074, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000078, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000080, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetPosition_ReturnValue) == 0x000084, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X5) == 0x000090, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y5) == 0x000094, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000098, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000A0, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_FMin_ReturnValue) == 0x0000A4, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_FMax_ReturnValue) == 0x0000A8, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Not_PreBool_ReturnValue) == 0x0000AC, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_SlotAsCanvasSlot_ReturnValue3) == 0x0000B0, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_SlotAsCanvasSlot_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_GetPosition_ReturnValue2) == 0x0000BC, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000C4, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_X6) == 0x0000CC, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_BreakVector2D_Y6) == 0x0000D0, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_FClamp_ReturnValue) == 0x0000D4, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_PadGuideMoveRight, CallFunc_MakeVector2D_ReturnValue) == 0x0000D8, "Member 'NewWorldMapWidget_C_PadGuideMoveRight::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.CheckReplayStatus
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_CheckReplayStatus final
{
public:
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReplaying_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_CheckReplayStatus) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_CheckReplayStatus");
static_assert(sizeof(NewWorldMapWidget_C_CheckReplayStatus) == 0x000010, "Wrong size on NewWorldMapWidget_C_CheckReplayStatus");
static_assert(offsetof(NewWorldMapWidget_C_CheckReplayStatus, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_CheckReplayStatus::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_CheckReplayStatus, CallFunc_IsReplaying_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_CheckReplayStatus::CallFunc_IsReplaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_CheckReplayStatus, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'NewWorldMapWidget_C_CheckReplayStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnHideWorldMap
// 0x0010 (0x0010 - 0x0000)
struct NewWorldMapWidget_C_OnHideWorldMap final
{
public:
	class ATslHUD*                                CallFunc_GetTslHUD_ReturnValue;                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnHideWorldMap) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_OnHideWorldMap");
static_assert(sizeof(NewWorldMapWidget_C_OnHideWorldMap) == 0x000010, "Wrong size on NewWorldMapWidget_C_OnHideWorldMap");
static_assert(offsetof(NewWorldMapWidget_C_OnHideWorldMap, CallFunc_GetTslHUD_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnHideWorldMap::CallFunc_GetTslHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_OnHideWorldMap, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_OnHideWorldMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.SetMapGridPositoin
// 0x0080 (0x0080 - 0x0000)
struct NewWorldMapWidget_C_SetMapGridPositoin final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ClampPosition_ConvertedPosition;          // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          m__bool_Variable2;                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select2_Default;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_SetMapGridPositoin) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_SetMapGridPositoin");
static_assert(sizeof(NewWorldMapWidget_C_SetMapGridPositoin) == 0x000080, "Wrong size on NewWorldMapWidget_C_SetMapGridPositoin");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, Position) == 0x000000, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::Position' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, m__bool_Variable) == 0x000008, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::m__bool_Variable' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_ClampPosition_ConvertedPosition) == 0x00000C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_ClampPosition_ConvertedPosition' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, m__bool_Variable2) == 0x000014, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::m__bool_Variable2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_X) == 0x000018, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_GetViewportScale_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_GetViewportSize_ReturnValue) == 0x000024, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00002C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_GetWidgetSize_ReturnValue) == 0x000034, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_X2) == 0x00003C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_Y2) == 0x000040, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_X3) == 0x000044, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_Y3) == 0x000048, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_GetPosition_ReturnValue) == 0x00005C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_X4) == 0x000064, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_BreakVector2D_Y4) == 0x000068, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x00006C, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, K2Node_Select_Default) == 0x000070, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, K2Node_Select2_Default) == 0x000074, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_SetMapGridPositoin, CallFunc_MakeVector2D_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_SetMapGridPositoin::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.OnMoveMapGridViewCenterToMyIconCenter
// 0x0008 (0x0008 - 0x0000)
struct NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter final
{
public:
	struct FVector2D                              CallFunc_GetMoveMapGridViewCenterToMyIconCenterDir_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter");
static_assert(sizeof(NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter) == 0x000008, "Wrong size on NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter");
static_assert(offsetof(NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter, CallFunc_GetMoveMapGridViewCenterToMyIconCenterDir_ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_OnMoveMapGridViewCenterToMyIconCenter::CallFunc_GetMoveMapGridViewCenterToMyIconCenterDir_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetMapSize
// 0x0024 (0x0024 - 0x0000)
struct NewWorldMapWidget_C_GetMapSize final
{
public:
	float                                         Zoom;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              MapSize;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetMapSize) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_GetMapSize");
static_assert(sizeof(NewWorldMapWidget_C_GetMapSize) == 0x000024, "Wrong size on NewWorldMapWidget_C_GetMapSize");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, Zoom) == 0x000000, "Member 'NewWorldMapWidget_C_GetMapSize::Zoom' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, MapSize) == 0x000004, "Member 'NewWorldMapWidget_C_GetMapSize::MapSize' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, CallFunc_MakeVector2D_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_GetMapSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'NewWorldMapWidget_C_GetMapSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, CallFunc_GetFloatValue_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_GetMapSize::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMapSize, CallFunc_MakeVector2D_ReturnValue2) == 0x00001C, "Member 'NewWorldMapWidget_C_GetMapSize::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetWheelUpAlignment
// 0x00D8 (0x00D8 - 0x0000)
struct NewWorldMapWidget_C_GetWheelUpAlignment final
{
public:
	struct FVector2D                              Alignment;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue2;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetViewportScale_ReturnValue2;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue2;             // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue3;        // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue4;        // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue4;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue5;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue6;         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue7;         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue8;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetWheelUpAlignment) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_GetWheelUpAlignment");
static_assert(sizeof(NewWorldMapWidget_C_GetWheelUpAlignment) == 0x0000D8, "Wrong size on NewWorldMapWidget_C_GetWheelUpAlignment");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, Alignment) == 0x000000, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::Alignment' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetViewportScale_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetWidgetSize_ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_X) == 0x000020, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetAlignment_ReturnValue) == 0x000028, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetPosition_ReturnValue) == 0x000030, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_X2) == 0x000038, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_Y2) == 0x00003C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetViewportSize_ReturnValue) == 0x000040, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00004C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_Vector2DFloat_ReturnValue2) == 0x000058, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_Vector2DFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000060, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_X3) == 0x000064, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_Y3) == 0x000068, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x00006C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000070, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000074, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetViewportScale_ReturnValue2) == 0x000078, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetViewportScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_GetViewportSize_ReturnValue2) == 0x00007C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_GetViewportSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_Vector2DFloat_ReturnValue3) == 0x000084, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_Vector2DFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_Vector2DFloat_ReturnValue4) == 0x00008C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_Vector2DFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000094, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_X4) == 0x00009C, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_BreakVector2D_Y4) == 0x0000A0, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x0000A4, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A8, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue4) == 0x0000AC, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue5) == 0x0000B0, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Add_FloatFloat_ReturnValue2) == 0x0000B4, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue6) == 0x0000B8, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue7) == 0x0000BC, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Subtract_FloatFloat_ReturnValue8) == 0x0000C0, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Subtract_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C4, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x0000C8, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetWheelUpAlignment, CallFunc_MakeVector2D_ReturnValue) == 0x0000CC, "Member 'NewWorldMapWidget_C_GetWheelUpAlignment::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.ComputeServerToLocalPosition
// 0x0024 (0x0024 - 0x0000)
struct NewWorldMapWidget_C_ComputeServerToLocalPosition final
{
public:
	struct FVector                                Server;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_ServerPositionToLocal_ReturnValue;        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_ComputeServerToLocalPosition) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_ComputeServerToLocalPosition");
static_assert(sizeof(NewWorldMapWidget_C_ComputeServerToLocalPosition) == 0x000024, "Wrong size on NewWorldMapWidget_C_ComputeServerToLocalPosition");
static_assert(offsetof(NewWorldMapWidget_C_ComputeServerToLocalPosition, Server) == 0x000000, "Member 'NewWorldMapWidget_C_ComputeServerToLocalPosition::Server' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ComputeServerToLocalPosition, ReturnValue) == 0x00000C, "Member 'NewWorldMapWidget_C_ComputeServerToLocalPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_ComputeServerToLocalPosition, CallFunc_ServerPositionToLocal_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_ComputeServerToLocalPosition::CallFunc_ServerPositionToLocal_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetPadGuidePos_UC
// 0x0070 (0x0070 - 0x0000)
struct NewWorldMapWidget_C_GetPadGuidePos_UC final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         OutPositionY;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         OutPositoinX;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetPadGuidePos_UC) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_GetPadGuidePos_UC");
static_assert(sizeof(NewWorldMapWidget_C_GetPadGuidePos_UC) == 0x000070, "Wrong size on NewWorldMapWidget_C_GetPadGuidePos_UC");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_GetWidgetSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_GetPosition_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_BreakVector2D_X) == 0x000020, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000028, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_GetPosition_ReturnValue2) == 0x000030, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_GetAlignment_ReturnValue) == 0x000038, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_BreakVector2D_X2) == 0x000040, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_BreakVector2D_Y2) == 0x000044, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00004C, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_MakeVector2D_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000060, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, OutPositionY) == 0x000068, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::OutPositionY' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_UC, OutPositoinX) == 0x00006C, "Member 'NewWorldMapWidget_C_GetPadGuidePos_UC::OutPositoinX' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetPadGuidePos_MC
// 0x0018 (0x0018 - 0x0000)
struct NewWorldMapWidget_C_GetPadGuidePos_MC final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPadGuidePos_UC_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_UCtoMC_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetPadGuidePos_MC) == 0x000004, "Wrong alignment on NewWorldMapWidget_C_GetPadGuidePos_MC");
static_assert(sizeof(NewWorldMapWidget_C_GetPadGuidePos_MC) == 0x000018, "Wrong size on NewWorldMapWidget_C_GetPadGuidePos_MC");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_MC, ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_GetPadGuidePos_MC::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_MC, CallFunc_GetPadGuidePos_UC_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_GetPadGuidePos_MC::CallFunc_GetPadGuidePos_UC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetPadGuidePos_MC, CallFunc_UCtoMC_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_GetPadGuidePos_MC::CallFunc_UCtoMC_ReturnValue' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.IsInPadGuideInMap
// 0x00B8 (0x00B8 - 0x0000)
struct NewWorldMapWidget_C_IsInPadGuideInMap final
{
public:
	bool                                          bIsIn;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue2;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue2;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue2;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X6;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X7;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y7;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue2;     // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_IsInPadGuideInMap) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_IsInPadGuideInMap");
static_assert(sizeof(NewWorldMapWidget_C_IsInPadGuideInMap) == 0x0000B8, "Wrong size on NewWorldMapWidget_C_IsInPadGuideInMap");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, bIsIn) == 0x000000, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::bIsIn' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GetWidgetSize_ReturnValue) == 0x000010, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GetPosition_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X) == 0x000020, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X2) == 0x000028, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y2) == 0x00002C, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GetWidgetSize_ReturnValue2) == 0x000030, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GetWidgetSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X3) == 0x000038, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y3) == 0x00003C, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_SlotAsCanvasSlot_ReturnValue2) == 0x000040, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_SlotAsCanvasSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GetAlignment_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GetPosition_ReturnValue2) == 0x000050, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GetPosition_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X4) == 0x000058, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y4) == 0x00005C, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X5) == 0x000060, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y5) == 0x000064, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000070, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x000074, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Add_FloatFloat_ReturnValue) == 0x000078, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00007C, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000080, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000084, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_MakeVector2D_ReturnValue) == 0x000088, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_MakeVector2D_ReturnValue2) == 0x000090, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000098, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X6) == 0x0000A0, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y6) == 0x0000A4, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_X7) == 0x0000A8, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_X7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BreakVector2D_Y7) == 0x0000AC, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BreakVector2D_Y7' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000B1, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_GreaterEqual_FloatFloat_ReturnValue2) == 0x0000B2, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_GreaterEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x0000B3, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BooleanAND_ReturnValue) == 0x0000B4, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BooleanAND_ReturnValue2) == 0x0000B5, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_IsInPadGuideInMap, CallFunc_BooleanAND_ReturnValue3) == 0x0000B6, "Member 'NewWorldMapWidget_C_IsInPadGuideInMap::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");

// Function NewWorldMapWidget.NewWorldMapWidget_C.GetMoveMapGridViewCenterToMyIconCenterDir
// 0x00C0 (0x00C0 - 0x0000)
struct NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor)
	struct FVector2D                              CallFunc_GetWidgetSize_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAlignment_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ATslPlayerController*                   CallFunc_GetOwningTslPlayerController_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATslCharacter*                          CallFunc_GetViewTargetTslCharacter_ReturnValue;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LocalPositionToServer_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue2;                // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MCtoUC_ReturnValue;                       // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue2;   // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir) == 0x000008, "Wrong alignment on NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir");
static_assert(sizeof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir) == 0x0000C0, "Wrong size on NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, ReturnValue) == 0x000000, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Conv_FloatToString_ReturnValue) == 0x000008, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_GetWidgetSize_ReturnValue) == 0x000018, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_GetWidgetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000020, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector2D_X) == 0x000028, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_GetAlignment_ReturnValue) == 0x000030, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_GetAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_GetPosition_ReturnValue) == 0x000038, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector2D_X2) == 0x000040, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector2D_Y2) == 0x000044, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_GetOwningTslPlayerController_ReturnValue) == 0x000048, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_GetOwningTslPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_GetViewTargetTslCharacter_ReturnValue) == 0x000058, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_GetViewTargetTslCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_IsValid_ReturnValue2) == 0x000060, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_LocalPositionToServer_ReturnValue) == 0x000070, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_LocalPositionToServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00007C, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector_X) == 0x000080, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector_Y) == 0x000084, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_BreakVector_Z) == 0x000088, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_MakeVector2D_ReturnValue) == 0x00008C, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_MakeVector2D_ReturnValue2) == 0x000094, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_MakeVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00009C, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_MCtoUC_ReturnValue) == 0x0000A4, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_MCtoUC_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000AC, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir, CallFunc_Subtract_Vector2DVector2D_ReturnValue2) == 0x0000B4, "Member 'NewWorldMapWidget_C_GetMoveMapGridViewCenterToMyIconCenterDir::CallFunc_Subtract_Vector2DVector2D_ReturnValue2' has a wrong offset!");

}

