#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AkAudio.AkAmbientSound.IsCurrentlyPlaying
// 0x0001 (0x0001 - 0x0000)
struct AkAmbientSound_IsCurrentlyPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkAmbientSound_IsCurrentlyPlaying) == 0x000001, "Wrong alignment on AkAmbientSound_IsCurrentlyPlaying");
static_assert(sizeof(AkAmbientSound_IsCurrentlyPlaying) == 0x000001, "Wrong size on AkAmbientSound_IsCurrentlyPlaying");
static_assert(offsetof(AkAmbientSound_IsCurrentlyPlaying, ReturnValue) == 0x000000, "Member 'AkAmbientSound_IsCurrentlyPlaying::ReturnValue' has a wrong offset!");

// Function AkAudio.AkComponent.IsCurrentlyPlaying
// 0x0001 (0x0001 - 0x0000)
struct AkComponent_IsCurrentlyPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_IsCurrentlyPlaying) == 0x000001, "Wrong alignment on AkComponent_IsCurrentlyPlaying");
static_assert(sizeof(AkComponent_IsCurrentlyPlaying) == 0x000001, "Wrong size on AkComponent_IsCurrentlyPlaying");
static_assert(offsetof(AkComponent_IsCurrentlyPlaying, ReturnValue) == 0x000000, "Member 'AkComponent_IsCurrentlyPlaying::ReturnValue' has a wrong offset!");

// Function AkAudio.AkComponent.PostAkEvent
// 0x0020 (0x0020 - 0x0000)
struct AkComponent_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 in_EventName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkComponent_PostAkEvent) == 0x000008, "Wrong alignment on AkComponent_PostAkEvent");
static_assert(sizeof(AkComponent_PostAkEvent) == 0x000020, "Wrong size on AkComponent_PostAkEvent");
static_assert(offsetof(AkComponent_PostAkEvent, AkEvent) == 0x000000, "Member 'AkComponent_PostAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkComponent_PostAkEvent, in_EventName) == 0x000008, "Member 'AkComponent_PostAkEvent::in_EventName' has a wrong offset!");
static_assert(offsetof(AkComponent_PostAkEvent, ReturnValue) == 0x000018, "Member 'AkComponent_PostAkEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkComponent.PostAkEventByName
// 0x0018 (0x0018 - 0x0000)
struct AkComponent_PostAkEventByName final
{
public:
	class FString                                 in_EventName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkComponent_PostAkEventByName) == 0x000008, "Wrong alignment on AkComponent_PostAkEventByName");
static_assert(sizeof(AkComponent_PostAkEventByName) == 0x000018, "Wrong size on AkComponent_PostAkEventByName");
static_assert(offsetof(AkComponent_PostAkEventByName, in_EventName) == 0x000000, "Member 'AkComponent_PostAkEventByName::in_EventName' has a wrong offset!");
static_assert(offsetof(AkComponent_PostAkEventByName, ReturnValue) == 0x000010, "Member 'AkComponent_PostAkEventByName::ReturnValue' has a wrong offset!");

// Function AkAudio.AkComponent.PostAssociatedAkEvent
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_PostAssociatedAkEvent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_PostAssociatedAkEvent) == 0x000004, "Wrong alignment on AkComponent_PostAssociatedAkEvent");
static_assert(sizeof(AkComponent_PostAssociatedAkEvent) == 0x000004, "Wrong size on AkComponent_PostAssociatedAkEvent");
static_assert(offsetof(AkComponent_PostAssociatedAkEvent, ReturnValue) == 0x000000, "Member 'AkComponent_PostAssociatedAkEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkComponent.PostTrigger
// 0x0010 (0x0010 - 0x0000)
struct AkComponent_PostTrigger final
{
public:
	class FString                                 Trigger;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_PostTrigger) == 0x000008, "Wrong alignment on AkComponent_PostTrigger");
static_assert(sizeof(AkComponent_PostTrigger) == 0x000010, "Wrong size on AkComponent_PostTrigger");
static_assert(offsetof(AkComponent_PostTrigger, Trigger) == 0x000000, "Member 'AkComponent_PostTrigger::Trigger' has a wrong offset!");

// Function AkAudio.AkComponent.SetActiveListeners
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_SetActiveListeners final
{
public:
	int32                                         in_uListenerMask;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetActiveListeners) == 0x000004, "Wrong alignment on AkComponent_SetActiveListeners");
static_assert(sizeof(AkComponent_SetActiveListeners) == 0x000004, "Wrong size on AkComponent_SetActiveListeners");
static_assert(offsetof(AkComponent_SetActiveListeners, in_uListenerMask) == 0x000000, "Member 'AkComponent_SetActiveListeners::in_uListenerMask' has a wrong offset!");

// Function AkAudio.AkComponent.SetAttenuationScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_SetAttenuationScalingFactor final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetAttenuationScalingFactor) == 0x000004, "Wrong alignment on AkComponent_SetAttenuationScalingFactor");
static_assert(sizeof(AkComponent_SetAttenuationScalingFactor) == 0x000004, "Wrong size on AkComponent_SetAttenuationScalingFactor");
static_assert(offsetof(AkComponent_SetAttenuationScalingFactor, Value) == 0x000000, "Member 'AkComponent_SetAttenuationScalingFactor::Value' has a wrong offset!");

// Function AkAudio.AkComponent.SetOutputBusVolume
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_SetOutputBusVolume final
{
public:
	float                                         BusVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetOutputBusVolume) == 0x000004, "Wrong alignment on AkComponent_SetOutputBusVolume");
static_assert(sizeof(AkComponent_SetOutputBusVolume) == 0x000004, "Wrong size on AkComponent_SetOutputBusVolume");
static_assert(offsetof(AkComponent_SetOutputBusVolume, BusVolume) == 0x000000, "Member 'AkComponent_SetOutputBusVolume::BusVolume' has a wrong offset!");

// Function AkAudio.AkComponent.SetRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct AkComponent_SetRTPCValue final
{
public:
	class FString                                 RTPC;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetRTPCValue) == 0x000008, "Wrong alignment on AkComponent_SetRTPCValue");
static_assert(sizeof(AkComponent_SetRTPCValue) == 0x000018, "Wrong size on AkComponent_SetRTPCValue");
static_assert(offsetof(AkComponent_SetRTPCValue, RTPC) == 0x000000, "Member 'AkComponent_SetRTPCValue::RTPC' has a wrong offset!");
static_assert(offsetof(AkComponent_SetRTPCValue, Value) == 0x000010, "Member 'AkComponent_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkComponent_SetRTPCValue, InterpolationTimeMs) == 0x000014, "Member 'AkComponent_SetRTPCValue::InterpolationTimeMs' has a wrong offset!");

// Function AkAudio.AkComponent.SetStopWhenOwnerDestroyed
// 0x0001 (0x0001 - 0x0000)
struct AkComponent_SetStopWhenOwnerDestroyed final
{
public:
	bool                                          bStopWhenOwnerDestroyed;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetStopWhenOwnerDestroyed) == 0x000001, "Wrong alignment on AkComponent_SetStopWhenOwnerDestroyed");
static_assert(sizeof(AkComponent_SetStopWhenOwnerDestroyed) == 0x000001, "Wrong size on AkComponent_SetStopWhenOwnerDestroyed");
static_assert(offsetof(AkComponent_SetStopWhenOwnerDestroyed, bStopWhenOwnerDestroyed) == 0x000000, "Member 'AkComponent_SetStopWhenOwnerDestroyed::bStopWhenOwnerDestroyed' has a wrong offset!");

// Function AkAudio.AkComponent.SetSwitch
// 0x0020 (0x0020 - 0x0000)
struct AkComponent_SetSwitch final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_SetSwitch) == 0x000008, "Wrong alignment on AkComponent_SetSwitch");
static_assert(sizeof(AkComponent_SetSwitch) == 0x000020, "Wrong size on AkComponent_SetSwitch");
static_assert(offsetof(AkComponent_SetSwitch, SwitchGroup) == 0x000000, "Member 'AkComponent_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkComponent_SetSwitch, SwitchState) == 0x000010, "Member 'AkComponent_SetSwitch::SwitchState' has a wrong offset!");

// Function AkAudio.AkComponent.StopPlayingID
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_StopPlayingID final
{
public:
	int32                                         PlayingID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_StopPlayingID) == 0x000004, "Wrong alignment on AkComponent_StopPlayingID");
static_assert(sizeof(AkComponent_StopPlayingID) == 0x000004, "Wrong size on AkComponent_StopPlayingID");
static_assert(offsetof(AkComponent_StopPlayingID, PlayingID) == 0x000000, "Member 'AkComponent_StopPlayingID::PlayingID' has a wrong offset!");

// Function AkAudio.AkComponent.UseReverbVolumes
// 0x0001 (0x0001 - 0x0000)
struct AkComponent_UseReverbVolumes final
{
public:
	bool                                          inUseReverbVolumes;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_UseReverbVolumes) == 0x000001, "Wrong alignment on AkComponent_UseReverbVolumes");
static_assert(sizeof(AkComponent_UseReverbVolumes) == 0x000001, "Wrong size on AkComponent_UseReverbVolumes");
static_assert(offsetof(AkComponent_UseReverbVolumes, inUseReverbVolumes) == 0x000000, "Member 'AkComponent_UseReverbVolumes::inUseReverbVolumes' has a wrong offset!");

// Function AkAudio.AkComponent.GetAttenuationRadius
// 0x0004 (0x0004 - 0x0000)
struct AkComponent_GetAttenuationRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkComponent_GetAttenuationRadius) == 0x000004, "Wrong alignment on AkComponent_GetAttenuationRadius");
static_assert(sizeof(AkComponent_GetAttenuationRadius) == 0x000004, "Wrong size on AkComponent_GetAttenuationRadius");
static_assert(offsetof(AkComponent_GetAttenuationRadius, ReturnValue) == 0x000000, "Member 'AkComponent_GetAttenuationRadius::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.AddOutputCaptureMarker
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_AddOutputCaptureMarker final
{
public:
	class FString                                 MarkerText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_AddOutputCaptureMarker) == 0x000008, "Wrong alignment on AkGameplayStatics_AddOutputCaptureMarker");
static_assert(sizeof(AkGameplayStatics_AddOutputCaptureMarker) == 0x000010, "Wrong size on AkGameplayStatics_AddOutputCaptureMarker");
static_assert(offsetof(AkGameplayStatics_AddOutputCaptureMarker, MarkerText) == 0x000000, "Member 'AkGameplayStatics_AddOutputCaptureMarker::MarkerText' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.GetAkComponent
// 0x0028 (0x0028 - 0x0000)
struct AkGameplayStatics_GetAkComponent final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   AttachPointName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_GetAkComponent) == 0x000008, "Wrong alignment on AkGameplayStatics_GetAkComponent");
static_assert(sizeof(AkGameplayStatics_GetAkComponent) == 0x000028, "Wrong size on AkGameplayStatics_GetAkComponent");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, AttachToComponent) == 0x000000, "Member 'AkGameplayStatics_GetAkComponent::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, AttachPointName) == 0x000008, "Member 'AkGameplayStatics_GetAkComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, Location) == 0x000010, "Member 'AkGameplayStatics_GetAkComponent::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, LocationType) == 0x00001C, "Member 'AkGameplayStatics_GetAkComponent::LocationType' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_GetAkComponent, ReturnValue) == 0x000020, "Member 'AkGameplayStatics_GetAkComponent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBank
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_LoadBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BankName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBank) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBank");
static_assert(sizeof(AkGameplayStatics_LoadBank) == 0x000018, "Wrong size on AkGameplayStatics_LoadBank");
static_assert(offsetof(AkGameplayStatics_LoadBank, Bank) == 0x000000, "Member 'AkGameplayStatics_LoadBank::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBank, BankName) == 0x000008, "Member 'AkGameplayStatics_LoadBank::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_LoadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_LoadBankByName) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBankByName");
static_assert(sizeof(AkGameplayStatics_LoadBankByName) == 0x000010, "Wrong size on AkGameplayStatics_LoadBankByName");
static_assert(offsetof(AkGameplayStatics_LoadBankByName, BankName) == 0x000000, "Member 'AkGameplayStatics_LoadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.LoadBanks
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_LoadBanks final
{
public:
	TArray<class UAkAudioBank*>                   SoundBanks;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          SynchronizeSoundBanks;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_LoadBanks) == 0x000008, "Wrong alignment on AkGameplayStatics_LoadBanks");
static_assert(sizeof(AkGameplayStatics_LoadBanks) == 0x000018, "Wrong size on AkGameplayStatics_LoadBanks");
static_assert(offsetof(AkGameplayStatics_LoadBanks, SoundBanks) == 0x000000, "Member 'AkGameplayStatics_LoadBanks::SoundBanks' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_LoadBanks, SynchronizeSoundBanks) == 0x000010, "Member 'AkGameplayStatics_LoadBanks::SynchronizeSoundBanks' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEvent
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_PostEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEvent) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEvent");
static_assert(sizeof(AkGameplayStatics_PostEvent) == 0x000030, "Wrong size on AkGameplayStatics_PostEvent");
static_assert(offsetof(AkGameplayStatics_PostEvent, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, Actor) == 0x000008, "Member 'AkGameplayStatics_PostEvent::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, bStopWhenAttachedToDestroyed) == 0x000010, "Member 'AkGameplayStatics_PostEvent::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, EventName) == 0x000018, "Member 'AkGameplayStatics_PostEvent::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEvent, ReturnValue) == 0x000028, "Member 'AkGameplayStatics_PostEvent::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAtLocation
// 0x0040 (0x0040 - 0x0000)
struct AkGameplayStatics_PostEventAtLocation final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventAtLocation) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAtLocation");
static_assert(sizeof(AkGameplayStatics_PostEventAtLocation) == 0x000040, "Wrong size on AkGameplayStatics_PostEventAtLocation");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEventAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, Location) == 0x000008, "Member 'AkGameplayStatics_PostEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, Orientation) == 0x000014, "Member 'AkGameplayStatics_PostEventAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, EventName) == 0x000020, "Member 'AkGameplayStatics_PostEventAtLocation::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, WorldContextObject) == 0x000030, "Member 'AkGameplayStatics_PostEventAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocation, ReturnValue) == 0x000038, "Member 'AkGameplayStatics_PostEventAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAtLocationByName
// 0x0030 (0x0030 - 0x0000)
struct AkGameplayStatics_PostEventAtLocationByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PostEventAtLocationByName) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAtLocationByName");
static_assert(sizeof(AkGameplayStatics_PostEventAtLocationByName) == 0x000030, "Wrong size on AkGameplayStatics_PostEventAtLocationByName");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, EventName) == 0x000000, "Member 'AkGameplayStatics_PostEventAtLocationByName::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, Location) == 0x000010, "Member 'AkGameplayStatics_PostEventAtLocationByName::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, Orientation) == 0x00001C, "Member 'AkGameplayStatics_PostEventAtLocationByName::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAtLocationByName, WorldContextObject) == 0x000028, "Member 'AkGameplayStatics_PostEventAtLocationByName::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventAttached
// 0x0038 (0x0038 - 0x0000)
struct AkGameplayStatics_PostEventAttached final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventAttached) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventAttached");
static_assert(sizeof(AkGameplayStatics_PostEventAttached) == 0x000038, "Wrong size on AkGameplayStatics_PostEventAttached");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, AkEvent) == 0x000000, "Member 'AkGameplayStatics_PostEventAttached::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, Actor) == 0x000008, "Member 'AkGameplayStatics_PostEventAttached::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, AttachPointName) == 0x000010, "Member 'AkGameplayStatics_PostEventAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PostEventAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, EventName) == 0x000020, "Member 'AkGameplayStatics_PostEventAttached::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventAttached, ReturnValue) == 0x000030, "Member 'AkGameplayStatics_PostEventAttached::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostEventByName
// 0x0020 (0x0020 - 0x0000)
struct AkGameplayStatics_PostEventByName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AkGameplayStatics_PostEventByName) == 0x000008, "Wrong alignment on AkGameplayStatics_PostEventByName");
static_assert(sizeof(AkGameplayStatics_PostEventByName) == 0x000020, "Wrong size on AkGameplayStatics_PostEventByName");
static_assert(offsetof(AkGameplayStatics_PostEventByName, EventName) == 0x000000, "Member 'AkGameplayStatics_PostEventByName::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventByName, Actor) == 0x000010, "Member 'AkGameplayStatics_PostEventByName::Actor' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostEventByName, bStopWhenAttachedToDestroyed) == 0x000018, "Member 'AkGameplayStatics_PostEventByName::bStopWhenAttachedToDestroyed' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.PostTrigger
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_PostTrigger final
{
public:
	struct FName                                   Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_PostTrigger) == 0x000008, "Wrong alignment on AkGameplayStatics_PostTrigger");
static_assert(sizeof(AkGameplayStatics_PostTrigger) == 0x000010, "Wrong size on AkGameplayStatics_PostTrigger");
static_assert(offsetof(AkGameplayStatics_PostTrigger, Trigger) == 0x000000, "Member 'AkGameplayStatics_PostTrigger::Trigger' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_PostTrigger, Actor) == 0x000008, "Member 'AkGameplayStatics_PostTrigger::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetOcclusionRefreshInterval
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetOcclusionRefreshInterval final
{
public:
	float                                         RefreshInterval;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetOcclusionRefreshInterval) == 0x000008, "Wrong alignment on AkGameplayStatics_SetOcclusionRefreshInterval");
static_assert(sizeof(AkGameplayStatics_SetOcclusionRefreshInterval) == 0x000010, "Wrong size on AkGameplayStatics_SetOcclusionRefreshInterval");
static_assert(offsetof(AkGameplayStatics_SetOcclusionRefreshInterval, RefreshInterval) == 0x000000, "Member 'AkGameplayStatics_SetOcclusionRefreshInterval::RefreshInterval' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetOcclusionRefreshInterval, Actor) == 0x000008, "Member 'AkGameplayStatics_SetOcclusionRefreshInterval::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetOutputBusVolume
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetOutputBusVolume final
{
public:
	float                                         BusVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetOutputBusVolume) == 0x000008, "Wrong alignment on AkGameplayStatics_SetOutputBusVolume");
static_assert(sizeof(AkGameplayStatics_SetOutputBusVolume) == 0x000010, "Wrong size on AkGameplayStatics_SetOutputBusVolume");
static_assert(offsetof(AkGameplayStatics_SetOutputBusVolume, BusVolume) == 0x000000, "Member 'AkGameplayStatics_SetOutputBusVolume::BusVolume' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetOutputBusVolume, Actor) == 0x000008, "Member 'AkGameplayStatics_SetOutputBusVolume::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetRTPCValue final
{
public:
	struct FName                                   RTPC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeMs;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetRTPCValue) == 0x000008, "Wrong alignment on AkGameplayStatics_SetRTPCValue");
static_assert(sizeof(AkGameplayStatics_SetRTPCValue) == 0x000018, "Wrong size on AkGameplayStatics_SetRTPCValue");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, RTPC) == 0x000000, "Member 'AkGameplayStatics_SetRTPCValue::RTPC' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, Value) == 0x000008, "Member 'AkGameplayStatics_SetRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, InterpolationTimeMs) == 0x00000C, "Member 'AkGameplayStatics_SetRTPCValue::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetRTPCValue, Actor) == 0x000010, "Member 'AkGameplayStatics_SetRTPCValue::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetState
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_SetState final
{
public:
	struct FName                                   StateGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetState) == 0x000004, "Wrong alignment on AkGameplayStatics_SetState");
static_assert(sizeof(AkGameplayStatics_SetState) == 0x000010, "Wrong size on AkGameplayStatics_SetState");
static_assert(offsetof(AkGameplayStatics_SetState, StateGroup) == 0x000000, "Member 'AkGameplayStatics_SetState::StateGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetState, State) == 0x000008, "Member 'AkGameplayStatics_SetState::State' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SetSwitch
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_SetSwitch final
{
public:
	struct FName                                   SwitchGroup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FName                                   SwitchState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SetSwitch) == 0x000008, "Wrong alignment on AkGameplayStatics_SetSwitch");
static_assert(sizeof(AkGameplayStatics_SetSwitch) == 0x000018, "Wrong size on AkGameplayStatics_SetSwitch");
static_assert(offsetof(AkGameplayStatics_SetSwitch, SwitchGroup) == 0x000000, "Member 'AkGameplayStatics_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitch, SwitchState) == 0x000008, "Member 'AkGameplayStatics_SetSwitch::SwitchState' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SetSwitch, Actor) == 0x000010, "Member 'AkGameplayStatics_SetSwitch::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.SpawnAkComponentAtLocation
// 0x0050 (0x0050 - 0x0000)
struct AkGameplayStatics_SpawnAkComponentAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_SpawnAkComponentAtLocation) == 0x000008, "Wrong alignment on AkGameplayStatics_SpawnAkComponentAtLocation");
static_assert(sizeof(AkGameplayStatics_SpawnAkComponentAtLocation) == 0x000050, "Wrong size on AkGameplayStatics_SpawnAkComponentAtLocation");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AkEvent) == 0x000008, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, Location) == 0x000010, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, Orientation) == 0x00001C, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AutoPost) == 0x000028, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AutoPost' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, EventName) == 0x000030, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::EventName' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, AutoDestroy) == 0x000040, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::AutoDestroy' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_SpawnAkComponentAtLocation, ReturnValue) == 0x000048, "Member 'AkGameplayStatics_SpawnAkComponentAtLocation::ReturnValue' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartAllAmbientSounds
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StartAllAmbientSounds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartAllAmbientSounds) == 0x000008, "Wrong alignment on AkGameplayStatics_StartAllAmbientSounds");
static_assert(sizeof(AkGameplayStatics_StartAllAmbientSounds) == 0x000008, "Wrong size on AkGameplayStatics_StartAllAmbientSounds");
static_assert(offsetof(AkGameplayStatics_StartAllAmbientSounds, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_StartAllAmbientSounds::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartOutputCapture
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_StartOutputCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartOutputCapture) == 0x000008, "Wrong alignment on AkGameplayStatics_StartOutputCapture");
static_assert(sizeof(AkGameplayStatics_StartOutputCapture) == 0x000010, "Wrong size on AkGameplayStatics_StartOutputCapture");
static_assert(offsetof(AkGameplayStatics_StartOutputCapture, Filename) == 0x000000, "Member 'AkGameplayStatics_StartOutputCapture::Filename' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StartProfilerCapture
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_StartProfilerCapture final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StartProfilerCapture) == 0x000008, "Wrong alignment on AkGameplayStatics_StartProfilerCapture");
static_assert(sizeof(AkGameplayStatics_StartProfilerCapture) == 0x000010, "Wrong size on AkGameplayStatics_StartProfilerCapture");
static_assert(offsetof(AkGameplayStatics_StartProfilerCapture, Filename) == 0x000000, "Member 'AkGameplayStatics_StartProfilerCapture::Filename' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopActor
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StopActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StopActor) == 0x000008, "Wrong alignment on AkGameplayStatics_StopActor");
static_assert(sizeof(AkGameplayStatics_StopActor) == 0x000008, "Wrong size on AkGameplayStatics_StopActor");
static_assert(offsetof(AkGameplayStatics_StopActor, Actor) == 0x000000, "Member 'AkGameplayStatics_StopActor::Actor' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.StopAllAmbientSounds
// 0x0008 (0x0008 - 0x0000)
struct AkGameplayStatics_StopAllAmbientSounds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_StopAllAmbientSounds) == 0x000008, "Wrong alignment on AkGameplayStatics_StopAllAmbientSounds");
static_assert(sizeof(AkGameplayStatics_StopAllAmbientSounds) == 0x000008, "Wrong size on AkGameplayStatics_StopAllAmbientSounds");
static_assert(offsetof(AkGameplayStatics_StopAllAmbientSounds, WorldContextObject) == 0x000000, "Member 'AkGameplayStatics_StopAllAmbientSounds::WorldContextObject' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBank
// 0x0018 (0x0018 - 0x0000)
struct AkGameplayStatics_UnloadBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BankName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBank) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBank");
static_assert(sizeof(AkGameplayStatics_UnloadBank) == 0x000018, "Wrong size on AkGameplayStatics_UnloadBank");
static_assert(offsetof(AkGameplayStatics_UnloadBank, Bank) == 0x000000, "Member 'AkGameplayStatics_UnloadBank::Bank' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UnloadBank, BankName) == 0x000008, "Member 'AkGameplayStatics_UnloadBank::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UnloadBankByName
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_UnloadBankByName final
{
public:
	class FString                                 BankName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UnloadBankByName) == 0x000008, "Wrong alignment on AkGameplayStatics_UnloadBankByName");
static_assert(sizeof(AkGameplayStatics_UnloadBankByName) == 0x000010, "Wrong size on AkGameplayStatics_UnloadBankByName");
static_assert(offsetof(AkGameplayStatics_UnloadBankByName, BankName) == 0x000000, "Member 'AkGameplayStatics_UnloadBankByName::BankName' has a wrong offset!");

// Function AkAudio.AkGameplayStatics.UseReverbVolumes
// 0x0010 (0x0010 - 0x0000)
struct AkGameplayStatics_UseReverbVolumes final
{
public:
	bool                                          inUseReverbVolumes;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkGameplayStatics_UseReverbVolumes) == 0x000008, "Wrong alignment on AkGameplayStatics_UseReverbVolumes");
static_assert(sizeof(AkGameplayStatics_UseReverbVolumes) == 0x000010, "Wrong size on AkGameplayStatics_UseReverbVolumes");
static_assert(offsetof(AkGameplayStatics_UseReverbVolumes, inUseReverbVolumes) == 0x000000, "Member 'AkGameplayStatics_UseReverbVolumes::inUseReverbVolumes' has a wrong offset!");
static_assert(offsetof(AkGameplayStatics_UseReverbVolumes, Actor) == 0x000008, "Member 'AkGameplayStatics_UseReverbVolumes::Actor' has a wrong offset!");

}

